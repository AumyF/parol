%start Oberon2
%title "Oberon2 grammar"
%comment "Adapted from https://cseweb.ucsd.edu/~wgg/CSE131B/oberon2.htm for `parol`"
%block_comment "\(\*" "\*\)"

%%

KwBegin         : "BEGIN";
KwCase          : "CASE";
KwDo            : "DO";
KwElse          : "ELSE";
KwElsif         : "ELSIF";
KwEnd           : "END";
KwIf            : "IF";
KwOf            : "OF";
KwProcedure     : "PROCEDURE";
KwThen          : "THEN";
KwTo            : "TO";
KwVar           : "VAR";


Oberon2         : "MODULE" Ident ";" [ImportList] DeclSeq [KwBegin StatementSeq] KwEnd Ident "\.";
ImportList      : "IMPORT" [Ident ":="] Ident {"," [Ident ":="] Ident} ";";
DeclSeq         : { "CONST" {ConstDecl ";" } | "TYPE" {TypeDecl ";"} | KwVar {VarDecl ";"}} {ProcDecl ";" | ForwardDecl ";" };
ConstDecl       : IdentDef "=" ConstExpr;
TypeDecl        : IdentDef "=" TypeDef;
VarDecl         : IdentList ":" TypeDef;
ProcDecl        : KwProcedure [Receiver] IdentDef [FormalPars] ";" DeclSeq [KwBegin StatementSeq] KwEnd Ident;
ForwardDecl     : KwProcedure "\^" [Receiver] IdentDef [FormalPars];
FormalPars      : "\(" [FPSection {";" FPSection}] "\)" [":" QualIdent];
FPSection       : [KwVar] Ident {"," Ident} ":" TypeDef;
Receiver        : "\(" [KwVar] Ident ":" Ident "\)";
TypeDef         : QualIdent
                | "ARRAY" [ConstExpr {"," ConstExpr}] KwOf TypeDef
                | "RECORD" ["\("QualIdent"\)"] FieldList {";" FieldList} KwEnd
                | "POINTER" KwTo TypeDef
                | KwProcedure [FormalPars];
FieldList       : [IdentList ":" TypeDef];
StatementSeq    : Statement {";" Statement};
Statement       : [ Designator ":=" Expr 
                | Designator ["\(" [ExprList] "\)"] 
                | KwIf Expr KwThen StatementSeq {KwElsif Expr KwThen StatementSeq} [KwElse StatementSeq] KwEnd 
                | KwCase Expr KwOf Case {"\|" Case} [KwElse StatementSeq] KwEnd 
                | "WHILE" Expr KwDo StatementSeq KwEnd 
                | "REPEAT" StatementSeq "UNTIL" Expr 
                | "FOR" Ident ":=" Expr KwTo Expr ["BY" ConstExpr] KwDo StatementSeq KwEnd 
                | "LOOP" StatementSeq KwEnd
                | "WITH" Guard KwDo StatementSeq {"\|" Guard KwDo StatementSeq} [KwElse StatementSeq] KwEnd
                | "EXIT" 
                | "RETURN" [Expr]
                ];
Case            : [CaseLabels {"," CaseLabels} ":" StatementSeq];
CaseLabels      : ConstExpr ["\.\." ConstExpr];
Guard           : QualIdent ":" QualIdent;
ConstExpr       : Expr;
Expr            : SimpleExpr [Relation SimpleExpr];
SimpleExpr      : ["\+" | "-"] Term {AddOp Term};
Term            : Factor {MulOp Factor};
Factor          : Designator ["\(" [ExprList] "\)"]
                | Number
                | Character
                | String
                | "NIL"
                | Set
                | "\(" Expr "\)"
                | "~" Factor;
Set             : "\{" [Element {"," Element}] "\}";
Element         : Expr ["\.\." Expr];
Relation        : "=" | "#" | "<" | "<=" | ">" | ">=" | InOp | "IS";
AddOp           : "\+" | "-" | "OR";
MulOp           : "\*" | "/" | "DIV" | "MOD" | "&";
Designator      : QualIdent { DesignatorSuffix };
DesignatorSuffix: "\." Ident
                | "\[" ExprList "\]"
                | "\^";
                //| "\(" QualIdent "\)";
ExprList        : Expr {"," Expr};
IdentList       : IdentDef {"," IdentDef};
QualIdent       : Ident
                | QIdent;
IdentDef        : Ident ["\*" | "-"];
Number          : Integer | Real;
Real            : "[0-9][0-9]*\.[0-9]*(ED[+-]?[0-9][0-9]*)?";
Character       : "[0-9][0-9A-F]*X";
Integer         : "[0-9][0-9]*|[0-9][0-9A-F]*H";
QIdent          : "[a-zA-Z_]\w*\.[a-zA-Z_]\w*";
Ident           : "[a-zA-Z_]\w*";
String          : "\u{0022}[^\u{0022}]*\u{0022}|'[^']*'";
InOp            : "IN";
