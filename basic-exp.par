%start Basic
%title "Basic grammar"
%comment "Empty grammar generated by `parol`"
%auto_newline_off

%scanner Cmnt { %auto_newline_off }
%scanner Expr { %auto_newline_off }

%%

/*  0 */ Basic: Line BasicList /* Vec */ BasicSuffix1;
/*  1 */ Basic: EndOfLine Line BasicList /* Vec */ BasicSuffix;
/*  2 */ BasicSuffix1: EndOfLine;
/*  3 */ BasicSuffix1: ;
/*  4 */ BasicSuffix: EndOfLine;
/*  5 */ BasicSuffix: ;
/*  6 */ BasicList: EndOfLine Line BasicList; // Vec<T>::Push
/*  7 */ BasicList: ; // Vec<T>::New
/*  8 */ Line: LineNumber Statement LineList /* Vec */;
/*  9 */ LineList: ":" Statement LineList; // Vec<T>::Push
/* 10 */ LineList: ; // Vec<T>::New
/* 11 */ Statement: Remark;
/* 12 */ Statement: GotoStatement;
/* 13 */ Statement: IfStatement;
/* 14 */ Statement: Assignment;
/* 15 */ Statement: PrintStatement;
/* 16 */ Statement: StopStatement;
/* 17 */ Remark: "REM" %push(Cmnt) RemarkSuffix;
/* 18 */ RemarkSuffix: Comment %pop();
/* 19 */ RemarkSuffix: %pop();
/* 20 */ GotoStatement: "GOTO" LineNumber;
/* 21 */ IfStatement: "IF" %push(Expr) Expression %pop() IfBody;
/* 22 */ Assignment: "LET" Variable AssignOp %push(Expr) Expression %pop();
/* 23 */ Assignment: Variable AssignOp %push(Expr) Expression %pop();
/* 24 */ IfBody: "THEN" Statement;
/* 25 */ IfBody: "GOTO" LineNumber;
/* 26 */ PrintStatement: PrintStatementGroup %push(Expr) Expression %pop();
/* 27 */ PrintStatementGroup: "PRINT";
/* 28 */ PrintStatementGroup: "\?";
/* 29 */ StopStatement: "STOP";
/* 30 */ EndOfLine: <Expr, INITIAL>"(\r?\n|\r)+";
/* 31 */ Literal: Number;
/* 32 */ LineNumber: "([0-9] *){1,5}";
/* 33 */ Number: Float;
/* 34 */ Number: Integer;
/* 35 */ Float: Float1;
/* 36 */ Float: Float2;
/* 37 */ Float1: <Expr>"(([0-9] *)+)?\. *(([0-9] *)+)? *(E *[-+]? *([0-9] *)+)?";
/* 38 */ Float2: <Expr>"([0-9] *)+E *[-+]? *([0-9] *)+";
/* 39 */ Integer: <Expr>"([0-9] *)+";
/* 40 */ AssignOp: "=";
/* 41 */ LogicalOrOp: <Expr>"N?OR";
/* 42 */ LogicalAndOp: <Expr>"AND";
/* 43 */ LogicalNotOp: <Expr>"NOT";
/* 44 */ RelationalOp: <Expr>"<\s*>|<\s*=|<|>\s*=|>|=";
/* 45 */ Plus: <Expr>"\+";
/* 46 */ Minus: <Expr>"-";
/* 47 */ MulOp: <Expr>"\*|/";
/* 48 */ LParen: <Expr>"\(";
/* 49 */ RParen: <Expr>"\)";
/* 50 */ Comment: <Cmnt>"[^\r\n]+";
/* 51 */ Variable: <Expr, INITIAL>"[A-Z][0-9A-Z]*";
/* 52 */ Expression: LogicalOr;
/* 53 */ LogicalOr: LogicalAnd LogicalOrList /* Vec */;
/* 54 */ LogicalOrList: LogicalOrOp LogicalAnd LogicalOrList; // Vec<T>::Push
/* 55 */ LogicalOrList: ; // Vec<T>::New
/* 56 */ LogicalAnd: LogicalNot LogicalAndList /* Vec */;
/* 57 */ LogicalAndList: LogicalAndOp LogicalNot LogicalAndList; // Vec<T>::Push
/* 58 */ LogicalAndList: ; // Vec<T>::New
/* 59 */ LogicalNot: LogicalNotOp Relational;
/* 60 */ LogicalNot: Relational;
/* 61 */ Relational: Summation RelationalList /* Vec */;
/* 62 */ RelationalList: RelationalOp Summation RelationalList; // Vec<T>::Push
/* 63 */ RelationalList: ; // Vec<T>::New
/* 64 */ Summation: Multiplication SummationList /* Vec */;
/* 65 */ SummationList: SummationListGroup Multiplication SummationList; // Vec<T>::Push
/* 66 */ SummationListGroup: Plus;
/* 67 */ SummationListGroup: Minus;
/* 68 */ SummationList: ; // Vec<T>::New
/* 69 */ Multiplication: Factor MultiplicationList /* Vec */;
/* 70 */ MultiplicationList: MulOp Factor MultiplicationList; // Vec<T>::Push
/* 71 */ MultiplicationList: ; // Vec<T>::New
/* 72 */ Factor: Literal;
/* 73 */ Factor: Variable;
/* 74 */ Factor: Minus Factor;
/* 75 */ Factor: LParen Expression RParen;
