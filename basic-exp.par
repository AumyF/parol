%start Basic
%title "Basic grammar"
%comment "Empty grammar generated by `parol`"
%auto_newline_off

%scanner Cmnt { %auto_newline_off }

%%

/*  0 */ Basic: Line BasicList /* Vec */ BasicSuffix1;
/*  1 */ Basic: EndOfLine Line BasicList /* Vec */ BasicSuffix;
/*  2 */ BasicSuffix1: EndOfLine;
/*  3 */ BasicSuffix1: ;
/*  4 */ BasicSuffix: EndOfLine;
/*  5 */ BasicSuffix: ;
/*  6 */ BasicList: EndOfLine Line BasicList; // Vec<T>::Push
/*  7 */ BasicList: ; // Vec<T>::New
/*  8 */ Line: LineNumber Statement LineList /* Vec */;
/*  9 */ LineList: ":" Statement LineList; // Vec<T>::Push
/* 10 */ LineList: ; // Vec<T>::New
/* 11 */ Statement: "REM" %push(Cmnt) StatementSuffix;
/* 12 */ StatementSuffix: Comment %pop();
/* 13 */ StatementSuffix: %pop();
/* 14 */ Statement: "GOTO" LineNumber;
/* 15 */ Statement: Assignment;
/* 16 */ Assignment: Variable AssignOrEqualityOp Expression;
/* 17 */ EndOfLine: "(\r?\n|\r)+";
/* 18 */ Literal: Number;
/* 19 */ LineNumber: Integer;
/* 20 */ Number: Float;
/* 21 */ Number: Integer;
/* 22 */ Integer: "([0-9] *)+";
/* 23 */ Float: Integer FloatSuffix4;
/* 24 */ Float: "\." FloatSuffix3;
/* 25 */ FloatSuffix4: "\." FloatSuffix1;
/* 26 */ FloatSuffix4: Exponent;
/* 27 */ Float: Exponent;
/* 28 */ FloatSuffix3: Integer FloatSuffix2;
/* 29 */ FloatSuffix3: Exponent;
/* 30 */ FloatSuffix3: ;
/* 31 */ FloatSuffix2: Exponent;
/* 32 */ FloatSuffix2: ;
/* 33 */ FloatSuffix1: Integer FloatSuffix;
/* 34 */ FloatSuffix1: Exponent;
/* 35 */ FloatSuffix1: ;
/* 36 */ FloatSuffix: Exponent;
/* 37 */ FloatSuffix: ;
/* 38 */ Exponent: "E *[-+]? *([0-9] *)+";
/* 39 */ Variable: "[A-Z][0-9A-Z]*";
/* 40 */ AssignOrEqualityOp: "=";
/* 41 */ LogicalOrOp: "N?OR";
/* 42 */ LogicalAndOp: "AND";
/* 43 */ LogicalNotOp: "NOT";
/* 44 */ RelationalOp: "<\s*>|<\s*=|<|>\s*=|>";
/* 45 */ Plus: "\+";
/* 46 */ Minus: "-";
/* 47 */ MulOp: "\*|/";
/* 48 */ LParen: "\(";
/* 49 */ RParen: "\)";
/* 50 */ Comment: "[^\r\n]+";
/* 51 */ Expression: LogicalOr;
/* 52 */ LogicalOr: LogicalAnd LogicalOrList /* Vec */;
/* 53 */ LogicalOrList: LogicalOrOp LogicalAnd LogicalOrList; // Vec<T>::Push
/* 54 */ LogicalOrList: ; // Vec<T>::New
/* 55 */ LogicalAnd: LogicalNot LogicalAndList /* Vec */;
/* 56 */ LogicalAndList: LogicalAndOp LogicalNot LogicalAndList; // Vec<T>::Push
/* 57 */ LogicalAndList: ; // Vec<T>::New
/* 58 */ LogicalNot: LogicalNotOp Relational;
/* 59 */ LogicalNot: Relational;
/* 60 */ Relational: Summation RelationalList /* Vec */;
/* 61 */ RelationalList: RelationalListGroup Summation RelationalList; // Vec<T>::Push
/* 62 */ RelationalListGroup: AssignOrEqualityOp;
/* 63 */ RelationalListGroup: RelationalOp;
/* 64 */ RelationalList: ; // Vec<T>::New
/* 65 */ Summation: Multiplication SummationList /* Vec */;
/* 66 */ SummationList: SummationListGroup Multiplication SummationList; // Vec<T>::Push
/* 67 */ SummationListGroup: Plus;
/* 68 */ SummationListGroup: Minus;
/* 69 */ SummationList: ; // Vec<T>::New
/* 70 */ Multiplication: Factor MultiplicationList /* Vec */;
/* 71 */ MultiplicationList: MulOp Factor MultiplicationList; // Vec<T>::Push
/* 72 */ MultiplicationList: ; // Vec<T>::New
/* 73 */ Factor: Literal;
/* 74 */ Factor: Variable;
/* 75 */ Factor: Minus Factor;
/* 76 */ Factor: LParen Expression RParen;
