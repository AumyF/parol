%start Basic
%title "Basic grammar"
%comment "Empty grammar generated by `parol`"
%auto_newline_off

%scanner Cmnt { %auto_newline_off }
%scanner Expr { %auto_newline_off }

%%

/*  0 */ Basic: Line BasicList /* Vec */ BasicSuffix1;
/*  1 */ Basic: EndOfLine Line BasicList /* Vec */ BasicSuffix;
/*  2 */ BasicSuffix1: EndOfLine;
/*  3 */ BasicSuffix1: ;
/*  4 */ BasicSuffix: EndOfLine;
/*  5 */ BasicSuffix: ;
/*  6 */ BasicList: EndOfLine Line BasicList; // Vec<T>::Push
/*  7 */ BasicList: ; // Vec<T>::New
/*  8 */ Line: LineNumber Statement LineList /* Vec */;
/*  9 */ LineList: <Expr, INITIAL>":" Statement LineList; // Vec<T>::Push
/* 10 */ LineList: ; // Vec<T>::New
/* 11 */ LineNumber: "[0 ]*[1-9] *(?:[0-9] *){1,4}|[0 ]+";
/* 12 */ Statement: Remark;
/* 13 */ Statement: GotoStatement;
/* 14 */ Statement: IfStatement;
/* 15 */ Statement: Assignment;
/* 16 */ Statement: PrintStatement;
/* 17 */ Statement: EndStatement;
/* 18 */ Remark: "REM" %push(Cmnt) RemarkSuffix;
/* 19 */ RemarkSuffix: Comment %pop();
/* 20 */ RemarkSuffix: %pop();
/* 21 */ GotoStatement: Goto LineNumber;
/* 22 */ IfStatement: If %push(Expr) Expression %pop() IfBody;
/* 23 */ Assignment: Let Variable AssignOp %push(Expr) Expression %pop();
/* 24 */ Assignment: Variable AssignOp %push(Expr) Expression %pop();
/* 25 */ IfBody: Then Statement;
/* 26 */ IfBody: Goto LineNumber;
/* 27 */ PrintStatement: Print %push(Expr) Expression PrintStatementList /* Vec */ %pop();
/* 28 */ PrintStatementList: <Expr, INITIAL>"," Expression PrintStatementList; // Vec<T>::Push
/* 29 */ PrintStatementList: ; // Vec<T>::New
/* 30 */ EndStatement: End;
/* 31 */ EndOfLine: <Expr, INITIAL>"(?:\r?\n|\r)+";
/* 32 */ Literal: Number;
/* 33 */ Number: Float;
/* 34 */ Number: Integer;
/* 35 */ Float: Float1;
/* 36 */ Float: Float2;
/* 37 */ Float1: <Expr>"(?:(?:[0-9] *)+)?\. *(?:(?:[0-9] *)+)? *(?:E *[-+]? *(?:[0-9] *)+)?";
/* 38 */ Float2: <Expr>"(?:[0-9] *)+E *[-+]? *(?:[0-9] *)+";
/* 39 */ Integer: <Expr>"(?:[0-9] *)+";
/* 40 */ If: "IF";
/* 41 */ Then: <Expr, INITIAL>"THEN";
/* 42 */ Goto: <Expr, INITIAL>"GOTO";
/* 43 */ Let: "LET";
/* 44 */ Print: "PRINT|\?";
/* 45 */ End: "END";
/* 46 */ AssignOp: "=";
/* 47 */ LogicalOrOp: <Expr>"N?OR";
/* 48 */ LogicalAndOp: <Expr>"AND";
/* 49 */ LogicalNotOp: <Expr>"NOT";
/* 50 */ RelationalOp: <Expr>"<\s*>|<\s*=|<|>\s*=|>|=";
/* 51 */ Plus: <Expr>"\+";
/* 52 */ Minus: <Expr>"-";
/* 53 */ MulOp: <Expr>"\*|/";
/* 54 */ LParen: <Expr>"\(";
/* 55 */ RParen: <Expr>"\)";
/* 56 */ Comment: <Cmnt>"[^\r\n]+";
/* 57 */ Variable: <Expr, INITIAL>"[A-Z][0-9A-Z]*";
/* 58 */ Expression: LogicalOr;
/* 59 */ LogicalOr: LogicalAnd LogicalOrList /* Vec */;
/* 60 */ LogicalOrList: LogicalOrOp LogicalAnd LogicalOrList; // Vec<T>::Push
/* 61 */ LogicalOrList: ; // Vec<T>::New
/* 62 */ LogicalAnd: LogicalNot LogicalAndList /* Vec */;
/* 63 */ LogicalAndList: LogicalAndOp LogicalNot LogicalAndList; // Vec<T>::Push
/* 64 */ LogicalAndList: ; // Vec<T>::New
/* 65 */ LogicalNot: LogicalNotOp Relational;
/* 66 */ LogicalNot: Relational;
/* 67 */ Relational: Summation RelationalList /* Vec */;
/* 68 */ RelationalList: RelationalOp Summation RelationalList; // Vec<T>::Push
/* 69 */ RelationalList: ; // Vec<T>::New
/* 70 */ Summation: Multiplication SummationList /* Vec */;
/* 71 */ SummationList: SummationListGroup Multiplication SummationList; // Vec<T>::Push
/* 72 */ SummationListGroup: Plus;
/* 73 */ SummationListGroup: Minus;
/* 74 */ SummationList: ; // Vec<T>::New
/* 75 */ Multiplication: Factor MultiplicationList /* Vec */;
/* 76 */ MultiplicationList: MulOp Factor MultiplicationList; // Vec<T>::Push
/* 77 */ MultiplicationList: ; // Vec<T>::New
/* 78 */ Factor: Literal;
/* 79 */ Factor: Variable;
/* 80 */ Factor: Minus Factor;
/* 81 */ Factor: LParen Expression RParen;
