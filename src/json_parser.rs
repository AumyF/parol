// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use id_tree::Tree;
use parol_runtime::lexer::{TokenStream, Tokenizer};
use parol_runtime::parser::errors::*;
use parol_runtime::parser::{
    DFATransition, LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production, UserActionsTrait,
};
use std::cell::RefCell;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 17] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ NEW_LINE_TOKEN,
    /*  2 */ WHITESPACE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r###"\{"###,
    /*  6 */ r###"\}"###,
    /*  7 */ r###","###,
    /*  8 */ r###":"###,
    /*  9 */ r###"\["###,
    /* 10 */ r###"\]"###,
    /* 11 */ r###"true"###,
    /* 12 */ r###"false"###,
    /* 13 */ r###"null"###,
    /* 14 */
    r###"\u{0022}(\\[\u{0022}\\/bfnrt]|u[0-9a-fA-F]{4}|[^\u{0022}\\\u0000-\u001F])*\u{0022}"###,
    /* 15 */ r###"-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][-+]?(0|[1-9][0-9]*)?)?"###,
    /* 16 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 17] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "LBrace",
    /*  6 */ "RBrace",
    /*  7 */ "Comma",
    /*  8 */ "Colon",
    /*  9 */ "LBracket",
    /* 10 */ "RBracket",
    /* 11 */ "True",
    /* 12 */ "False",
    /* 13 */ "Null",
    /* 14 */ "String",
    /* 15 */ "Number",
    /* 16 */ "Error",
];

const MAX_K: usize = 1;

pub const NON_TERMINALS: &[&str; 15] = &[
    /*  0 */ "Array",
    /*  1 */ "ArrayRest",
    /*  2 */ "ArrayRestSuffix",
    /*  3 */ "ArraySuffix",
    /*  4 */ "ArraySuffix1",
    /*  5 */ "Json",
    /*  6 */ "Number",
    /*  7 */ "Object",
    /*  8 */ "ObjectRest",
    /*  9 */ "ObjectRestSuffix",
    /* 10 */ "ObjectSuffix",
    /* 11 */ "ObjectSuffix1",
    /* 12 */ "Pair",
    /* 13 */ "String",
    /* 14 */ "Value",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 15] = &[
    /* 0 - "Array" */
    LookaheadDFA {
        states: &[Some(10)],
        transitions: &[],
        k: 0,
    },
    /* 1 - "ArrayRest" */
    LookaheadDFA {
        states: &[Some(15)],
        transitions: &[],
        k: 0,
    },
    /* 2 - "ArrayRestSuffix" */
    LookaheadDFA {
        states: &[None, Some(16), Some(17)],
        transitions: &[DFATransition(0, 7, 1), DFATransition(0, 10, 2)],
        k: 1,
    },
    /* 3 - "ArraySuffix" */
    LookaheadDFA {
        states: &[None, Some(13), Some(14)],
        transitions: &[DFATransition(0, 7, 1), DFATransition(0, 10, 2)],
        k: 1,
    },
    /* 4 - "ArraySuffix1" */
    LookaheadDFA {
        states: &[None, Some(11), Some(12)],
        transitions: &[
            DFATransition(0, 5, 1),
            DFATransition(0, 9, 1),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 1),
            DFATransition(0, 12, 1),
            DFATransition(0, 13, 1),
            DFATransition(0, 14, 1),
            DFATransition(0, 15, 1),
        ],
        k: 1,
    },
    /* 5 - "Json" */
    LookaheadDFA {
        states: &[Some(0)],
        transitions: &[],
        k: 0,
    },
    /* 6 - "Number" */
    LookaheadDFA {
        states: &[Some(26)],
        transitions: &[],
        k: 0,
    },
    /* 7 - "Object" */
    LookaheadDFA {
        states: &[Some(1)],
        transitions: &[],
        k: 0,
    },
    /* 8 - "ObjectRest" */
    LookaheadDFA {
        states: &[Some(6)],
        transitions: &[],
        k: 0,
    },
    /* 9 - "ObjectRestSuffix" */
    LookaheadDFA {
        states: &[None, Some(7), Some(8)],
        transitions: &[DFATransition(0, 6, 2), DFATransition(0, 7, 1)],
        k: 1,
    },
    /* 10 - "ObjectSuffix" */
    LookaheadDFA {
        states: &[None, Some(4), Some(5)],
        transitions: &[DFATransition(0, 6, 2), DFATransition(0, 7, 1)],
        k: 1,
    },
    /* 11 - "ObjectSuffix1" */
    LookaheadDFA {
        states: &[None, Some(2), Some(3)],
        transitions: &[DFATransition(0, 6, 2), DFATransition(0, 14, 1)],
        k: 1,
    },
    /* 12 - "Pair" */
    LookaheadDFA {
        states: &[Some(9)],
        transitions: &[],
        k: 0,
    },
    /* 13 - "String" */
    LookaheadDFA {
        states: &[Some(25)],
        transitions: &[],
        k: 0,
    },
    /* 14 - "Value" */
    LookaheadDFA {
        states: &[
            None,
            Some(18),
            Some(19),
            Some(20),
            Some(21),
            Some(22),
            Some(23),
            Some(24),
        ],
        transitions: &[
            DFATransition(0, 5, 3),
            DFATransition(0, 9, 4),
            DFATransition(0, 11, 5),
            DFATransition(0, 12, 6),
            DFATransition(0, 13, 7),
            DFATransition(0, 14, 1),
            DFATransition(0, 15, 2),
        ],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 27] = &[
    // 0 - Json: Value;
    Production {
        lhs: 5,
        production: &[ParseType::N(14)],
    },
    // 1 - Object: "\{" ObjectSuffix1;
    Production {
        lhs: 7,
        production: &[ParseType::N(11), ParseType::T(5)],
    },
    // 2 - ObjectSuffix1: Pair ObjectSuffix;
    Production {
        lhs: 11,
        production: &[ParseType::N(10), ParseType::N(12)],
    },
    // 3 - ObjectSuffix1: "\}";
    Production {
        lhs: 11,
        production: &[ParseType::T(6)],
    },
    // 4 - ObjectSuffix: ObjectRest "\}";
    Production {
        lhs: 10,
        production: &[ParseType::T(6), ParseType::N(8)],
    },
    // 5 - ObjectSuffix: "\}";
    Production {
        lhs: 10,
        production: &[ParseType::T(6)],
    },
    // 6 - ObjectRest: "," Pair ObjectRestSuffix;
    Production {
        lhs: 8,
        production: &[ParseType::N(9), ParseType::N(12), ParseType::T(7)],
    },
    // 7 - ObjectRestSuffix: ObjectRest;
    Production {
        lhs: 9,
        production: &[ParseType::N(8)],
    },
    // 8 - ObjectRestSuffix: ;
    Production {
        lhs: 9,
        production: &[],
    },
    // 9 - Pair: String ":" Value;
    Production {
        lhs: 12,
        production: &[ParseType::N(14), ParseType::T(8), ParseType::N(13)],
    },
    // 10 - Array: "\[" ArraySuffix1;
    Production {
        lhs: 0,
        production: &[ParseType::N(4), ParseType::T(9)],
    },
    // 11 - ArraySuffix1: Value ArraySuffix;
    Production {
        lhs: 4,
        production: &[ParseType::N(3), ParseType::N(14)],
    },
    // 12 - ArraySuffix1: "\]";
    Production {
        lhs: 4,
        production: &[ParseType::T(10)],
    },
    // 13 - ArraySuffix: ArrayRest "\]";
    Production {
        lhs: 3,
        production: &[ParseType::T(10), ParseType::N(1)],
    },
    // 14 - ArraySuffix: "\]";
    Production {
        lhs: 3,
        production: &[ParseType::T(10)],
    },
    // 15 - ArrayRest: "," Value ArrayRestSuffix;
    Production {
        lhs: 1,
        production: &[ParseType::N(2), ParseType::N(14), ParseType::T(7)],
    },
    // 16 - ArrayRestSuffix: ArrayRest;
    Production {
        lhs: 2,
        production: &[ParseType::N(1)],
    },
    // 17 - ArrayRestSuffix: ;
    Production {
        lhs: 2,
        production: &[],
    },
    // 18 - Value: String;
    Production {
        lhs: 14,
        production: &[ParseType::N(13)],
    },
    // 19 - Value: Number;
    Production {
        lhs: 14,
        production: &[ParseType::N(6)],
    },
    // 20 - Value: Object;
    Production {
        lhs: 14,
        production: &[ParseType::N(7)],
    },
    // 21 - Value: Array;
    Production {
        lhs: 14,
        production: &[ParseType::N(0)],
    },
    // 22 - Value: "true";
    Production {
        lhs: 14,
        production: &[ParseType::T(11)],
    },
    // 23 - Value: "false";
    Production {
        lhs: 14,
        production: &[ParseType::T(12)],
    },
    // 24 - Value: "null";
    Production {
        lhs: 14,
        production: &[ParseType::T(13)],
    },
    // 25 - String: "\u{0022}(\\[\u{0022}\\/bfnrt]|u[0-9a-fA-F]{4}|[^\u{0022}\\\u0000-\u001F])*\u{0022}";
    Production {
        lhs: 13,
        production: &[ParseType::T(14)],
    },
    // 26 - Number: "-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][-+]?(0|[1-9][0-9]*)?)?";
    Production {
        lhs: 6,
        production: &[ParseType::T(15)],
    },
];

lazy_static! {
    static ref TOKENIZER: Tokenizer = Tokenizer::build(TERMINALS).unwrap();
}

pub fn parse(
    input: &str,
    file_name: String,
    user_actions: &mut dyn UserActionsTrait,
) -> Result<Tree<ParseTreeType>> {
    let mut llk_parser = LLKParser::new(
        5,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream = RefCell::new(TokenStream::new(input, file_name, &TOKENIZER, MAX_K).unwrap());
    let result = llk_parser.parse(&token_stream, user_actions);
    match result {
        Ok(()) => Ok(llk_parser.parse_tree),
        Err(e) => Err(e),
    }
}
