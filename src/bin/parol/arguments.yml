name: parol
author: JÃ¶rg Singer <singer.joerg@gmx.de>
about: A LL(k) Parser Generator written in Rust.
args:
    - grammar:
        help: Input grammar file
        short: f
        long: file
        takes_value: true
    - lookahead:
        help: Lookahead limit for Lookahead DFA calculation
        short: k
        long: lookahead
        takes_value: true
    - only_lookahead:
        help: Don't generate sources but only calculate maximum lookahead size for given grammar
        short: c
        long: only_lookahead
        takes_value: false
    - parser:
        help: Output file for the generated parser source
        short: p
        long: parser
        takes_value: true
    - expanded:
        help: Output file for the expanded grammar. Use -e-- to output to stdout
        short: e
        long: expanded
        takes_value: true
    - write_internal:
        help: Writes the internal parsed grammar (ParolGrammar)
        short: i
        long: write_internal
        takes_value: true
    - write_untransformed:
        help: Writes the untransformed parsed grammar
        short: u
        long: write_untransformed
        takes_value: true
    - write_transformed:
        help: Writes the transformed parsed grammar
        short: w
        long: write_transformed
        takes_value: true
    - actions:
        help: Output file for the generated trait with semantic actions
        short: a
        long: actions
        takes_value: true
    - user_type:
        help: User type that implements the language processing
        short: t
        long: user_type
        takes_value: true
    - module:
        help: User type's module name
        short: m
        long: module
        takes_value: true
    - generate_tree_graph:
        help: Activates the generation of a SVG file with the parse tree of the given grammar
        short: s
        long: svg
    - verbose:
        help: Increased verbosity
        short: v
        long: verbose

...
