%start Parol
%title "Parol grammar"
%comment "Parol's own grammar"
%line_comment "//"
%block_comment "/\*" "\*/"
%user_type UserType = crate::parser::parol_grammar::UserDefinedTypeName
%user_type ScannerConfig = crate::parser::parol_grammar::ScannerConfig

%%

Parol
    : Prolog GrammarDefinition
    ;

Prolog
    : StartDeclaration { Declaration } { ScannerState : ScannerConfig }
    ;

StartDeclaration
    : '%start'^ Identifier
    ;

Declaration
    : '%title'^ String
    | '%comment'^ String
    | '%user_type'^ Identifier '='^ UserTypeName : UserType
    | ScannerDirectives
    ;

ScannerDirectives
    : '%line_comment'^ String
    | '%block_comment'^ String String
    | '%auto_newline_off'^
    | '%auto_ws_off'^
    ;

GrammarDefinition
    : '%%'^ Production { Production }
    ;

DoubleColon
    : '::'
    ;

Production
    : Identifier ':'^ Alternations ';'^
    ;

Alternations
    : Alternation { '|'^ Alternation }
    ;

Alternation
    : { Factor }
    ;

Factor
    : Group
    | Repeat
    | Optional
    | Symbol
    ;

Symbol
    : NonTerminal
    | SimpleToken
    | TokenWithStates
    | ScannerSwitch
    ;

TokenLiteral
    : String
    | RawString
    | Regex
    ;

SimpleToken
    : TokenLiteral [ASTControl]
    ;

TokenWithStates
    :  '<'^ StateList '>'^ TokenLiteral [ASTControl]
    ;

Group
    : '('^ Alternations ')'^
    ;

Regex
    : /\u{2F}(\\.|[^\\]|)*?\u{2F}/   // \u{2F} is /
    ;

Optional
    : '['^ Alternations ']'^
    ;

Repeat
    : '{'^ Alternations '}'^
    ;

NonTerminal
    : Identifier [ASTControl]
    ;

Identifier
    : /[a-zA-Z_][a-zA-Z0-9_]*/
    ;

String
    : /"(\\.|[^\\])*?"/
    ;

RawString
    : /'(\\'|[^'])*?'/
    ;

ScannerState
    : '%scanner'^ Identifier '{'^ { ScannerDirectives } '}'^
    ;

StateList
    : Identifier { ','^ Identifier }
    ;

ScannerSwitch
    : '%sc'^ '('^ [Identifier] ')'^
    | '%push'^ '('^ Identifier ')'^
    | '%pop'^ '('^ ')'^
    ;

ASTControl
    : CutOperator | UserTypeDeclaration
    ;

CutOperator
    : '^'^
    ;

UserTypeDeclaration
    : ':'^ UserTypeName : UserType
    ;

UserTypeName
    : Identifier { DoubleColon^ Identifier }
    ;
