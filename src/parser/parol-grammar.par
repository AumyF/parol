%start Parol
%title "Parol grammar"
%comment "Parol's own grammar"
%line_comment "//"
%block_comment "/\*" "\*/"
%user_type UserType = crate::parser::parol_grammar::UserDefinedTypeName

%%

Parol
    : Prolog GrammarDefinition
    ;

Prolog
    : StartDeclaration { Declaration } { ScannerState };

StartDeclaration
    : "%start"^ Identifier
    ;

Declaration
    : "%title"^ String
    | "%comment"^ String
    | "%user_type"^ Identifier "="^ UserTypeName : UserType
    | ScannerDirectives
    ;

ScannerDirectives
    : "%line_comment"^ String
    | "%block_comment"^ String String
    | "%auto_newline_off"^
    | "%auto_ws_off"^
    ;

GrammarDefinition
    : "%%"^ Production { Production }
    ;

DoubleColon
    : "::"
    ;

Production
    : Identifier ":"^ Alternations ";"^
    ;

Alternations
    : Alternation { "\|"^ Alternation }
    ;

Alternation
    : { Factor }
    ;

Factor
    : Group
    | Repeat
    | Optional
    | Symbol
    ;

Symbol
    : NonTerminal
    | SimpleToken
    | TokenWithStates
    | ScannerSwitch
    ;

SimpleToken
    : String [ASTControl]
    ;

TokenWithStates
    :  "<"^ StateList ">"^ String [ASTControl]
    ;

Group
    : "\("^ Alternations "\)"^
    ;

Optional
    : "\["^ Alternations "\]"^
    ;

Repeat
    : "\{"^ Alternations "\}"^
    ;

NonTerminal
    : Identifier [ASTControl]
    ;

Identifier
    : "[a-zA-Z_][a-zA-Z0-9_]*"
    ;

String
    : "\u{0022}([^\\]|\\.)*?\u{0022}"
    ;

ScannerState
    : "%scanner"^ Identifier "\{"^ { ScannerDirectives } "\}"^
    ;

StateList
    : Identifier { ","^ Identifier }
    ;

ScannerSwitch
    : "%sc"^ "\("^ [Identifier] "\)"^
    | "%push"^ "\("^ Identifier "\)"^
    | "%pop"^ "\("^ "\)"^
    ;

ASTControl
    : CutOperator | UserTypeDeclaration
    ;

CutOperator
    : "\^"^
    ;

UserTypeDeclaration
    : ":"^ UserTypeName : UserType

    ;

UserTypeName
    : Identifier { DoubleColon^ Identifier }
    ;
