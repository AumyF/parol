// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use id_tree::Tree;
use parol_runtime::lexer::{TokenStream, Tokenizer};
use parol_runtime::parser::errors::*;
use parol_runtime::parser::{
    DFATransition, LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production, UserActionsTrait,
};
use std::cell::RefCell;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 23] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ NEW_LINE_TOKEN,
    /*  2 */ WHITESPACE_TOKEN,
    /*  3 */ r###"//.*"###,
    /*  4 */ r###"(?ms)/\*.*?\*/"###,
    /*  5 */ r###"%start"###,
    /*  6 */ r###"%title"###,
    /*  7 */ r###"%comment"###,
    /*  8 */ r###"%line_comment"###,
    /*  9 */ r###"%block_comment"###,
    /* 10 */ r###"%%"###,
    /* 11 */ r###":"###,
    /* 12 */ r###";"###,
    /* 13 */ r###"\|"###,
    /* 14 */ r###"\("###,
    /* 15 */ r###"\)"###,
    /* 16 */ r###"\["###,
    /* 17 */ r###"\]"###,
    /* 18 */ r###"\{"###,
    /* 19 */ r###"\}"###,
    /* 20 */ r###"[a-zA-Z_]\w*"###,
    /* 21 */ r###"\u{0022}([^\\]|\\.)*?\u{0022}"###,
    /* 22 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 23] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "PercentStart",
    /*  6 */ "PercentTitle",
    /*  7 */ "PercentComment",
    /*  8 */ "PercentLineUnderscoreComment",
    /*  9 */ "PercentBlockUnderscoreComment",
    /* 10 */ "PercentPercent",
    /* 11 */ "Colon",
    /* 12 */ "Semicolon",
    /* 13 */ "Or",
    /* 14 */ "LParen",
    /* 15 */ "RParen",
    /* 16 */ "LBracket",
    /* 17 */ "RBracket",
    /* 18 */ "LBrace",
    /* 19 */ "RBrace",
    /* 20 */ "Identifier",
    /* 21 */ "String",
    /* 22 */ "Error",
];

const MAX_K: usize = 1;

pub const NON_TERMINALS: &[&str; 26] = &[
    /*  0 */ "Alternation",
    /*  1 */ "AlternationRest",
    /*  2 */ "AlternationRestSuffix",
    /*  3 */ "Alternations",
    /*  4 */ "AlternationsRest",
    /*  5 */ "AlternationsRestSuffix",
    /*  6 */ "AlternationsSuffix",
    /*  7 */ "Declaration",
    /*  8 */ "Factor",
    /*  9 */ "Grammar",
    /* 10 */ "GrammarDefinition",
    /* 11 */ "GrammarDefinitionRest",
    /* 12 */ "GrammarDefinitionRestSuffix",
    /* 13 */ "GrammarDefinitionSuffix",
    /* 14 */ "Group",
    /* 15 */ "Identifier",
    /* 16 */ "Optional",
    /* 17 */ "Production",
    /* 18 */ "Prolog",
    /* 19 */ "PrologRest",
    /* 20 */ "PrologRestSuffix",
    /* 21 */ "PrologSuffix",
    /* 22 */ "Repeat",
    /* 23 */ "StartDeclaration",
    /* 24 */ "String",
    /* 25 */ "Symbol",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 26] = &[
    /* 0 - "Alternation" */
    LookaheadDFA {
        states: &[None, Some(25), Some(26)],
        transitions: &[
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 1),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 1),
            DFATransition(0, 17, 2),
            DFATransition(0, 18, 1),
            DFATransition(0, 19, 2),
            DFATransition(0, 20, 1),
            DFATransition(0, 21, 1),
        ],
        k: 1,
    },
    /* 1 - "AlternationRest" */
    LookaheadDFA {
        states: &[Some(27)],
        transitions: &[],
        k: 0,
    },
    /* 2 - "AlternationRestSuffix" */
    LookaheadDFA {
        states: &[None, Some(28), Some(29)],
        transitions: &[
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 1),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 1),
            DFATransition(0, 17, 2),
            DFATransition(0, 18, 1),
            DFATransition(0, 19, 2),
            DFATransition(0, 20, 1),
            DFATransition(0, 21, 1),
        ],
        k: 1,
    },
    /* 3 - "Alternations" */
    LookaheadDFA {
        states: &[Some(19)],
        transitions: &[],
        k: 0,
    },
    /* 4 - "AlternationsRest" */
    LookaheadDFA {
        states: &[Some(22)],
        transitions: &[],
        k: 0,
    },
    /* 5 - "AlternationsRestSuffix" */
    LookaheadDFA {
        states: &[None, Some(23), Some(24)],
        transitions: &[
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 1),
            DFATransition(0, 15, 2),
            DFATransition(0, 17, 2),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 6 - "AlternationsSuffix" */
    LookaheadDFA {
        states: &[None, Some(20), Some(21)],
        transitions: &[
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 1),
            DFATransition(0, 15, 2),
            DFATransition(0, 17, 2),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 7 - "Declaration" */
    LookaheadDFA {
        states: &[None, Some(8), Some(9), Some(10), Some(11)],
        transitions: &[
            DFATransition(0, 6, 1),
            DFATransition(0, 7, 2),
            DFATransition(0, 8, 3),
            DFATransition(0, 9, 4),
        ],
        k: 1,
    },
    /* 8 - "Factor" */
    LookaheadDFA {
        states: &[None, Some(30), Some(31), Some(32), Some(33)],
        transitions: &[
            DFATransition(0, 14, 1),
            DFATransition(0, 16, 3),
            DFATransition(0, 18, 2),
            DFATransition(0, 20, 4),
            DFATransition(0, 21, 4),
        ],
        k: 1,
    },
    /* 9 - "Grammar" */
    LookaheadDFA {
        states: &[Some(0)],
        transitions: &[],
        k: 0,
    },
    /* 10 - "GrammarDefinition" */
    LookaheadDFA {
        states: &[Some(12)],
        transitions: &[],
        k: 0,
    },
    /* 11 - "GrammarDefinitionRest" */
    LookaheadDFA {
        states: &[Some(15)],
        transitions: &[],
        k: 0,
    },
    /* 12 - "GrammarDefinitionRestSuffix" */
    LookaheadDFA {
        states: &[None, Some(16), Some(17)],
        transitions: &[DFATransition(0, 0, 2), DFATransition(0, 20, 1)],
        k: 1,
    },
    /* 13 - "GrammarDefinitionSuffix" */
    LookaheadDFA {
        states: &[None, Some(13), Some(14)],
        transitions: &[DFATransition(0, 0, 2), DFATransition(0, 20, 1)],
        k: 1,
    },
    /* 14 - "Group" */
    LookaheadDFA {
        states: &[Some(36)],
        transitions: &[],
        k: 0,
    },
    /* 15 - "Identifier" */
    LookaheadDFA {
        states: &[Some(39)],
        transitions: &[],
        k: 0,
    },
    /* 16 - "Optional" */
    LookaheadDFA {
        states: &[Some(37)],
        transitions: &[],
        k: 0,
    },
    /* 17 - "Production" */
    LookaheadDFA {
        states: &[Some(18)],
        transitions: &[],
        k: 0,
    },
    /* 18 - "Prolog" */
    LookaheadDFA {
        states: &[Some(1)],
        transitions: &[],
        k: 0,
    },
    /* 19 - "PrologRest" */
    LookaheadDFA {
        states: &[Some(4)],
        transitions: &[],
        k: 0,
    },
    /* 20 - "PrologRestSuffix" */
    LookaheadDFA {
        states: &[None, Some(5), Some(6)],
        transitions: &[
            DFATransition(0, 6, 1),
            DFATransition(0, 7, 1),
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 1),
            DFATransition(0, 10, 2),
        ],
        k: 1,
    },
    /* 21 - "PrologSuffix" */
    LookaheadDFA {
        states: &[None, Some(2), Some(3)],
        transitions: &[
            DFATransition(0, 6, 1),
            DFATransition(0, 7, 1),
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 1),
            DFATransition(0, 10, 2),
        ],
        k: 1,
    },
    /* 22 - "Repeat" */
    LookaheadDFA {
        states: &[Some(38)],
        transitions: &[],
        k: 0,
    },
    /* 23 - "StartDeclaration" */
    LookaheadDFA {
        states: &[Some(7)],
        transitions: &[],
        k: 0,
    },
    /* 24 - "String" */
    LookaheadDFA {
        states: &[Some(40)],
        transitions: &[],
        k: 0,
    },
    /* 25 - "Symbol" */
    LookaheadDFA {
        states: &[None, Some(34), Some(35)],
        transitions: &[DFATransition(0, 20, 1), DFATransition(0, 21, 2)],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 41] = &[
    // 0 - Grammar: Prolog GrammarDefinition;
    Production {
        lhs: 9,
        production: &[ParseType::N(10), ParseType::N(18)],
    },
    // 1 - Prolog: StartDeclaration PrologSuffix;
    Production {
        lhs: 18,
        production: &[ParseType::N(21), ParseType::N(23)],
    },
    // 2 - PrologSuffix: PrologRest;
    Production {
        lhs: 21,
        production: &[ParseType::N(19)],
    },
    // 3 - PrologSuffix: ;
    Production {
        lhs: 21,
        production: &[],
    },
    // 4 - PrologRest: Declaration PrologRestSuffix;
    Production {
        lhs: 19,
        production: &[ParseType::N(20), ParseType::N(7)],
    },
    // 5 - PrologRestSuffix: PrologRest;
    Production {
        lhs: 20,
        production: &[ParseType::N(19)],
    },
    // 6 - PrologRestSuffix: ;
    Production {
        lhs: 20,
        production: &[],
    },
    // 7 - StartDeclaration: "%start" Identifier;
    Production {
        lhs: 23,
        production: &[ParseType::N(15), ParseType::T(5)],
    },
    // 8 - Declaration: "%title" String;
    Production {
        lhs: 7,
        production: &[ParseType::N(24), ParseType::T(6)],
    },
    // 9 - Declaration: "%comment" String;
    Production {
        lhs: 7,
        production: &[ParseType::N(24), ParseType::T(7)],
    },
    // 10 - Declaration: "%line_comment" String;
    Production {
        lhs: 7,
        production: &[ParseType::N(24), ParseType::T(8)],
    },
    // 11 - Declaration: "%block_comment" String String;
    Production {
        lhs: 7,
        production: &[ParseType::N(24), ParseType::N(24), ParseType::T(9)],
    },
    // 12 - GrammarDefinition: "%%" Production GrammarDefinitionSuffix;
    Production {
        lhs: 10,
        production: &[ParseType::N(13), ParseType::N(17), ParseType::T(10)],
    },
    // 13 - GrammarDefinitionSuffix: GrammarDefinitionRest;
    Production {
        lhs: 13,
        production: &[ParseType::N(11)],
    },
    // 14 - GrammarDefinitionSuffix: ;
    Production {
        lhs: 13,
        production: &[],
    },
    // 15 - GrammarDefinitionRest: Production GrammarDefinitionRestSuffix;
    Production {
        lhs: 11,
        production: &[ParseType::N(12), ParseType::N(17)],
    },
    // 16 - GrammarDefinitionRestSuffix: GrammarDefinitionRest;
    Production {
        lhs: 12,
        production: &[ParseType::N(11)],
    },
    // 17 - GrammarDefinitionRestSuffix: ;
    Production {
        lhs: 12,
        production: &[],
    },
    // 18 - Production: Identifier ":" Alternations ";";
    Production {
        lhs: 17,
        production: &[
            ParseType::T(12),
            ParseType::N(3),
            ParseType::T(11),
            ParseType::N(15),
        ],
    },
    // 19 - Alternations: Alternation AlternationsSuffix;
    Production {
        lhs: 3,
        production: &[ParseType::N(6), ParseType::N(0)],
    },
    // 20 - AlternationsSuffix: AlternationsRest;
    Production {
        lhs: 6,
        production: &[ParseType::N(4)],
    },
    // 21 - AlternationsSuffix: ;
    Production {
        lhs: 6,
        production: &[],
    },
    // 22 - AlternationsRest: "\|" Alternation AlternationsRestSuffix;
    Production {
        lhs: 4,
        production: &[ParseType::N(5), ParseType::N(0), ParseType::T(13)],
    },
    // 23 - AlternationsRestSuffix: AlternationsRest;
    Production {
        lhs: 5,
        production: &[ParseType::N(4)],
    },
    // 24 - AlternationsRestSuffix: ;
    Production {
        lhs: 5,
        production: &[],
    },
    // 25 - Alternation: AlternationRest;
    Production {
        lhs: 0,
        production: &[ParseType::N(1)],
    },
    // 26 - Alternation: ;
    Production {
        lhs: 0,
        production: &[],
    },
    // 27 - AlternationRest: Factor AlternationRestSuffix;
    Production {
        lhs: 1,
        production: &[ParseType::N(2), ParseType::N(8)],
    },
    // 28 - AlternationRestSuffix: AlternationRest;
    Production {
        lhs: 2,
        production: &[ParseType::N(1)],
    },
    // 29 - AlternationRestSuffix: ;
    Production {
        lhs: 2,
        production: &[],
    },
    // 30 - Factor: Group;
    Production {
        lhs: 8,
        production: &[ParseType::N(14)],
    },
    // 31 - Factor: Repeat;
    Production {
        lhs: 8,
        production: &[ParseType::N(22)],
    },
    // 32 - Factor: Optional;
    Production {
        lhs: 8,
        production: &[ParseType::N(16)],
    },
    // 33 - Factor: Symbol;
    Production {
        lhs: 8,
        production: &[ParseType::N(25)],
    },
    // 34 - Symbol: Identifier;
    Production {
        lhs: 25,
        production: &[ParseType::N(15)],
    },
    // 35 - Symbol: String;
    Production {
        lhs: 25,
        production: &[ParseType::N(24)],
    },
    // 36 - Group: "\(" Alternations "\)";
    Production {
        lhs: 14,
        production: &[ParseType::T(15), ParseType::N(3), ParseType::T(14)],
    },
    // 37 - Optional: "\[" Alternations "\]";
    Production {
        lhs: 16,
        production: &[ParseType::T(17), ParseType::N(3), ParseType::T(16)],
    },
    // 38 - Repeat: "\{" Alternations "\}";
    Production {
        lhs: 22,
        production: &[ParseType::T(19), ParseType::N(3), ParseType::T(18)],
    },
    // 39 - Identifier: "[a-zA-Z_]\w*";
    Production {
        lhs: 15,
        production: &[ParseType::T(20)],
    },
    // 40 - String: "\u{0022}([^\\]|\\.)*?\u{0022}";
    Production {
        lhs: 24,
        production: &[ParseType::T(21)],
    },
];

lazy_static! {
    static ref TOKENIZER: Tokenizer = Tokenizer::build(TERMINALS).unwrap();
}

pub fn parse(
    input: &str,
    file_name: String,
    user_actions: &mut dyn UserActionsTrait,
) -> Result<Tree<ParseTreeType>> {
    let mut llk_parser = LLKParser::new(
        9,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream = RefCell::new(TokenStream::new(input, file_name, &TOKENIZER, MAX_K).unwrap());
    let result = llk_parser.parse(&token_stream, user_actions);
    match result {
        Ok(()) => Ok(llk_parser.parse_tree),
        Err(e) => Err(e),
    }
}
