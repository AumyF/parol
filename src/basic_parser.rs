// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use id_tree::Tree;
use miette::Result;
use parol_runtime::lexer::{TokenStream, Tokenizer};
#[allow(unused_imports)]
use parol_runtime::parser::{
    DFATransition, LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production,
};
use std::cell::RefCell;
use std::path::Path;

use crate::basic_grammar::BasicGrammar;
use crate::basic_grammar_trait::BasicGrammarAuto;

use parol_runtime::lexer::tokenizer::{ERROR_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN};

pub const TERMINALS: &[&str; 32] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r###":"###,
    /*  6 */ r###"[0 ]*[1-9] *(?:[0-9] *){1,4}|[0 ]+"###,
    /*  7 */ r###"REM"###,
    /*  8 */ r###","###,
    /*  9 */ r###"(?:\r?\n|\r)+"###,
    /* 10 */ r###"(?:(?:[0-9] *)+)?\. *(?:(?:[0-9] *)+)? *(?:E *[-+]? *(?:[0-9] *)+)?"###,
    /* 11 */ r###"(?:[0-9] *)+E *[-+]? *(?:[0-9] *)+"###,
    /* 12 */ r###"(?:[0-9] *)+"###,
    /* 13 */ r###"IF"###,
    /* 14 */ r###"THEN"###,
    /* 15 */ r###"GOTO"###,
    /* 16 */ r###"LET"###,
    /* 17 */ r###"PRINT|\?"###,
    /* 18 */ r###"END"###,
    /* 19 */ r###"="###,
    /* 20 */ r###"N?OR"###,
    /* 21 */ r###"AND"###,
    /* 22 */ r###"NOT"###,
    /* 23 */ r###"<\s*>|<\s*=|<|>\s*=|>|="###,
    /* 24 */ r###"\+"###,
    /* 25 */ r###"-"###,
    /* 26 */ r###"\*|/"###,
    /* 27 */ r###"\("###,
    /* 28 */ r###"\)"###,
    /* 29 */ r###"[^\r\n]+"###,
    /* 30 */ r###"[A-Z][0-9A-Z]*"###,
    /* 31 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 32] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Colon",
    /*  6 */ "LineNumber",
    /*  7 */ "REM",
    /*  8 */ "Comma",
    /*  9 */ "EndOfLine",
    /* 10 */ "Float1",
    /* 11 */ "Float2",
    /* 12 */ "Integer",
    /* 13 */ "If",
    /* 14 */ "Then",
    /* 15 */ "Goto",
    /* 16 */ "Let",
    /* 17 */ "Print",
    /* 18 */ "End",
    /* 19 */ "AssignOp",
    /* 20 */ "LogicalOrOp",
    /* 21 */ "LogicalAndOp",
    /* 22 */ "LogicalNotOp",
    /* 23 */ "RelationalOp",
    /* 24 */ "Plus",
    /* 25 */ "Minus",
    /* 26 */ "MulOp",
    /* 27 */ "LParen",
    /* 28 */ "RParen",
    /* 29 */ "Comment",
    /* 30 */ "Variable",
    /* 31 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[usize; 13]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        5,  /* Colon */
        6,  /* LineNumber */
        7,  /* REM */
        8,  /* Comma */
        9,  /* EndOfLine */
        13, /* If */
        14, /* Then */
        15, /* Goto */
        16, /* Let */
        17, /* Print */
        18, /* End */
        19, /* AssignOp */
        30, /* Variable */
    ],
);

/* SCANNER_1: "Cmnt" */
const SCANNER_1: (&[&str; 5], &[usize; 1]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[29 /* Comment */],
);

/* SCANNER_2: "Expr" */
const SCANNER_2: (&[&str; 5], &[usize; 18]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ UNMATCHABLE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ UNMATCHABLE_TOKEN,
        /*  4 */ UNMATCHABLE_TOKEN,
    ],
    &[
        5,  /* Colon */
        8,  /* Comma */
        9,  /* EndOfLine */
        10, /* Float1 */
        11, /* Float2 */
        12, /* Integer */
        14, /* Then */
        15, /* Goto */
        20, /* LogicalOrOp */
        21, /* LogicalAndOp */
        22, /* LogicalNotOp */
        23, /* RelationalOp */
        24, /* Plus */
        25, /* Minus */
        26, /* MulOp */
        27, /* LParen */
        28, /* RParen */
        30, /* Variable */
    ],
);

const MAX_K: usize = 2;

pub const NON_TERMINALS: &[&str; 56] = &[
    /*  0 */ "AssignOp",
    /*  1 */ "Assignment",
    /*  2 */ "Basic",
    /*  3 */ "BasicList",
    /*  4 */ "BasicSuffix",
    /*  5 */ "BasicSuffix0",
    /*  6 */ "Comment",
    /*  7 */ "End",
    /*  8 */ "EndOfLine",
    /*  9 */ "EndStatement",
    /* 10 */ "Expression",
    /* 11 */ "Factor",
    /* 12 */ "Float",
    /* 13 */ "Float1",
    /* 14 */ "Float2",
    /* 15 */ "Goto",
    /* 16 */ "GotoStatement",
    /* 17 */ "If",
    /* 18 */ "IfBody",
    /* 19 */ "IfStatement",
    /* 20 */ "Integer",
    /* 21 */ "LParen",
    /* 22 */ "Let",
    /* 23 */ "Line",
    /* 24 */ "LineList",
    /* 25 */ "LineNumber",
    /* 26 */ "Literal",
    /* 27 */ "LogicalAnd",
    /* 28 */ "LogicalAndList",
    /* 29 */ "LogicalAndOp",
    /* 30 */ "LogicalNot",
    /* 31 */ "LogicalNotOp",
    /* 32 */ "LogicalOr",
    /* 33 */ "LogicalOrList",
    /* 34 */ "LogicalOrOp",
    /* 35 */ "Minus",
    /* 36 */ "MulOp",
    /* 37 */ "Multiplication",
    /* 38 */ "MultiplicationList",
    /* 39 */ "Number",
    /* 40 */ "Plus",
    /* 41 */ "Print",
    /* 42 */ "PrintStatement",
    /* 43 */ "PrintStatementList",
    /* 44 */ "RParen",
    /* 45 */ "Relational",
    /* 46 */ "RelationalList",
    /* 47 */ "RelationalOp",
    /* 48 */ "Remark",
    /* 49 */ "RemarkSuffix",
    /* 50 */ "Statement",
    /* 51 */ "Summation",
    /* 52 */ "SummationList",
    /* 53 */ "SummationListGroup",
    /* 54 */ "Then",
    /* 55 */ "Variable",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 56] = &[
    /* 0 - "AssignOp" */
    LookaheadDFA {
        states: &[Some(46)],
        transitions: &[],
        k: 0,
    },
    /* 1 - "Assignment" */
    LookaheadDFA {
        states: &[None, Some(23), Some(24)],
        transitions: &[DFATransition(0, 16, 1), DFATransition(0, 30, 2)],
        k: 1,
    },
    /* 2 - "Basic" */
    LookaheadDFA {
        states: &[None, Some(0), Some(1)],
        transitions: &[DFATransition(0, 6, 1), DFATransition(0, 9, 2)],
        k: 1,
    },
    /* 3 - "BasicList" */
    LookaheadDFA {
        states: &[None, None, Some(6), Some(7)],
        transitions: &[
            DFATransition(0, 0, 3),
            DFATransition(0, 9, 1),
            DFATransition(1, 0, 3),
            DFATransition(1, 6, 2),
        ],
        k: 2,
    },
    /* 4 - "BasicSuffix" */
    LookaheadDFA {
        states: &[None, Some(4), Some(5)],
        transitions: &[DFATransition(0, 0, 2), DFATransition(0, 9, 1)],
        k: 1,
    },
    /* 5 - "BasicSuffix0" */
    LookaheadDFA {
        states: &[None, Some(2), Some(3)],
        transitions: &[DFATransition(0, 0, 2), DFATransition(0, 9, 1)],
        k: 1,
    },
    /* 6 - "Comment" */
    LookaheadDFA {
        states: &[Some(56)],
        transitions: &[],
        k: 0,
    },
    /* 7 - "End" */
    LookaheadDFA {
        states: &[Some(45)],
        transitions: &[],
        k: 0,
    },
    /* 8 - "EndOfLine" */
    LookaheadDFA {
        states: &[Some(31)],
        transitions: &[],
        k: 0,
    },
    /* 9 - "EndStatement" */
    LookaheadDFA {
        states: &[Some(30)],
        transitions: &[],
        k: 0,
    },
    /* 10 - "Expression" */
    LookaheadDFA {
        states: &[Some(58)],
        transitions: &[],
        k: 0,
    },
    /* 11 - "Factor" */
    LookaheadDFA {
        states: &[None, Some(78), Some(79), Some(80), Some(81)],
        transitions: &[
            DFATransition(0, 10, 1),
            DFATransition(0, 11, 1),
            DFATransition(0, 12, 1),
            DFATransition(0, 25, 3),
            DFATransition(0, 27, 4),
            DFATransition(0, 30, 2),
        ],
        k: 1,
    },
    /* 12 - "Float" */
    LookaheadDFA {
        states: &[None, Some(35), Some(36)],
        transitions: &[DFATransition(0, 10, 1), DFATransition(0, 11, 2)],
        k: 1,
    },
    /* 13 - "Float1" */
    LookaheadDFA {
        states: &[Some(37)],
        transitions: &[],
        k: 0,
    },
    /* 14 - "Float2" */
    LookaheadDFA {
        states: &[Some(38)],
        transitions: &[],
        k: 0,
    },
    /* 15 - "Goto" */
    LookaheadDFA {
        states: &[Some(42)],
        transitions: &[],
        k: 0,
    },
    /* 16 - "GotoStatement" */
    LookaheadDFA {
        states: &[Some(21)],
        transitions: &[],
        k: 0,
    },
    /* 17 - "If" */
    LookaheadDFA {
        states: &[Some(40)],
        transitions: &[],
        k: 0,
    },
    /* 18 - "IfBody" */
    LookaheadDFA {
        states: &[None, Some(25), Some(26)],
        transitions: &[DFATransition(0, 14, 1), DFATransition(0, 15, 2)],
        k: 1,
    },
    /* 19 - "IfStatement" */
    LookaheadDFA {
        states: &[Some(22)],
        transitions: &[],
        k: 0,
    },
    /* 20 - "Integer" */
    LookaheadDFA {
        states: &[Some(39)],
        transitions: &[],
        k: 0,
    },
    /* 21 - "LParen" */
    LookaheadDFA {
        states: &[Some(54)],
        transitions: &[],
        k: 0,
    },
    /* 22 - "Let" */
    LookaheadDFA {
        states: &[Some(43)],
        transitions: &[],
        k: 0,
    },
    /* 23 - "Line" */
    LookaheadDFA {
        states: &[Some(8)],
        transitions: &[],
        k: 0,
    },
    /* 24 - "LineList" */
    LookaheadDFA {
        states: &[None, Some(9), Some(10)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 1),
            DFATransition(0, 9, 2),
        ],
        k: 1,
    },
    /* 25 - "LineNumber" */
    LookaheadDFA {
        states: &[Some(11)],
        transitions: &[],
        k: 0,
    },
    /* 26 - "Literal" */
    LookaheadDFA {
        states: &[Some(32)],
        transitions: &[],
        k: 0,
    },
    /* 27 - "LogicalAnd" */
    LookaheadDFA {
        states: &[Some(62)],
        transitions: &[],
        k: 0,
    },
    /* 28 - "LogicalAndList" */
    LookaheadDFA {
        states: &[None, Some(63), Some(64)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 1),
            DFATransition(0, 28, 2),
        ],
        k: 1,
    },
    /* 29 - "LogicalAndOp" */
    LookaheadDFA {
        states: &[Some(48)],
        transitions: &[],
        k: 0,
    },
    /* 30 - "LogicalNot" */
    LookaheadDFA {
        states: &[None, Some(65), Some(66)],
        transitions: &[
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 22, 1),
            DFATransition(0, 25, 2),
            DFATransition(0, 27, 2),
            DFATransition(0, 30, 2),
        ],
        k: 1,
    },
    /* 31 - "LogicalNotOp" */
    LookaheadDFA {
        states: &[Some(49)],
        transitions: &[],
        k: 0,
    },
    /* 32 - "LogicalOr" */
    LookaheadDFA {
        states: &[Some(59)],
        transitions: &[],
        k: 0,
    },
    /* 33 - "LogicalOrList" */
    LookaheadDFA {
        states: &[None, Some(60), Some(61)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 20, 1),
            DFATransition(0, 28, 2),
        ],
        k: 1,
    },
    /* 34 - "LogicalOrOp" */
    LookaheadDFA {
        states: &[Some(47)],
        transitions: &[],
        k: 0,
    },
    /* 35 - "Minus" */
    LookaheadDFA {
        states: &[Some(52)],
        transitions: &[],
        k: 0,
    },
    /* 36 - "MulOp" */
    LookaheadDFA {
        states: &[Some(53)],
        transitions: &[],
        k: 0,
    },
    /* 37 - "Multiplication" */
    LookaheadDFA {
        states: &[Some(75)],
        transitions: &[],
        k: 0,
    },
    /* 38 - "MultiplicationList" */
    LookaheadDFA {
        states: &[None, Some(76), Some(77)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 2),
            DFATransition(0, 25, 2),
            DFATransition(0, 26, 1),
            DFATransition(0, 28, 2),
        ],
        k: 1,
    },
    /* 39 - "Number" */
    LookaheadDFA {
        states: &[None, Some(33), Some(34)],
        transitions: &[
            DFATransition(0, 10, 1),
            DFATransition(0, 11, 1),
            DFATransition(0, 12, 2),
        ],
        k: 1,
    },
    /* 40 - "Plus" */
    LookaheadDFA {
        states: &[Some(51)],
        transitions: &[],
        k: 0,
    },
    /* 41 - "Print" */
    LookaheadDFA {
        states: &[Some(44)],
        transitions: &[],
        k: 0,
    },
    /* 42 - "PrintStatement" */
    LookaheadDFA {
        states: &[Some(27)],
        transitions: &[],
        k: 0,
    },
    /* 43 - "PrintStatementList" */
    LookaheadDFA {
        states: &[None, Some(28), Some(29)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 1),
            DFATransition(0, 9, 2),
        ],
        k: 1,
    },
    /* 44 - "RParen" */
    LookaheadDFA {
        states: &[Some(55)],
        transitions: &[],
        k: 0,
    },
    /* 45 - "Relational" */
    LookaheadDFA {
        states: &[Some(67)],
        transitions: &[],
        k: 0,
    },
    /* 46 - "RelationalList" */
    LookaheadDFA {
        states: &[None, Some(68), Some(69)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 23, 1),
            DFATransition(0, 28, 2),
        ],
        k: 1,
    },
    /* 47 - "RelationalOp" */
    LookaheadDFA {
        states: &[Some(50)],
        transitions: &[],
        k: 0,
    },
    /* 48 - "Remark" */
    LookaheadDFA {
        states: &[Some(18)],
        transitions: &[],
        k: 0,
    },
    /* 49 - "RemarkSuffix" */
    LookaheadDFA {
        states: &[None, Some(19), Some(20)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 29, 1),
        ],
        k: 1,
    },
    /* 50 - "Statement" */
    LookaheadDFA {
        states: &[
            None,
            Some(12),
            Some(13),
            Some(14),
            Some(15),
            Some(16),
            Some(17),
        ],
        transitions: &[
            DFATransition(0, 7, 1),
            DFATransition(0, 13, 3),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 4),
            DFATransition(0, 17, 5),
            DFATransition(0, 18, 6),
            DFATransition(0, 30, 4),
        ],
        k: 1,
    },
    /* 51 - "Summation" */
    LookaheadDFA {
        states: &[Some(70)],
        transitions: &[],
        k: 0,
    },
    /* 52 - "SummationList" */
    LookaheadDFA {
        states: &[None, Some(71), Some(74)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 20, 2),
            DFATransition(0, 21, 2),
            DFATransition(0, 23, 2),
            DFATransition(0, 24, 1),
            DFATransition(0, 25, 1),
            DFATransition(0, 28, 2),
        ],
        k: 1,
    },
    /* 53 - "SummationListGroup" */
    LookaheadDFA {
        states: &[None, Some(72), Some(73)],
        transitions: &[DFATransition(0, 24, 1), DFATransition(0, 25, 2)],
        k: 1,
    },
    /* 54 - "Then" */
    LookaheadDFA {
        states: &[Some(41)],
        transitions: &[],
        k: 0,
    },
    /* 55 - "Variable" */
    LookaheadDFA {
        states: &[Some(57)],
        transitions: &[],
        k: 0,
    },
];

pub const PRODUCTIONS: &[Production; 82] = &[
    // 0 - Basic: Line BasicList /* Vec */ BasicSuffix0;
    Production {
        lhs: 2,
        production: &[ParseType::N(5), ParseType::N(3), ParseType::N(23)],
    },
    // 1 - Basic: EndOfLine Line BasicList /* Vec */ BasicSuffix;
    Production {
        lhs: 2,
        production: &[
            ParseType::N(4),
            ParseType::N(3),
            ParseType::N(23),
            ParseType::N(8),
        ],
    },
    // 2 - BasicSuffix0: EndOfLine;
    Production {
        lhs: 5,
        production: &[ParseType::N(8)],
    },
    // 3 - BasicSuffix0: ;
    Production {
        lhs: 5,
        production: &[],
    },
    // 4 - BasicSuffix: EndOfLine;
    Production {
        lhs: 4,
        production: &[ParseType::N(8)],
    },
    // 5 - BasicSuffix: ;
    Production {
        lhs: 4,
        production: &[],
    },
    // 6 - BasicList: EndOfLine Line BasicList;
    Production {
        lhs: 3,
        production: &[ParseType::N(3), ParseType::N(23), ParseType::N(8)],
    },
    // 7 - BasicList: ;
    Production {
        lhs: 3,
        production: &[],
    },
    // 8 - Line: LineNumber Statement LineList /* Vec */;
    Production {
        lhs: 23,
        production: &[ParseType::N(24), ParseType::N(50), ParseType::N(25)],
    },
    // 9 - LineList: ":" Statement LineList;
    Production {
        lhs: 24,
        production: &[ParseType::N(24), ParseType::N(50), ParseType::T(5)],
    },
    // 10 - LineList: ;
    Production {
        lhs: 24,
        production: &[],
    },
    // 11 - LineNumber: "[0 ]*[1-9] *(?:[0-9] *){1,4}|[0 ]+";
    Production {
        lhs: 25,
        production: &[ParseType::T(6)],
    },
    // 12 - Statement: Remark;
    Production {
        lhs: 50,
        production: &[ParseType::N(48)],
    },
    // 13 - Statement: GotoStatement;
    Production {
        lhs: 50,
        production: &[ParseType::N(16)],
    },
    // 14 - Statement: IfStatement;
    Production {
        lhs: 50,
        production: &[ParseType::N(19)],
    },
    // 15 - Statement: Assignment;
    Production {
        lhs: 50,
        production: &[ParseType::N(1)],
    },
    // 16 - Statement: PrintStatement;
    Production {
        lhs: 50,
        production: &[ParseType::N(42)],
    },
    // 17 - Statement: EndStatement;
    Production {
        lhs: 50,
        production: &[ParseType::N(9)],
    },
    // 18 - Remark: "REM" Push(1) RemarkSuffix;
    Production {
        lhs: 48,
        production: &[ParseType::N(49), ParseType::Push(1), ParseType::T(7)],
    },
    // 19 - RemarkSuffix: Comment Pop;
    Production {
        lhs: 49,
        production: &[ParseType::Pop, ParseType::N(6)],
    },
    // 20 - RemarkSuffix: Pop;
    Production {
        lhs: 49,
        production: &[ParseType::Pop],
    },
    // 21 - GotoStatement: Goto LineNumber;
    Production {
        lhs: 16,
        production: &[ParseType::N(25), ParseType::N(15)],
    },
    // 22 - IfStatement: If Push(2) Expression Pop IfBody;
    Production {
        lhs: 19,
        production: &[
            ParseType::N(18),
            ParseType::Pop,
            ParseType::N(10),
            ParseType::Push(2),
            ParseType::N(17),
        ],
    },
    // 23 - Assignment: Let Variable AssignOp Push(2) Expression Pop;
    Production {
        lhs: 1,
        production: &[
            ParseType::Pop,
            ParseType::N(10),
            ParseType::Push(2),
            ParseType::N(0),
            ParseType::N(55),
            ParseType::N(22),
        ],
    },
    // 24 - Assignment: Variable AssignOp Push(2) Expression Pop;
    Production {
        lhs: 1,
        production: &[
            ParseType::Pop,
            ParseType::N(10),
            ParseType::Push(2),
            ParseType::N(0),
            ParseType::N(55),
        ],
    },
    // 25 - IfBody: Then Statement;
    Production {
        lhs: 18,
        production: &[ParseType::N(50), ParseType::N(54)],
    },
    // 26 - IfBody: Goto LineNumber;
    Production {
        lhs: 18,
        production: &[ParseType::N(25), ParseType::N(15)],
    },
    // 27 - PrintStatement: Print Push(2) Expression PrintStatementList /* Vec */ Pop;
    Production {
        lhs: 42,
        production: &[
            ParseType::Pop,
            ParseType::N(43),
            ParseType::N(10),
            ParseType::Push(2),
            ParseType::N(41),
        ],
    },
    // 28 - PrintStatementList: "," Expression PrintStatementList;
    Production {
        lhs: 43,
        production: &[ParseType::N(43), ParseType::N(10), ParseType::T(8)],
    },
    // 29 - PrintStatementList: ;
    Production {
        lhs: 43,
        production: &[],
    },
    // 30 - EndStatement: End;
    Production {
        lhs: 9,
        production: &[ParseType::N(7)],
    },
    // 31 - EndOfLine: "(?:\r?\n|\r)+";
    Production {
        lhs: 8,
        production: &[ParseType::T(9)],
    },
    // 32 - Literal: Number;
    Production {
        lhs: 26,
        production: &[ParseType::N(39)],
    },
    // 33 - Number: Float;
    Production {
        lhs: 39,
        production: &[ParseType::N(12)],
    },
    // 34 - Number: Integer;
    Production {
        lhs: 39,
        production: &[ParseType::N(20)],
    },
    // 35 - Float: Float1;
    Production {
        lhs: 12,
        production: &[ParseType::N(13)],
    },
    // 36 - Float: Float2;
    Production {
        lhs: 12,
        production: &[ParseType::N(14)],
    },
    // 37 - Float1: "(?:(?:[0-9] *)+)?\. *(?:(?:[0-9] *)+)? *(?:E *[-+]? *(?:[0-9] *)+)?";
    Production {
        lhs: 13,
        production: &[ParseType::T(10)],
    },
    // 38 - Float2: "(?:[0-9] *)+E *[-+]? *(?:[0-9] *)+";
    Production {
        lhs: 14,
        production: &[ParseType::T(11)],
    },
    // 39 - Integer: "(?:[0-9] *)+";
    Production {
        lhs: 20,
        production: &[ParseType::T(12)],
    },
    // 40 - If: "IF";
    Production {
        lhs: 17,
        production: &[ParseType::T(13)],
    },
    // 41 - Then: "THEN";
    Production {
        lhs: 54,
        production: &[ParseType::T(14)],
    },
    // 42 - Goto: "GOTO";
    Production {
        lhs: 15,
        production: &[ParseType::T(15)],
    },
    // 43 - Let: "LET";
    Production {
        lhs: 22,
        production: &[ParseType::T(16)],
    },
    // 44 - Print: "PRINT|\?";
    Production {
        lhs: 41,
        production: &[ParseType::T(17)],
    },
    // 45 - End: "END";
    Production {
        lhs: 7,
        production: &[ParseType::T(18)],
    },
    // 46 - AssignOp: "=";
    Production {
        lhs: 0,
        production: &[ParseType::T(19)],
    },
    // 47 - LogicalOrOp: "N?OR";
    Production {
        lhs: 34,
        production: &[ParseType::T(20)],
    },
    // 48 - LogicalAndOp: "AND";
    Production {
        lhs: 29,
        production: &[ParseType::T(21)],
    },
    // 49 - LogicalNotOp: "NOT";
    Production {
        lhs: 31,
        production: &[ParseType::T(22)],
    },
    // 50 - RelationalOp: "<\s*>|<\s*=|<|>\s*=|>|=";
    Production {
        lhs: 47,
        production: &[ParseType::T(23)],
    },
    // 51 - Plus: "\+";
    Production {
        lhs: 40,
        production: &[ParseType::T(24)],
    },
    // 52 - Minus: "-";
    Production {
        lhs: 35,
        production: &[ParseType::T(25)],
    },
    // 53 - MulOp: "\*|/";
    Production {
        lhs: 36,
        production: &[ParseType::T(26)],
    },
    // 54 - LParen: "\(";
    Production {
        lhs: 21,
        production: &[ParseType::T(27)],
    },
    // 55 - RParen: "\)";
    Production {
        lhs: 44,
        production: &[ParseType::T(28)],
    },
    // 56 - Comment: "[^\r\n]+";
    Production {
        lhs: 6,
        production: &[ParseType::T(29)],
    },
    // 57 - Variable: "[A-Z][0-9A-Z]*";
    Production {
        lhs: 55,
        production: &[ParseType::T(30)],
    },
    // 58 - Expression: LogicalOr;
    Production {
        lhs: 10,
        production: &[ParseType::N(32)],
    },
    // 59 - LogicalOr: LogicalAnd LogicalOrList /* Vec */;
    Production {
        lhs: 32,
        production: &[ParseType::N(33), ParseType::N(27)],
    },
    // 60 - LogicalOrList: LogicalOrOp LogicalAnd LogicalOrList;
    Production {
        lhs: 33,
        production: &[ParseType::N(33), ParseType::N(27), ParseType::N(34)],
    },
    // 61 - LogicalOrList: ;
    Production {
        lhs: 33,
        production: &[],
    },
    // 62 - LogicalAnd: LogicalNot LogicalAndList /* Vec */;
    Production {
        lhs: 27,
        production: &[ParseType::N(28), ParseType::N(30)],
    },
    // 63 - LogicalAndList: LogicalAndOp LogicalNot LogicalAndList;
    Production {
        lhs: 28,
        production: &[ParseType::N(28), ParseType::N(30), ParseType::N(29)],
    },
    // 64 - LogicalAndList: ;
    Production {
        lhs: 28,
        production: &[],
    },
    // 65 - LogicalNot: LogicalNotOp Relational;
    Production {
        lhs: 30,
        production: &[ParseType::N(45), ParseType::N(31)],
    },
    // 66 - LogicalNot: Relational;
    Production {
        lhs: 30,
        production: &[ParseType::N(45)],
    },
    // 67 - Relational: Summation RelationalList /* Vec */;
    Production {
        lhs: 45,
        production: &[ParseType::N(46), ParseType::N(51)],
    },
    // 68 - RelationalList: RelationalOp Summation RelationalList;
    Production {
        lhs: 46,
        production: &[ParseType::N(46), ParseType::N(51), ParseType::N(47)],
    },
    // 69 - RelationalList: ;
    Production {
        lhs: 46,
        production: &[],
    },
    // 70 - Summation: Multiplication SummationList /* Vec */;
    Production {
        lhs: 51,
        production: &[ParseType::N(52), ParseType::N(37)],
    },
    // 71 - SummationList: SummationListGroup Multiplication SummationList;
    Production {
        lhs: 52,
        production: &[ParseType::N(52), ParseType::N(37), ParseType::N(53)],
    },
    // 72 - SummationListGroup: Plus;
    Production {
        lhs: 53,
        production: &[ParseType::N(40)],
    },
    // 73 - SummationListGroup: Minus;
    Production {
        lhs: 53,
        production: &[ParseType::N(35)],
    },
    // 74 - SummationList: ;
    Production {
        lhs: 52,
        production: &[],
    },
    // 75 - Multiplication: Factor MultiplicationList /* Vec */;
    Production {
        lhs: 37,
        production: &[ParseType::N(38), ParseType::N(11)],
    },
    // 76 - MultiplicationList: MulOp Factor MultiplicationList;
    Production {
        lhs: 38,
        production: &[ParseType::N(38), ParseType::N(11), ParseType::N(36)],
    },
    // 77 - MultiplicationList: ;
    Production {
        lhs: 38,
        production: &[],
    },
    // 78 - Factor: Literal;
    Production {
        lhs: 11,
        production: &[ParseType::N(26)],
    },
    // 79 - Factor: Variable;
    Production {
        lhs: 11,
        production: &[ParseType::N(55)],
    },
    // 80 - Factor: Minus Factor;
    Production {
        lhs: 11,
        production: &[ParseType::N(11), ParseType::N(35)],
    },
    // 81 - Factor: LParen Expression RParen;
    Production {
        lhs: 11,
        production: &[ParseType::N(44), ParseType::N(10), ParseType::N(21)],
    },
];

lazy_static! {
    static ref TOKENIZERS: Vec<(&'static str, Tokenizer)> = vec![
        (
            "INITIAL",
            Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap()
        ),
        (
            "Cmnt",
            Tokenizer::build(TERMINALS, SCANNER_1.0, SCANNER_1.1).unwrap()
        ),
        (
            "Expr",
            Tokenizer::build(TERMINALS, SCANNER_2.0, SCANNER_2.1).unwrap()
        ),
    ];
}

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut BasicGrammar<'t>,
) -> Result<Tree<ParseTreeType<'t>>>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        2,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream =
        RefCell::new(TokenStream::new(input, file_name, &TOKENIZERS, MAX_K).unwrap());
    // Initialize wrapper
    let mut user_actions = BasicGrammarAuto::new(user_actions);
    let result = llk_parser.parse(token_stream, &mut user_actions);
    match result {
        Ok(()) => Ok(llk_parser.parse_tree),
        Err(e) => Err(e),
    }
}
