%start calc
%title "Example grammar of an expression evaluator"
%comment "To demonstrate use of lists, operator precedence, operator associativity"
%line_comment "//"
%block_comment  "/\*" "\*/"

%%

// -------------------------------------------------------------------------------------------------
// START SYMBOL
calc: { instruction ";"^ };


// -------------------------------------------------------------------------------------------------
// OPERATOR SYMBOLS
equality_op: "==|!=";
assign_op: "(\+|-|\*|/|%|<<|>>|&|\^|\|)?=";
logical_or_op: "\|\|";
logical_and_op: "&&";
bitwise_or_op: "\|";
bitwise_and_op: "&";
bitwise_shift_op: "<<|>>";
relational_op: "<=|<|>=|>";
plus: "\+";
minus: "-";
pow_op: "\*\*";
mult_op: "\*|/|%";

// -------------------------------------------------------------------------------------------------
// INSTRUCTION
instruction: assignment;
instruction: logical_or;

// -------------------------------------------------------------------------------------------------
// ASSIGNMENT
assign_item: id assign_op;
assignment: assign_item { assign_item } logical_or;

// -------------------------------------------------------------------------------------------------
// LOGICAL OR
logical_or: logical_and { logical_or_op logical_and };

// -------------------------------------------------------------------------------------------------
// LOGICAL AND
logical_and: bitwise_or { logical_and_op bitwise_or };

// -------------------------------------------------------------------------------------------------
// BITWISE OR
bitwise_or: bitwise_and { bitwise_or_op bitwise_and };

// -------------------------------------------------------------------------------------------------
// BITWISE AND
bitwise_and: equality { bitwise_and_op equality };

// -------------------------------------------------------------------------------------------------
// EQUALITY AND INEQUALITY
equality: relational { equality_op relational } ;

// -------------------------------------------------------------------------------------------------
// RELATIONAL
relational: bitwise_shift { relational_op bitwise_shift };

// -------------------------------------------------------------------------------------------------
// BITWISE SHIFT
bitwise_shift: summ { bitwise_shift_op summ };

// -------------------------------------------------------------------------------------------------
// ADDITION AND SUBTRACTION
add_op : plus | minus;
summ: mult { add_op mult };

// -------------------------------------------------------------------------------------------------
// MULTIPLICATION, DIVISION AND REMAINDER
mult: power { mult_op power };

// -------------------------------------------------------------------------------------------------
// POWER
power: factor { pow_op factor };

// -------------------------------------------------------------------------------------------------
// NEGATION
negate: minus;

// -------------------------------------------------------------------------------------------------
// FACTOR
factor
    : number
    | idref
    | negate factor
    | "\("^ logical_or "\)"^
    ;

number: "0|[1-9][0-9]*": crate::calc_grammar::Number;

idref: id;

id: "[a-zA-Z_][a-zA-Z0-9_]*";
