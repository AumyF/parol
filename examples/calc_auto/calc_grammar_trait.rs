// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

#[allow(unused_imports)]
use crate::calc_grammar::CalcGrammar;
use id_tree::Tree;
use log::trace;
use miette::{miette, IntoDiagnostic, Result};
use parol_runtime::lexer::Token;
use parol_runtime::parser::{ParseTreeStackEntry, ParseTreeType, UserActionsTrait};
use std::path::{Path, PathBuf};

/// Semantic actions trait generated for the user grammar
/// All functions have default implementations.
pub trait CalcGrammarTrait<'t> {
    fn init(&mut self, _file_name: &Path) {}

    /// Semantic action for user production 0:
    ///
    /// calc: {instruction <0>";"};
    ///
    fn calc(&mut self, _arg: &Calc<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 1:
    ///
    /// equality_op: <0>"==|!=";
    ///
    fn equality_op(&mut self, _arg: &EqualityOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 2:
    ///
    /// assign_op: <0>"(\+|-|\*|/|%|<<|>>|&|\^|\|)?=";
    ///
    fn assign_op(&mut self, _arg: &AssignOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 3:
    ///
    /// logical_or_op: <0>"\|\|";
    ///
    fn logical_or_op(&mut self, _arg: &LogicalOrOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 4:
    ///
    /// logical_and_op: <0>"&&";
    ///
    fn logical_and_op(&mut self, _arg: &LogicalAndOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 5:
    ///
    /// bitwise_or_op: <0>"\|";
    ///
    fn bitwise_or_op(&mut self, _arg: &BitwiseOrOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 6:
    ///
    /// bitwise_and_op: <0>"&";
    ///
    fn bitwise_and_op(&mut self, _arg: &BitwiseAndOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 7:
    ///
    /// bitwise_shift_op: <0>"<<|>>";
    ///
    fn bitwise_shift_op(&mut self, _arg: &BitwiseShiftOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 8:
    ///
    /// relational_op: <0>"<=|<|>=|>";
    ///
    fn relational_op(&mut self, _arg: &RelationalOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 9:
    ///
    /// plus: <0>"\+";
    ///
    fn plus(&mut self, _arg: &Plus<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 10:
    ///
    /// minus: <0>"-";
    ///
    fn minus(&mut self, _arg: &Minus<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 11:
    ///
    /// pow_op: <0>"\*\*";
    ///
    fn pow_op(&mut self, _arg: &PowOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 12:
    ///
    /// mult_op: <0>"\*|/|%";
    ///
    fn mult_op(&mut self, _arg: &MultOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 13:
    ///
    /// instruction: assignment;
    ///
    fn instruction(&mut self, _arg: &Instruction<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 15:
    ///
    /// assign_item: id assign_op;
    ///
    fn assign_item(&mut self, _arg: &AssignItem<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 16:
    ///
    /// assignment: assign_item {assign_item} logical_or;
    ///
    fn assignment(&mut self, _arg: &Assignment<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 17:
    ///
    /// logical_or: logical_and {logical_or_op logical_and};
    ///
    fn logical_or(&mut self, _arg: &LogicalOr<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 18:
    ///
    /// logical_and: bitwise_or {logical_and_op bitwise_or};
    ///
    fn logical_and(&mut self, _arg: &LogicalAnd<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 19:
    ///
    /// bitwise_or: bitwise_and {bitwise_or_op bitwise_and};
    ///
    fn bitwise_or(&mut self, _arg: &BitwiseOr<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 20:
    ///
    /// bitwise_and: equality {bitwise_and_op equality};
    ///
    fn bitwise_and(&mut self, _arg: &BitwiseAnd<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 21:
    ///
    /// equality: relational {equality_op relational};
    ///
    fn equality(&mut self, _arg: &Equality<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 22:
    ///
    /// relational: bitwise_shift {relational_op bitwise_shift};
    ///
    fn relational(&mut self, _arg: &Relational<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 23:
    ///
    /// bitwise_shift: summ {bitwise_shift_op summ};
    ///
    fn bitwise_shift(&mut self, _arg: &BitwiseShift<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 24:
    ///
    /// add_op: plus | minus;
    ///
    fn add_op(&mut self, _arg: &AddOp<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 25:
    ///
    /// summ: mult {add_op mult};
    ///
    fn summ(&mut self, _arg: &Summ<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 26:
    ///
    /// mult: power {mult_op power};
    ///
    fn mult(&mut self, _arg: &Mult<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 27:
    ///
    /// power: factor {pow_op factor};
    ///
    fn power(&mut self, _arg: &Power<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 28:
    ///
    /// negate: minus;
    ///
    fn negate(&mut self, _arg: &Negate<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 29:
    ///
    /// factor: number | idref | negate factor | <0>"\(" logical_or <0>"\)";
    ///
    fn factor(&mut self, _arg: &Factor<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 30:
    ///
    /// number: <0>"0|[1-9][0-9]*";
    ///
    fn number(&mut self, _arg: &Number<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 31:
    ///
    /// idref: id;
    ///
    fn idref(&mut self, _arg: &Idref<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for user production 32:
    ///
    /// id: <0>"[a-zA-Z_][a-zA-Z0-9_]*";
    ///
    fn id(&mut self, _arg: &Id<'t>) -> Result<()> {
        Ok(())
    }
}

// -------------------------------------------------------------------------------------------------
//
// Output Types of productions deduced from the structure of the transformed grammar
//

///
/// Type derived for production 15
///
/// instruction: assignment;
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Instruction15<'t> {
    pub assignment_0: Box<Assignment<'t>>,
}

///
/// Type derived for production 16
///
/// instruction: logical_or;
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Instruction16<'t> {
    pub logical_or_0: Box<LogicalOr<'t>>,
}

///
/// Type derived for production 42
///
/// add_op: plus;
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct AddOp42<'t> {
    pub plus_0: Box<Plus<'t>>,
}

///
/// Type derived for production 43
///
/// add_op: minus;
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct AddOp43<'t> {
    pub minus_0: Box<Minus<'t>>,
}

///
/// Type derived for production 54
///
/// factor: number;
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Factor54<'t> {
    pub number_0: Box<Number<'t>>,
}

///
/// Type derived for production 55
///
/// factor: idref;
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Factor55<'t> {
    pub idref_0: Box<Idref<'t>>,
}

///
/// Type derived for production 56
///
/// factor: negate factor;
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Factor56<'t> {
    pub negate_0: Box<Negate<'t>>,
    pub factor_1: Box<Factor<'t>>,
}

///
/// Type derived for production 57
///
/// factor: "\(" logical_or "\)";
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Factor57<'t> {
    pub l_paren_0: Token<'t>, /* \( */
    pub logical_or_1: Box<LogicalOr<'t>>,
    pub r_paren_2: Token<'t>, /* \) */
}

// -------------------------------------------------------------------------------------------------
//
// Types of non-terminals deduced from the structure of the transformed grammar
//

///
/// Type derived for non-terminal add_op
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum AddOp<'t> {
    AddOp42(AddOp42<'t>),
    AddOp43(AddOp43<'t>),
}

///
/// Type derived for non-terminal assign_item
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct AssignItem<'t> {
    pub id_0: Box<Id<'t>>,
    pub assign_op_1: Box<AssignOp<'t>>,
}

///
/// Type derived for non-terminal assign_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct AssignOp<'t> {
    pub assign_op_0: Token<'t>, /* (\+|-|\*|/|%|<<|>>|&|\^|\|)?= */
}

///
/// Type derived for non-terminal assignment
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Assignment<'t> {
    pub assign_item_0: Box<AssignItem<'t>>,
    pub assignment_list_1: Vec<AssignmentList<'t>>,
    pub logical_or_2: Box<LogicalOr<'t>>,
}

///
/// Type derived for non-terminal assignmentList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct AssignmentList<'t> {
    pub assign_item_0: Box<AssignItem<'t>>,
}

///
/// Type derived for non-terminal bitwise_and
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct BitwiseAnd<'t> {
    pub equality_0: Box<Equality<'t>>,
    pub bitwise_and_list_1: Vec<BitwiseAndList<'t>>,
}

///
/// Type derived for non-terminal bitwise_andList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct BitwiseAndList<'t> {
    pub bitwise_and_op_0: Box<BitwiseAndOp<'t>>,
    pub equality_1: Box<Equality<'t>>,
}

///
/// Type derived for non-terminal bitwise_and_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct BitwiseAndOp<'t> {
    pub bitwise_and_op_0: Token<'t>, /* & */
}

///
/// Type derived for non-terminal bitwise_or
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct BitwiseOr<'t> {
    pub bitwise_and_0: Box<BitwiseAnd<'t>>,
    pub bitwise_or_list_1: Vec<BitwiseOrList<'t>>,
}

///
/// Type derived for non-terminal bitwise_orList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct BitwiseOrList<'t> {
    pub bitwise_or_op_0: Box<BitwiseOrOp<'t>>,
    pub bitwise_and_1: Box<BitwiseAnd<'t>>,
}

///
/// Type derived for non-terminal bitwise_or_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct BitwiseOrOp<'t> {
    pub bitwise_or_op_0: Token<'t>, /* \| */
}

///
/// Type derived for non-terminal bitwise_shift
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct BitwiseShift<'t> {
    pub summ_0: Box<Summ<'t>>,
    pub bitwise_shift_list_1: Vec<BitwiseShiftList<'t>>,
}

///
/// Type derived for non-terminal bitwise_shiftList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct BitwiseShiftList<'t> {
    pub bitwise_shift_op_0: Box<BitwiseShiftOp<'t>>,
    pub summ_1: Box<Summ<'t>>,
}

///
/// Type derived for non-terminal bitwise_shift_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct BitwiseShiftOp<'t> {
    pub bitwise_shift_op_0: Token<'t>, /* <<|>> */
}

///
/// Type derived for non-terminal calc
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Calc<'t> {
    pub calc_list_0: Vec<CalcList<'t>>,
}

///
/// Type derived for non-terminal calcList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct CalcList<'t> {
    pub instruction_0: Box<Instruction<'t>>,
    pub semicolon_1: Token<'t>, /* ; */
}

///
/// Type derived for non-terminal equality
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Equality<'t> {
    pub relational_0: Box<Relational<'t>>,
    pub equality_list_1: Vec<EqualityList<'t>>,
}

///
/// Type derived for non-terminal equalityList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct EqualityList<'t> {
    pub equality_op_0: Box<EqualityOp<'t>>,
    pub relational_1: Box<Relational<'t>>,
}

///
/// Type derived for non-terminal equality_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct EqualityOp<'t> {
    pub equality_op_0: Token<'t>, /* ==|!= */
}

///
/// Type derived for non-terminal factor
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum Factor<'t> {
    Factor54(Factor54<'t>),
    Factor55(Factor55<'t>),
    Factor56(Factor56<'t>),
    Factor57(Factor57<'t>),
}

///
/// Type derived for non-terminal id
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Id<'t> {
    pub id_0: Token<'t>, /* [a-zA-Z_][a-zA-Z0-9_]* */
}

///
/// Type derived for non-terminal idref
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Idref<'t> {
    pub id_0: Box<Id<'t>>,
}

///
/// Type derived for non-terminal instruction
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum Instruction<'t> {
    Instruction15(Instruction15<'t>),
    Instruction16(Instruction16<'t>),
}

///
/// Type derived for non-terminal logical_and
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct LogicalAnd<'t> {
    pub bitwise_or_0: Box<BitwiseOr<'t>>,
    pub logical_and_list_1: Vec<LogicalAndList<'t>>,
}

///
/// Type derived for non-terminal logical_andList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct LogicalAndList<'t> {
    pub logical_and_op_0: Box<LogicalAndOp<'t>>,
    pub bitwise_or_1: Box<BitwiseOr<'t>>,
}

///
/// Type derived for non-terminal logical_and_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct LogicalAndOp<'t> {
    pub logical_and_op_0: Token<'t>, /* && */
}

///
/// Type derived for non-terminal logical_or
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct LogicalOr<'t> {
    pub logical_and_0: Box<LogicalAnd<'t>>,
    pub logical_or_list_1: Vec<LogicalOrList<'t>>,
}

///
/// Type derived for non-terminal logical_orList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct LogicalOrList<'t> {
    pub logical_or_op_0: Box<LogicalOrOp<'t>>,
    pub logical_and_1: Box<LogicalAnd<'t>>,
}

///
/// Type derived for non-terminal logical_or_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct LogicalOrOp<'t> {
    pub logical_or_op_0: Token<'t>, /* \|\| */
}

///
/// Type derived for non-terminal minus
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Minus<'t> {
    pub minus_0: Token<'t>, /* - */
}

///
/// Type derived for non-terminal mult
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Mult<'t> {
    pub power_0: Box<Power<'t>>,
    pub mult_list_1: Vec<MultList<'t>>,
}

///
/// Type derived for non-terminal multList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct MultList<'t> {
    pub mult_op_0: Box<MultOp<'t>>,
    pub power_1: Box<Power<'t>>,
}

///
/// Type derived for non-terminal mult_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct MultOp<'t> {
    pub mult_op_0: Token<'t>, /* \*|/|% */
}

///
/// Type derived for non-terminal negate
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Negate<'t> {
    pub minus_0: Box<Minus<'t>>,
}

///
/// Type derived for non-terminal number
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Number<'t> {
    pub number_0: Token<'t>, /* 0|[1-9][0-9]* */
}

///
/// Type derived for non-terminal plus
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Plus<'t> {
    pub plus_0: Token<'t>, /* \+ */
}

///
/// Type derived for non-terminal pow_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct PowOp<'t> {
    pub pow_op_0: Token<'t>, /* \*\* */
}

///
/// Type derived for non-terminal power
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Power<'t> {
    pub factor_0: Box<Factor<'t>>,
    pub power_list_1: Vec<PowerList<'t>>,
}

///
/// Type derived for non-terminal powerList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct PowerList<'t> {
    pub pow_op_0: Box<PowOp<'t>>,
    pub factor_1: Box<Factor<'t>>,
}

///
/// Type derived for non-terminal relational
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Relational<'t> {
    pub bitwise_shift_0: Box<BitwiseShift<'t>>,
    pub relational_list_1: Vec<RelationalList<'t>>,
}

///
/// Type derived for non-terminal relationalList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct RelationalList<'t> {
    pub relational_op_0: Box<RelationalOp<'t>>,
    pub bitwise_shift_1: Box<BitwiseShift<'t>>,
}

///
/// Type derived for non-terminal relational_op
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct RelationalOp<'t> {
    pub relational_op_0: Token<'t>, /* <=|<|>=|> */
}

///
/// Type derived for non-terminal summ
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct Summ<'t> {
    pub mult_0: Box<Mult<'t>>,
    pub summ_list_1: Vec<SummList<'t>>,
}

///
/// Type derived for non-terminal summList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
pub struct SummList<'t> {
    pub add_op_0: Box<AddOp<'t>>,
    pub mult_1: Box<Mult<'t>>,
}

// -------------------------------------------------------------------------------------------------

///
/// Deduced ASTType of expanded grammar
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum ASTType<'t> {
    AddOp(AddOp<'t>),
    AssignItem(AssignItem<'t>),
    AssignOp(AssignOp<'t>),
    Assignment(Assignment<'t>),
    AssignmentList(Vec<AssignmentList<'t>>),
    BitwiseAnd(BitwiseAnd<'t>),
    BitwiseAndList(Vec<BitwiseAndList<'t>>),
    BitwiseAndOp(BitwiseAndOp<'t>),
    BitwiseOr(BitwiseOr<'t>),
    BitwiseOrList(Vec<BitwiseOrList<'t>>),
    BitwiseOrOp(BitwiseOrOp<'t>),
    BitwiseShift(BitwiseShift<'t>),
    BitwiseShiftList(Vec<BitwiseShiftList<'t>>),
    BitwiseShiftOp(BitwiseShiftOp<'t>),
    Calc(Calc<'t>),
    CalcList(Vec<CalcList<'t>>),
    Equality(Equality<'t>),
    EqualityList(Vec<EqualityList<'t>>),
    EqualityOp(EqualityOp<'t>),
    Factor(Factor<'t>),
    Id(Id<'t>),
    Idref(Idref<'t>),
    Instruction(Instruction<'t>),
    LogicalAnd(LogicalAnd<'t>),
    LogicalAndList(Vec<LogicalAndList<'t>>),
    LogicalAndOp(LogicalAndOp<'t>),
    LogicalOr(LogicalOr<'t>),
    LogicalOrList(Vec<LogicalOrList<'t>>),
    LogicalOrOp(LogicalOrOp<'t>),
    Minus(Minus<'t>),
    Mult(Mult<'t>),
    MultList(Vec<MultList<'t>>),
    MultOp(MultOp<'t>),
    Negate(Negate<'t>),
    Number(Number<'t>),
    Plus(Plus<'t>),
    PowOp(PowOp<'t>),
    Power(Power<'t>),
    PowerList(Vec<PowerList<'t>>),
    Relational(Relational<'t>),
    RelationalList(Vec<RelationalList<'t>>),
    RelationalOp(RelationalOp<'t>),
    Summ(Summ<'t>),
    SummList(Vec<SummList<'t>>),
}

/// Auto-implemented adapter grammar
///
/// The lifetime parameter `'t` refers to the lifetime of the scanned text.
/// The lifetime parameter `'u` refers to the lifetime of user grammar object.
///
#[allow(dead_code)]
pub struct CalcGrammarAuto<'t, 'u>
where
    't: 'u,
{
    // Mutable reference of the actual user grammar to be able to call the semantic actions on it
    user_grammar: &'u mut dyn CalcGrammarTrait<'t>,
    // Stack to construct the AST on it
    item_stack: Vec<ASTType<'t>>,
    // Path of the input file. Used for diagnostics.
    file_name: PathBuf,
}

///
/// The `CalcGrammarAuto` impl is automatically generated for the
/// given grammar.
///
impl<'t, 'u> CalcGrammarAuto<'t, 'u> {
    pub fn new(user_grammar: &'u mut dyn CalcGrammarTrait<'t>) -> Self {
        Self {
            user_grammar,
            item_stack: Vec::new(),
            file_name: PathBuf::default(),
        }
    }

    fn push(&mut self, item: ASTType<'t>, context: &str) {
        trace!("push    {}: {:?}", context, item);
        self.item_stack.push(item)
    }

    fn pop(&mut self, context: &str) -> Option<ASTType<'t>> {
        if !self.item_stack.is_empty() {
            let item = self.item_stack.pop();
            if let Some(ref item) = item {
                trace!("pop     {}: {:?}", context, item);
            }
            item
        } else {
            None
        }
    }

    #[allow(dead_code)]
    // Use this function for debugging purposes:
    // trace!("{}", self.trace_item_stack(context));
    fn trace_item_stack(&self, context: &str) -> std::string::String {
        format!(
            "Item stack at {}:\n{}",
            context,
            self.item_stack
                .iter()
                .rev()
                .map(|s| format!("  {:?}", s))
                .collect::<Vec<std::string::String>>()
                .join("\n")
        )
    }

    /// Semantic action for production 0:
    ///
    /// calc: calcList /* Vec */;
    ///
    fn calc_0(
        &mut self,
        _calc_list_0: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "calc_0";
        trace!("{}", self.trace_item_stack(context));
        let calc_list_0 = if let Some(ASTType::CalcList(mut calc_list_0)) = self.pop(context) {
            calc_list_0.reverse();
            calc_list_0
        } else {
            return Err(miette!("{}: Expecting ASTType::CalcList", context));
        };
        let calc_0_built = CalcBuilder::default()
            .calc_list_0(calc_list_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.calc(&calc_0_built)?;
        self.push(ASTType::Calc(calc_0_built), context);
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// calcList: instruction ";" calcList; // Vec<T>::Push
    ///
    fn calc_list_1(
        &mut self,
        _instruction_0: &ParseTreeStackEntry<'t>,
        semicolon_1: &ParseTreeStackEntry<'t>,
        _calc_list_2: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "calc_list_1";
        trace!("{}", self.trace_item_stack(context));
        let semicolon_1 = *semicolon_1.token(parse_tree)?;
        let mut calc_list_2 = if let Some(ASTType::CalcList(calc_list_2)) = self.pop(context) {
            calc_list_2
        } else {
            return Err(miette!("{}: Expecting ASTType::CalcList", context));
        };
        let instruction_0 = if let Some(ASTType::Instruction(instruction_0)) = self.pop(context) {
            instruction_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Instruction", context));
        };
        let calc_list_1_built = CalcListBuilder::default()
            .semicolon_1(semicolon_1)
            .instruction_0(Box::new(instruction_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        calc_list_2.push(calc_list_1_built);
        self.push(ASTType::CalcList(calc_list_2), context);
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// calcList: ; // Vec<T>::New
    ///
    fn calc_list_2(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "calc_list_2";
        trace!("{}", self.trace_item_stack(context));
        let calc_list_2_built = Vec::new();
        self.push(ASTType::CalcList(calc_list_2_built), context);
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// equality_op: "==|!=";
    ///
    fn equality_op_3(
        &mut self,
        equality_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "equality_op_3";
        trace!("{}", self.trace_item_stack(context));
        let equality_op_0 = *equality_op_0.token(parse_tree)?;
        let equality_op_3_built = EqualityOpBuilder::default()
            .equality_op_0(equality_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.equality_op(&equality_op_3_built)?;
        self.push(ASTType::EqualityOp(equality_op_3_built), context);
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// assign_op: "(\+|-|\*|/|%|<<|>>|&|\^|\|)?=";
    ///
    fn assign_op_4(
        &mut self,
        assign_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "assign_op_4";
        trace!("{}", self.trace_item_stack(context));
        let assign_op_0 = *assign_op_0.token(parse_tree)?;
        let assign_op_4_built = AssignOpBuilder::default()
            .assign_op_0(assign_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.assign_op(&assign_op_4_built)?;
        self.push(ASTType::AssignOp(assign_op_4_built), context);
        Ok(())
    }

    /// Semantic action for production 5:
    ///
    /// logical_or_op: "\|\|";
    ///
    fn logical_or_op_5(
        &mut self,
        logical_or_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "logical_or_op_5";
        trace!("{}", self.trace_item_stack(context));
        let logical_or_op_0 = *logical_or_op_0.token(parse_tree)?;
        let logical_or_op_5_built = LogicalOrOpBuilder::default()
            .logical_or_op_0(logical_or_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.logical_or_op(&logical_or_op_5_built)?;
        self.push(ASTType::LogicalOrOp(logical_or_op_5_built), context);
        Ok(())
    }

    /// Semantic action for production 6:
    ///
    /// logical_and_op: "&&";
    ///
    fn logical_and_op_6(
        &mut self,
        logical_and_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "logical_and_op_6";
        trace!("{}", self.trace_item_stack(context));
        let logical_and_op_0 = *logical_and_op_0.token(parse_tree)?;
        let logical_and_op_6_built = LogicalAndOpBuilder::default()
            .logical_and_op_0(logical_and_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.logical_and_op(&logical_and_op_6_built)?;
        self.push(ASTType::LogicalAndOp(logical_and_op_6_built), context);
        Ok(())
    }

    /// Semantic action for production 7:
    ///
    /// bitwise_or_op: "\|";
    ///
    fn bitwise_or_op_7(
        &mut self,
        bitwise_or_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "bitwise_or_op_7";
        trace!("{}", self.trace_item_stack(context));
        let bitwise_or_op_0 = *bitwise_or_op_0.token(parse_tree)?;
        let bitwise_or_op_7_built = BitwiseOrOpBuilder::default()
            .bitwise_or_op_0(bitwise_or_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.bitwise_or_op(&bitwise_or_op_7_built)?;
        self.push(ASTType::BitwiseOrOp(bitwise_or_op_7_built), context);
        Ok(())
    }

    /// Semantic action for production 8:
    ///
    /// bitwise_and_op: "&";
    ///
    fn bitwise_and_op_8(
        &mut self,
        bitwise_and_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "bitwise_and_op_8";
        trace!("{}", self.trace_item_stack(context));
        let bitwise_and_op_0 = *bitwise_and_op_0.token(parse_tree)?;
        let bitwise_and_op_8_built = BitwiseAndOpBuilder::default()
            .bitwise_and_op_0(bitwise_and_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.bitwise_and_op(&bitwise_and_op_8_built)?;
        self.push(ASTType::BitwiseAndOp(bitwise_and_op_8_built), context);
        Ok(())
    }

    /// Semantic action for production 9:
    ///
    /// bitwise_shift_op: "<<|>>";
    ///
    fn bitwise_shift_op_9(
        &mut self,
        bitwise_shift_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "bitwise_shift_op_9";
        trace!("{}", self.trace_item_stack(context));
        let bitwise_shift_op_0 = *bitwise_shift_op_0.token(parse_tree)?;
        let bitwise_shift_op_9_built = BitwiseShiftOpBuilder::default()
            .bitwise_shift_op_0(bitwise_shift_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar
            .bitwise_shift_op(&bitwise_shift_op_9_built)?;
        self.push(ASTType::BitwiseShiftOp(bitwise_shift_op_9_built), context);
        Ok(())
    }

    /// Semantic action for production 10:
    ///
    /// relational_op: "<=|<|>=|>";
    ///
    fn relational_op_10(
        &mut self,
        relational_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "relational_op_10";
        trace!("{}", self.trace_item_stack(context));
        let relational_op_0 = *relational_op_0.token(parse_tree)?;
        let relational_op_10_built = RelationalOpBuilder::default()
            .relational_op_0(relational_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.relational_op(&relational_op_10_built)?;
        self.push(ASTType::RelationalOp(relational_op_10_built), context);
        Ok(())
    }

    /// Semantic action for production 11:
    ///
    /// plus: "\+";
    ///
    fn plus_11(
        &mut self,
        plus_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "plus_11";
        trace!("{}", self.trace_item_stack(context));
        let plus_0 = *plus_0.token(parse_tree)?;
        let plus_11_built = PlusBuilder::default()
            .plus_0(plus_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.plus(&plus_11_built)?;
        self.push(ASTType::Plus(plus_11_built), context);
        Ok(())
    }

    /// Semantic action for production 12:
    ///
    /// minus: "-";
    ///
    fn minus_12(
        &mut self,
        minus_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "minus_12";
        trace!("{}", self.trace_item_stack(context));
        let minus_0 = *minus_0.token(parse_tree)?;
        let minus_12_built = MinusBuilder::default()
            .minus_0(minus_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.minus(&minus_12_built)?;
        self.push(ASTType::Minus(minus_12_built), context);
        Ok(())
    }

    /// Semantic action for production 13:
    ///
    /// pow_op: "\*\*";
    ///
    fn pow_op_13(
        &mut self,
        pow_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "pow_op_13";
        trace!("{}", self.trace_item_stack(context));
        let pow_op_0 = *pow_op_0.token(parse_tree)?;
        let pow_op_13_built = PowOpBuilder::default()
            .pow_op_0(pow_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.pow_op(&pow_op_13_built)?;
        self.push(ASTType::PowOp(pow_op_13_built), context);
        Ok(())
    }

    /// Semantic action for production 14:
    ///
    /// mult_op: "\*|/|%";
    ///
    fn mult_op_14(
        &mut self,
        mult_op_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "mult_op_14";
        trace!("{}", self.trace_item_stack(context));
        let mult_op_0 = *mult_op_0.token(parse_tree)?;
        let mult_op_14_built = MultOpBuilder::default()
            .mult_op_0(mult_op_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.mult_op(&mult_op_14_built)?;
        self.push(ASTType::MultOp(mult_op_14_built), context);
        Ok(())
    }

    /// Semantic action for production 15:
    ///
    /// instruction: assignment;
    ///
    fn instruction_15(
        &mut self,
        _assignment_0: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "instruction_15";
        trace!("{}", self.trace_item_stack(context));
        let assignment_0 = if let Some(ASTType::Assignment(assignment_0)) = self.pop(context) {
            assignment_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Assignment", context));
        };
        let instruction_15_built = Instruction15Builder::default()
            .assignment_0(Box::new(assignment_0))
            .build()
            .into_diagnostic()?;
        let instruction_15_built = Instruction::Instruction15(instruction_15_built);
        // Calling user action here
        self.user_grammar.instruction(&instruction_15_built)?;
        self.push(ASTType::Instruction(instruction_15_built), context);
        Ok(())
    }

    /// Semantic action for production 16:
    ///
    /// instruction: logical_or;
    ///
    fn instruction_16(
        &mut self,
        _logical_or_0: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "instruction_16";
        trace!("{}", self.trace_item_stack(context));
        let logical_or_0 = if let Some(ASTType::LogicalOr(logical_or_0)) = self.pop(context) {
            logical_or_0
        } else {
            return Err(miette!("{}: Expecting ASTType::LogicalOr", context));
        };
        let instruction_16_built = Instruction16Builder::default()
            .logical_or_0(Box::new(logical_or_0))
            .build()
            .into_diagnostic()?;
        let instruction_16_built = Instruction::Instruction16(instruction_16_built);
        // Calling user action here
        self.user_grammar.instruction(&instruction_16_built)?;
        self.push(ASTType::Instruction(instruction_16_built), context);
        Ok(())
    }

    /// Semantic action for production 17:
    ///
    /// assign_item: id assign_op;
    ///
    fn assign_item_17(
        &mut self,
        _id_0: &ParseTreeStackEntry<'t>,
        _assign_op_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "assign_item_17";
        trace!("{}", self.trace_item_stack(context));
        let assign_op_1 = if let Some(ASTType::AssignOp(assign_op_1)) = self.pop(context) {
            assign_op_1
        } else {
            return Err(miette!("{}: Expecting ASTType::AssignOp", context));
        };
        let id_0 = if let Some(ASTType::Id(id_0)) = self.pop(context) {
            id_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Id", context));
        };
        let assign_item_17_built = AssignItemBuilder::default()
            .id_0(Box::new(id_0))
            .assign_op_1(Box::new(assign_op_1))
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.assign_item(&assign_item_17_built)?;
        self.push(ASTType::AssignItem(assign_item_17_built), context);
        Ok(())
    }

    /// Semantic action for production 18:
    ///
    /// assignment: assign_item assignmentList /* Vec */ logical_or;
    ///
    fn assignment_18(
        &mut self,
        _assign_item_0: &ParseTreeStackEntry<'t>,
        _assignment_list_1: &ParseTreeStackEntry<'t>,
        _logical_or_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "assignment_18";
        trace!("{}", self.trace_item_stack(context));
        let logical_or_2 = if let Some(ASTType::LogicalOr(logical_or_2)) = self.pop(context) {
            logical_or_2
        } else {
            return Err(miette!("{}: Expecting ASTType::LogicalOr", context));
        };
        let assignment_list_1 =
            if let Some(ASTType::AssignmentList(mut assignment_list_1)) = self.pop(context) {
                assignment_list_1.reverse();
                assignment_list_1
            } else {
                return Err(miette!("{}: Expecting ASTType::AssignmentList", context));
            };
        let assign_item_0 = if let Some(ASTType::AssignItem(assign_item_0)) = self.pop(context) {
            assign_item_0
        } else {
            return Err(miette!("{}: Expecting ASTType::AssignItem", context));
        };
        let assignment_18_built = AssignmentBuilder::default()
            .assign_item_0(Box::new(assign_item_0))
            .assignment_list_1(assignment_list_1)
            .logical_or_2(Box::new(logical_or_2))
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.assignment(&assignment_18_built)?;
        self.push(ASTType::Assignment(assignment_18_built), context);
        Ok(())
    }

    /// Semantic action for production 19:
    ///
    /// assignmentList: assign_item assignmentList; // Vec<T>::Push
    ///
    fn assignment_list_19(
        &mut self,
        _assign_item_0: &ParseTreeStackEntry<'t>,
        _assignment_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "assignment_list_19";
        trace!("{}", self.trace_item_stack(context));
        let mut assignment_list_1 =
            if let Some(ASTType::AssignmentList(assignment_list_1)) = self.pop(context) {
                assignment_list_1
            } else {
                return Err(miette!("{}: Expecting ASTType::AssignmentList", context));
            };
        let assign_item_0 = if let Some(ASTType::AssignItem(assign_item_0)) = self.pop(context) {
            assign_item_0
        } else {
            return Err(miette!("{}: Expecting ASTType::AssignItem", context));
        };
        let assignment_list_19_built = AssignmentListBuilder::default()
            .assign_item_0(Box::new(assign_item_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        assignment_list_1.push(assignment_list_19_built);
        self.push(ASTType::AssignmentList(assignment_list_1), context);
        Ok(())
    }

    /// Semantic action for production 20:
    ///
    /// assignmentList: ; // Vec<T>::New
    ///
    fn assignment_list_20(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "assignment_list_20";
        trace!("{}", self.trace_item_stack(context));
        let assignment_list_20_built = Vec::new();
        self.push(ASTType::AssignmentList(assignment_list_20_built), context);
        Ok(())
    }

    /// Semantic action for production 21:
    ///
    /// logical_or: logical_and logical_orList /* Vec */;
    ///
    fn logical_or_21(
        &mut self,
        _logical_and_0: &ParseTreeStackEntry<'t>,
        _logical_or_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "logical_or_21";
        trace!("{}", self.trace_item_stack(context));
        let logical_or_list_1 =
            if let Some(ASTType::LogicalOrList(mut logical_or_list_1)) = self.pop(context) {
                logical_or_list_1.reverse();
                logical_or_list_1
            } else {
                return Err(miette!("{}: Expecting ASTType::LogicalOrList", context));
            };
        let logical_and_0 = if let Some(ASTType::LogicalAnd(logical_and_0)) = self.pop(context) {
            logical_and_0
        } else {
            return Err(miette!("{}: Expecting ASTType::LogicalAnd", context));
        };
        let logical_or_21_built = LogicalOrBuilder::default()
            .logical_and_0(Box::new(logical_and_0))
            .logical_or_list_1(logical_or_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.logical_or(&logical_or_21_built)?;
        self.push(ASTType::LogicalOr(logical_or_21_built), context);
        Ok(())
    }

    /// Semantic action for production 22:
    ///
    /// logical_orList: logical_or_op logical_and logical_orList; // Vec<T>::Push
    ///
    fn logical_or_list_22(
        &mut self,
        _logical_or_op_0: &ParseTreeStackEntry<'t>,
        _logical_and_1: &ParseTreeStackEntry<'t>,
        _logical_or_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "logical_or_list_22";
        trace!("{}", self.trace_item_stack(context));
        let mut logical_or_list_2 =
            if let Some(ASTType::LogicalOrList(logical_or_list_2)) = self.pop(context) {
                logical_or_list_2
            } else {
                return Err(miette!("{}: Expecting ASTType::LogicalOrList", context));
            };
        let logical_and_1 = if let Some(ASTType::LogicalAnd(logical_and_1)) = self.pop(context) {
            logical_and_1
        } else {
            return Err(miette!("{}: Expecting ASTType::LogicalAnd", context));
        };
        let logical_or_op_0 = if let Some(ASTType::LogicalOrOp(logical_or_op_0)) = self.pop(context)
        {
            logical_or_op_0
        } else {
            return Err(miette!("{}: Expecting ASTType::LogicalOrOp", context));
        };
        let logical_or_list_22_built = LogicalOrListBuilder::default()
            .logical_and_1(Box::new(logical_and_1))
            .logical_or_op_0(Box::new(logical_or_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        logical_or_list_2.push(logical_or_list_22_built);
        self.push(ASTType::LogicalOrList(logical_or_list_2), context);
        Ok(())
    }

    /// Semantic action for production 23:
    ///
    /// logical_orList: ; // Vec<T>::New
    ///
    fn logical_or_list_23(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "logical_or_list_23";
        trace!("{}", self.trace_item_stack(context));
        let logical_or_list_23_built = Vec::new();
        self.push(ASTType::LogicalOrList(logical_or_list_23_built), context);
        Ok(())
    }

    /// Semantic action for production 24:
    ///
    /// logical_and: bitwise_or logical_andList /* Vec */;
    ///
    fn logical_and_24(
        &mut self,
        _bitwise_or_0: &ParseTreeStackEntry<'t>,
        _logical_and_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "logical_and_24";
        trace!("{}", self.trace_item_stack(context));
        let logical_and_list_1 =
            if let Some(ASTType::LogicalAndList(mut logical_and_list_1)) = self.pop(context) {
                logical_and_list_1.reverse();
                logical_and_list_1
            } else {
                return Err(miette!("{}: Expecting ASTType::LogicalAndList", context));
            };
        let bitwise_or_0 = if let Some(ASTType::BitwiseOr(bitwise_or_0)) = self.pop(context) {
            bitwise_or_0
        } else {
            return Err(miette!("{}: Expecting ASTType::BitwiseOr", context));
        };
        let logical_and_24_built = LogicalAndBuilder::default()
            .bitwise_or_0(Box::new(bitwise_or_0))
            .logical_and_list_1(logical_and_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.logical_and(&logical_and_24_built)?;
        self.push(ASTType::LogicalAnd(logical_and_24_built), context);
        Ok(())
    }

    /// Semantic action for production 25:
    ///
    /// logical_andList: logical_and_op bitwise_or logical_andList; // Vec<T>::Push
    ///
    fn logical_and_list_25(
        &mut self,
        _logical_and_op_0: &ParseTreeStackEntry<'t>,
        _bitwise_or_1: &ParseTreeStackEntry<'t>,
        _logical_and_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "logical_and_list_25";
        trace!("{}", self.trace_item_stack(context));
        let mut logical_and_list_2 =
            if let Some(ASTType::LogicalAndList(logical_and_list_2)) = self.pop(context) {
                logical_and_list_2
            } else {
                return Err(miette!("{}: Expecting ASTType::LogicalAndList", context));
            };
        let bitwise_or_1 = if let Some(ASTType::BitwiseOr(bitwise_or_1)) = self.pop(context) {
            bitwise_or_1
        } else {
            return Err(miette!("{}: Expecting ASTType::BitwiseOr", context));
        };
        let logical_and_op_0 =
            if let Some(ASTType::LogicalAndOp(logical_and_op_0)) = self.pop(context) {
                logical_and_op_0
            } else {
                return Err(miette!("{}: Expecting ASTType::LogicalAndOp", context));
            };
        let logical_and_list_25_built = LogicalAndListBuilder::default()
            .bitwise_or_1(Box::new(bitwise_or_1))
            .logical_and_op_0(Box::new(logical_and_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        logical_and_list_2.push(logical_and_list_25_built);
        self.push(ASTType::LogicalAndList(logical_and_list_2), context);
        Ok(())
    }

    /// Semantic action for production 26:
    ///
    /// logical_andList: ; // Vec<T>::New
    ///
    fn logical_and_list_26(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "logical_and_list_26";
        trace!("{}", self.trace_item_stack(context));
        let logical_and_list_26_built = Vec::new();
        self.push(ASTType::LogicalAndList(logical_and_list_26_built), context);
        Ok(())
    }

    /// Semantic action for production 27:
    ///
    /// bitwise_or: bitwise_and bitwise_orList /* Vec */;
    ///
    fn bitwise_or_27(
        &mut self,
        _bitwise_and_0: &ParseTreeStackEntry<'t>,
        _bitwise_or_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "bitwise_or_27";
        trace!("{}", self.trace_item_stack(context));
        let bitwise_or_list_1 =
            if let Some(ASTType::BitwiseOrList(mut bitwise_or_list_1)) = self.pop(context) {
                bitwise_or_list_1.reverse();
                bitwise_or_list_1
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseOrList", context));
            };
        let bitwise_and_0 = if let Some(ASTType::BitwiseAnd(bitwise_and_0)) = self.pop(context) {
            bitwise_and_0
        } else {
            return Err(miette!("{}: Expecting ASTType::BitwiseAnd", context));
        };
        let bitwise_or_27_built = BitwiseOrBuilder::default()
            .bitwise_and_0(Box::new(bitwise_and_0))
            .bitwise_or_list_1(bitwise_or_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.bitwise_or(&bitwise_or_27_built)?;
        self.push(ASTType::BitwiseOr(bitwise_or_27_built), context);
        Ok(())
    }

    /// Semantic action for production 28:
    ///
    /// bitwise_orList: bitwise_or_op bitwise_and bitwise_orList; // Vec<T>::Push
    ///
    fn bitwise_or_list_28(
        &mut self,
        _bitwise_or_op_0: &ParseTreeStackEntry<'t>,
        _bitwise_and_1: &ParseTreeStackEntry<'t>,
        _bitwise_or_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "bitwise_or_list_28";
        trace!("{}", self.trace_item_stack(context));
        let mut bitwise_or_list_2 =
            if let Some(ASTType::BitwiseOrList(bitwise_or_list_2)) = self.pop(context) {
                bitwise_or_list_2
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseOrList", context));
            };
        let bitwise_and_1 = if let Some(ASTType::BitwiseAnd(bitwise_and_1)) = self.pop(context) {
            bitwise_and_1
        } else {
            return Err(miette!("{}: Expecting ASTType::BitwiseAnd", context));
        };
        let bitwise_or_op_0 = if let Some(ASTType::BitwiseOrOp(bitwise_or_op_0)) = self.pop(context)
        {
            bitwise_or_op_0
        } else {
            return Err(miette!("{}: Expecting ASTType::BitwiseOrOp", context));
        };
        let bitwise_or_list_28_built = BitwiseOrListBuilder::default()
            .bitwise_and_1(Box::new(bitwise_and_1))
            .bitwise_or_op_0(Box::new(bitwise_or_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        bitwise_or_list_2.push(bitwise_or_list_28_built);
        self.push(ASTType::BitwiseOrList(bitwise_or_list_2), context);
        Ok(())
    }

    /// Semantic action for production 29:
    ///
    /// bitwise_orList: ; // Vec<T>::New
    ///
    fn bitwise_or_list_29(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "bitwise_or_list_29";
        trace!("{}", self.trace_item_stack(context));
        let bitwise_or_list_29_built = Vec::new();
        self.push(ASTType::BitwiseOrList(bitwise_or_list_29_built), context);
        Ok(())
    }

    /// Semantic action for production 30:
    ///
    /// bitwise_and: equality bitwise_andList /* Vec */;
    ///
    fn bitwise_and_30(
        &mut self,
        _equality_0: &ParseTreeStackEntry<'t>,
        _bitwise_and_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "bitwise_and_30";
        trace!("{}", self.trace_item_stack(context));
        let bitwise_and_list_1 =
            if let Some(ASTType::BitwiseAndList(mut bitwise_and_list_1)) = self.pop(context) {
                bitwise_and_list_1.reverse();
                bitwise_and_list_1
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseAndList", context));
            };
        let equality_0 = if let Some(ASTType::Equality(equality_0)) = self.pop(context) {
            equality_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Equality", context));
        };
        let bitwise_and_30_built = BitwiseAndBuilder::default()
            .equality_0(Box::new(equality_0))
            .bitwise_and_list_1(bitwise_and_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.bitwise_and(&bitwise_and_30_built)?;
        self.push(ASTType::BitwiseAnd(bitwise_and_30_built), context);
        Ok(())
    }

    /// Semantic action for production 31:
    ///
    /// bitwise_andList: bitwise_and_op equality bitwise_andList; // Vec<T>::Push
    ///
    fn bitwise_and_list_31(
        &mut self,
        _bitwise_and_op_0: &ParseTreeStackEntry<'t>,
        _equality_1: &ParseTreeStackEntry<'t>,
        _bitwise_and_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "bitwise_and_list_31";
        trace!("{}", self.trace_item_stack(context));
        let mut bitwise_and_list_2 =
            if let Some(ASTType::BitwiseAndList(bitwise_and_list_2)) = self.pop(context) {
                bitwise_and_list_2
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseAndList", context));
            };
        let equality_1 = if let Some(ASTType::Equality(equality_1)) = self.pop(context) {
            equality_1
        } else {
            return Err(miette!("{}: Expecting ASTType::Equality", context));
        };
        let bitwise_and_op_0 =
            if let Some(ASTType::BitwiseAndOp(bitwise_and_op_0)) = self.pop(context) {
                bitwise_and_op_0
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseAndOp", context));
            };
        let bitwise_and_list_31_built = BitwiseAndListBuilder::default()
            .equality_1(Box::new(equality_1))
            .bitwise_and_op_0(Box::new(bitwise_and_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        bitwise_and_list_2.push(bitwise_and_list_31_built);
        self.push(ASTType::BitwiseAndList(bitwise_and_list_2), context);
        Ok(())
    }

    /// Semantic action for production 32:
    ///
    /// bitwise_andList: ; // Vec<T>::New
    ///
    fn bitwise_and_list_32(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "bitwise_and_list_32";
        trace!("{}", self.trace_item_stack(context));
        let bitwise_and_list_32_built = Vec::new();
        self.push(ASTType::BitwiseAndList(bitwise_and_list_32_built), context);
        Ok(())
    }

    /// Semantic action for production 33:
    ///
    /// equality: relational equalityList /* Vec */;
    ///
    fn equality_33(
        &mut self,
        _relational_0: &ParseTreeStackEntry<'t>,
        _equality_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "equality_33";
        trace!("{}", self.trace_item_stack(context));
        let equality_list_1 =
            if let Some(ASTType::EqualityList(mut equality_list_1)) = self.pop(context) {
                equality_list_1.reverse();
                equality_list_1
            } else {
                return Err(miette!("{}: Expecting ASTType::EqualityList", context));
            };
        let relational_0 = if let Some(ASTType::Relational(relational_0)) = self.pop(context) {
            relational_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Relational", context));
        };
        let equality_33_built = EqualityBuilder::default()
            .relational_0(Box::new(relational_0))
            .equality_list_1(equality_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.equality(&equality_33_built)?;
        self.push(ASTType::Equality(equality_33_built), context);
        Ok(())
    }

    /// Semantic action for production 34:
    ///
    /// equalityList: equality_op relational equalityList; // Vec<T>::Push
    ///
    fn equality_list_34(
        &mut self,
        _equality_op_0: &ParseTreeStackEntry<'t>,
        _relational_1: &ParseTreeStackEntry<'t>,
        _equality_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "equality_list_34";
        trace!("{}", self.trace_item_stack(context));
        let mut equality_list_2 =
            if let Some(ASTType::EqualityList(equality_list_2)) = self.pop(context) {
                equality_list_2
            } else {
                return Err(miette!("{}: Expecting ASTType::EqualityList", context));
            };
        let relational_1 = if let Some(ASTType::Relational(relational_1)) = self.pop(context) {
            relational_1
        } else {
            return Err(miette!("{}: Expecting ASTType::Relational", context));
        };
        let equality_op_0 = if let Some(ASTType::EqualityOp(equality_op_0)) = self.pop(context) {
            equality_op_0
        } else {
            return Err(miette!("{}: Expecting ASTType::EqualityOp", context));
        };
        let equality_list_34_built = EqualityListBuilder::default()
            .relational_1(Box::new(relational_1))
            .equality_op_0(Box::new(equality_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        equality_list_2.push(equality_list_34_built);
        self.push(ASTType::EqualityList(equality_list_2), context);
        Ok(())
    }

    /// Semantic action for production 35:
    ///
    /// equalityList: ; // Vec<T>::New
    ///
    fn equality_list_35(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "equality_list_35";
        trace!("{}", self.trace_item_stack(context));
        let equality_list_35_built = Vec::new();
        self.push(ASTType::EqualityList(equality_list_35_built), context);
        Ok(())
    }

    /// Semantic action for production 36:
    ///
    /// relational: bitwise_shift relationalList /* Vec */;
    ///
    fn relational_36(
        &mut self,
        _bitwise_shift_0: &ParseTreeStackEntry<'t>,
        _relational_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "relational_36";
        trace!("{}", self.trace_item_stack(context));
        let relational_list_1 =
            if let Some(ASTType::RelationalList(mut relational_list_1)) = self.pop(context) {
                relational_list_1.reverse();
                relational_list_1
            } else {
                return Err(miette!("{}: Expecting ASTType::RelationalList", context));
            };
        let bitwise_shift_0 =
            if let Some(ASTType::BitwiseShift(bitwise_shift_0)) = self.pop(context) {
                bitwise_shift_0
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseShift", context));
            };
        let relational_36_built = RelationalBuilder::default()
            .bitwise_shift_0(Box::new(bitwise_shift_0))
            .relational_list_1(relational_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.relational(&relational_36_built)?;
        self.push(ASTType::Relational(relational_36_built), context);
        Ok(())
    }

    /// Semantic action for production 37:
    ///
    /// relationalList: relational_op bitwise_shift relationalList; // Vec<T>::Push
    ///
    fn relational_list_37(
        &mut self,
        _relational_op_0: &ParseTreeStackEntry<'t>,
        _bitwise_shift_1: &ParseTreeStackEntry<'t>,
        _relational_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "relational_list_37";
        trace!("{}", self.trace_item_stack(context));
        let mut relational_list_2 =
            if let Some(ASTType::RelationalList(relational_list_2)) = self.pop(context) {
                relational_list_2
            } else {
                return Err(miette!("{}: Expecting ASTType::RelationalList", context));
            };
        let bitwise_shift_1 =
            if let Some(ASTType::BitwiseShift(bitwise_shift_1)) = self.pop(context) {
                bitwise_shift_1
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseShift", context));
            };
        let relational_op_0 =
            if let Some(ASTType::RelationalOp(relational_op_0)) = self.pop(context) {
                relational_op_0
            } else {
                return Err(miette!("{}: Expecting ASTType::RelationalOp", context));
            };
        let relational_list_37_built = RelationalListBuilder::default()
            .bitwise_shift_1(Box::new(bitwise_shift_1))
            .relational_op_0(Box::new(relational_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        relational_list_2.push(relational_list_37_built);
        self.push(ASTType::RelationalList(relational_list_2), context);
        Ok(())
    }

    /// Semantic action for production 38:
    ///
    /// relationalList: ; // Vec<T>::New
    ///
    fn relational_list_38(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "relational_list_38";
        trace!("{}", self.trace_item_stack(context));
        let relational_list_38_built = Vec::new();
        self.push(ASTType::RelationalList(relational_list_38_built), context);
        Ok(())
    }

    /// Semantic action for production 39:
    ///
    /// bitwise_shift: summ bitwise_shiftList /* Vec */;
    ///
    fn bitwise_shift_39(
        &mut self,
        _summ_0: &ParseTreeStackEntry<'t>,
        _bitwise_shift_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "bitwise_shift_39";
        trace!("{}", self.trace_item_stack(context));
        let bitwise_shift_list_1 =
            if let Some(ASTType::BitwiseShiftList(mut bitwise_shift_list_1)) = self.pop(context) {
                bitwise_shift_list_1.reverse();
                bitwise_shift_list_1
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseShiftList", context));
            };
        let summ_0 = if let Some(ASTType::Summ(summ_0)) = self.pop(context) {
            summ_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Summ", context));
        };
        let bitwise_shift_39_built = BitwiseShiftBuilder::default()
            .summ_0(Box::new(summ_0))
            .bitwise_shift_list_1(bitwise_shift_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.bitwise_shift(&bitwise_shift_39_built)?;
        self.push(ASTType::BitwiseShift(bitwise_shift_39_built), context);
        Ok(())
    }

    /// Semantic action for production 40:
    ///
    /// bitwise_shiftList: bitwise_shift_op summ bitwise_shiftList; // Vec<T>::Push
    ///
    fn bitwise_shift_list_40(
        &mut self,
        _bitwise_shift_op_0: &ParseTreeStackEntry<'t>,
        _summ_1: &ParseTreeStackEntry<'t>,
        _bitwise_shift_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "bitwise_shift_list_40";
        trace!("{}", self.trace_item_stack(context));
        let mut bitwise_shift_list_2 =
            if let Some(ASTType::BitwiseShiftList(bitwise_shift_list_2)) = self.pop(context) {
                bitwise_shift_list_2
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseShiftList", context));
            };
        let summ_1 = if let Some(ASTType::Summ(summ_1)) = self.pop(context) {
            summ_1
        } else {
            return Err(miette!("{}: Expecting ASTType::Summ", context));
        };
        let bitwise_shift_op_0 =
            if let Some(ASTType::BitwiseShiftOp(bitwise_shift_op_0)) = self.pop(context) {
                bitwise_shift_op_0
            } else {
                return Err(miette!("{}: Expecting ASTType::BitwiseShiftOp", context));
            };
        let bitwise_shift_list_40_built = BitwiseShiftListBuilder::default()
            .summ_1(Box::new(summ_1))
            .bitwise_shift_op_0(Box::new(bitwise_shift_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        bitwise_shift_list_2.push(bitwise_shift_list_40_built);
        self.push(ASTType::BitwiseShiftList(bitwise_shift_list_2), context);
        Ok(())
    }

    /// Semantic action for production 41:
    ///
    /// bitwise_shiftList: ; // Vec<T>::New
    ///
    fn bitwise_shift_list_41(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "bitwise_shift_list_41";
        trace!("{}", self.trace_item_stack(context));
        let bitwise_shift_list_41_built = Vec::new();
        self.push(
            ASTType::BitwiseShiftList(bitwise_shift_list_41_built),
            context,
        );
        Ok(())
    }

    /// Semantic action for production 42:
    ///
    /// add_op: plus;
    ///
    fn add_op_42(
        &mut self,
        _plus_0: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "add_op_42";
        trace!("{}", self.trace_item_stack(context));
        let plus_0 = if let Some(ASTType::Plus(plus_0)) = self.pop(context) {
            plus_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Plus", context));
        };
        let add_op_42_built = AddOp42Builder::default()
            .plus_0(Box::new(plus_0))
            .build()
            .into_diagnostic()?;
        let add_op_42_built = AddOp::AddOp42(add_op_42_built);
        // Calling user action here
        self.user_grammar.add_op(&add_op_42_built)?;
        self.push(ASTType::AddOp(add_op_42_built), context);
        Ok(())
    }

    /// Semantic action for production 43:
    ///
    /// add_op: minus;
    ///
    fn add_op_43(
        &mut self,
        _minus_0: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "add_op_43";
        trace!("{}", self.trace_item_stack(context));
        let minus_0 = if let Some(ASTType::Minus(minus_0)) = self.pop(context) {
            minus_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Minus", context));
        };
        let add_op_43_built = AddOp43Builder::default()
            .minus_0(Box::new(minus_0))
            .build()
            .into_diagnostic()?;
        let add_op_43_built = AddOp::AddOp43(add_op_43_built);
        // Calling user action here
        self.user_grammar.add_op(&add_op_43_built)?;
        self.push(ASTType::AddOp(add_op_43_built), context);
        Ok(())
    }

    /// Semantic action for production 44:
    ///
    /// summ: mult summList /* Vec */;
    ///
    fn summ_44(
        &mut self,
        _mult_0: &ParseTreeStackEntry<'t>,
        _summ_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "summ_44";
        trace!("{}", self.trace_item_stack(context));
        let summ_list_1 = if let Some(ASTType::SummList(mut summ_list_1)) = self.pop(context) {
            summ_list_1.reverse();
            summ_list_1
        } else {
            return Err(miette!("{}: Expecting ASTType::SummList", context));
        };
        let mult_0 = if let Some(ASTType::Mult(mult_0)) = self.pop(context) {
            mult_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Mult", context));
        };
        let summ_44_built = SummBuilder::default()
            .mult_0(Box::new(mult_0))
            .summ_list_1(summ_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.summ(&summ_44_built)?;
        self.push(ASTType::Summ(summ_44_built), context);
        Ok(())
    }

    /// Semantic action for production 45:
    ///
    /// summList: add_op mult summList; // Vec<T>::Push
    ///
    fn summ_list_45(
        &mut self,
        _add_op_0: &ParseTreeStackEntry<'t>,
        _mult_1: &ParseTreeStackEntry<'t>,
        _summ_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "summ_list_45";
        trace!("{}", self.trace_item_stack(context));
        let mut summ_list_2 = if let Some(ASTType::SummList(summ_list_2)) = self.pop(context) {
            summ_list_2
        } else {
            return Err(miette!("{}: Expecting ASTType::SummList", context));
        };
        let mult_1 = if let Some(ASTType::Mult(mult_1)) = self.pop(context) {
            mult_1
        } else {
            return Err(miette!("{}: Expecting ASTType::Mult", context));
        };
        let add_op_0 = if let Some(ASTType::AddOp(add_op_0)) = self.pop(context) {
            add_op_0
        } else {
            return Err(miette!("{}: Expecting ASTType::AddOp", context));
        };
        let summ_list_45_built = SummListBuilder::default()
            .mult_1(Box::new(mult_1))
            .add_op_0(Box::new(add_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        summ_list_2.push(summ_list_45_built);
        self.push(ASTType::SummList(summ_list_2), context);
        Ok(())
    }

    /// Semantic action for production 46:
    ///
    /// summList: ; // Vec<T>::New
    ///
    fn summ_list_46(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "summ_list_46";
        trace!("{}", self.trace_item_stack(context));
        let summ_list_46_built = Vec::new();
        self.push(ASTType::SummList(summ_list_46_built), context);
        Ok(())
    }

    /// Semantic action for production 47:
    ///
    /// mult: power multList /* Vec */;
    ///
    fn mult_47(
        &mut self,
        _power_0: &ParseTreeStackEntry<'t>,
        _mult_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "mult_47";
        trace!("{}", self.trace_item_stack(context));
        let mult_list_1 = if let Some(ASTType::MultList(mut mult_list_1)) = self.pop(context) {
            mult_list_1.reverse();
            mult_list_1
        } else {
            return Err(miette!("{}: Expecting ASTType::MultList", context));
        };
        let power_0 = if let Some(ASTType::Power(power_0)) = self.pop(context) {
            power_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Power", context));
        };
        let mult_47_built = MultBuilder::default()
            .power_0(Box::new(power_0))
            .mult_list_1(mult_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.mult(&mult_47_built)?;
        self.push(ASTType::Mult(mult_47_built), context);
        Ok(())
    }

    /// Semantic action for production 48:
    ///
    /// multList: mult_op power multList; // Vec<T>::Push
    ///
    fn mult_list_48(
        &mut self,
        _mult_op_0: &ParseTreeStackEntry<'t>,
        _power_1: &ParseTreeStackEntry<'t>,
        _mult_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "mult_list_48";
        trace!("{}", self.trace_item_stack(context));
        let mut mult_list_2 = if let Some(ASTType::MultList(mult_list_2)) = self.pop(context) {
            mult_list_2
        } else {
            return Err(miette!("{}: Expecting ASTType::MultList", context));
        };
        let power_1 = if let Some(ASTType::Power(power_1)) = self.pop(context) {
            power_1
        } else {
            return Err(miette!("{}: Expecting ASTType::Power", context));
        };
        let mult_op_0 = if let Some(ASTType::MultOp(mult_op_0)) = self.pop(context) {
            mult_op_0
        } else {
            return Err(miette!("{}: Expecting ASTType::MultOp", context));
        };
        let mult_list_48_built = MultListBuilder::default()
            .power_1(Box::new(power_1))
            .mult_op_0(Box::new(mult_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        mult_list_2.push(mult_list_48_built);
        self.push(ASTType::MultList(mult_list_2), context);
        Ok(())
    }

    /// Semantic action for production 49:
    ///
    /// multList: ; // Vec<T>::New
    ///
    fn mult_list_49(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "mult_list_49";
        trace!("{}", self.trace_item_stack(context));
        let mult_list_49_built = Vec::new();
        self.push(ASTType::MultList(mult_list_49_built), context);
        Ok(())
    }

    /// Semantic action for production 50:
    ///
    /// power: factor powerList /* Vec */;
    ///
    fn power_50(
        &mut self,
        _factor_0: &ParseTreeStackEntry<'t>,
        _power_list_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "power_50";
        trace!("{}", self.trace_item_stack(context));
        let power_list_1 = if let Some(ASTType::PowerList(mut power_list_1)) = self.pop(context) {
            power_list_1.reverse();
            power_list_1
        } else {
            return Err(miette!("{}: Expecting ASTType::PowerList", context));
        };
        let factor_0 = if let Some(ASTType::Factor(factor_0)) = self.pop(context) {
            factor_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Factor", context));
        };
        let power_50_built = PowerBuilder::default()
            .factor_0(Box::new(factor_0))
            .power_list_1(power_list_1)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.power(&power_50_built)?;
        self.push(ASTType::Power(power_50_built), context);
        Ok(())
    }

    /// Semantic action for production 51:
    ///
    /// powerList: pow_op factor powerList; // Vec<T>::Push
    ///
    fn power_list_51(
        &mut self,
        _pow_op_0: &ParseTreeStackEntry<'t>,
        _factor_1: &ParseTreeStackEntry<'t>,
        _power_list_2: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "power_list_51";
        trace!("{}", self.trace_item_stack(context));
        let mut power_list_2 = if let Some(ASTType::PowerList(power_list_2)) = self.pop(context) {
            power_list_2
        } else {
            return Err(miette!("{}: Expecting ASTType::PowerList", context));
        };
        let factor_1 = if let Some(ASTType::Factor(factor_1)) = self.pop(context) {
            factor_1
        } else {
            return Err(miette!("{}: Expecting ASTType::Factor", context));
        };
        let pow_op_0 = if let Some(ASTType::PowOp(pow_op_0)) = self.pop(context) {
            pow_op_0
        } else {
            return Err(miette!("{}: Expecting ASTType::PowOp", context));
        };
        let power_list_51_built = PowerListBuilder::default()
            .factor_1(Box::new(factor_1))
            .pow_op_0(Box::new(pow_op_0))
            .build()
            .into_diagnostic()?;
        // Add an element to the vector
        power_list_2.push(power_list_51_built);
        self.push(ASTType::PowerList(power_list_2), context);
        Ok(())
    }

    /// Semantic action for production 52:
    ///
    /// powerList: ; // Vec<T>::New
    ///
    fn power_list_52(&mut self, _parse_tree: &Tree<ParseTreeType<'t>>) -> Result<()> {
        let context = "power_list_52";
        trace!("{}", self.trace_item_stack(context));
        let power_list_52_built = Vec::new();
        self.push(ASTType::PowerList(power_list_52_built), context);
        Ok(())
    }

    /// Semantic action for production 53:
    ///
    /// negate: minus;
    ///
    fn negate_53(
        &mut self,
        _minus_0: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "negate_53";
        trace!("{}", self.trace_item_stack(context));
        let minus_0 = if let Some(ASTType::Minus(minus_0)) = self.pop(context) {
            minus_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Minus", context));
        };
        let negate_53_built = NegateBuilder::default()
            .minus_0(Box::new(minus_0))
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.negate(&negate_53_built)?;
        self.push(ASTType::Negate(negate_53_built), context);
        Ok(())
    }

    /// Semantic action for production 54:
    ///
    /// factor: number;
    ///
    fn factor_54(
        &mut self,
        _number_0: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "factor_54";
        trace!("{}", self.trace_item_stack(context));
        let number_0 = if let Some(ASTType::Number(number_0)) = self.pop(context) {
            number_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Number", context));
        };
        let factor_54_built = Factor54Builder::default()
            .number_0(Box::new(number_0))
            .build()
            .into_diagnostic()?;
        let factor_54_built = Factor::Factor54(factor_54_built);
        // Calling user action here
        self.user_grammar.factor(&factor_54_built)?;
        self.push(ASTType::Factor(factor_54_built), context);
        Ok(())
    }

    /// Semantic action for production 55:
    ///
    /// factor: idref;
    ///
    fn factor_55(
        &mut self,
        _idref_0: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "factor_55";
        trace!("{}", self.trace_item_stack(context));
        let idref_0 = if let Some(ASTType::Idref(idref_0)) = self.pop(context) {
            idref_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Idref", context));
        };
        let factor_55_built = Factor55Builder::default()
            .idref_0(Box::new(idref_0))
            .build()
            .into_diagnostic()?;
        let factor_55_built = Factor::Factor55(factor_55_built);
        // Calling user action here
        self.user_grammar.factor(&factor_55_built)?;
        self.push(ASTType::Factor(factor_55_built), context);
        Ok(())
    }

    /// Semantic action for production 56:
    ///
    /// factor: negate factor;
    ///
    fn factor_56(
        &mut self,
        _negate_0: &ParseTreeStackEntry<'t>,
        _factor_1: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "factor_56";
        trace!("{}", self.trace_item_stack(context));
        let factor_1 = if let Some(ASTType::Factor(factor_1)) = self.pop(context) {
            factor_1
        } else {
            return Err(miette!("{}: Expecting ASTType::Factor", context));
        };
        let negate_0 = if let Some(ASTType::Negate(negate_0)) = self.pop(context) {
            negate_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Negate", context));
        };
        let factor_56_built = Factor56Builder::default()
            .negate_0(Box::new(negate_0))
            .factor_1(Box::new(factor_1))
            .build()
            .into_diagnostic()?;
        let factor_56_built = Factor::Factor56(factor_56_built);
        // Calling user action here
        self.user_grammar.factor(&factor_56_built)?;
        self.push(ASTType::Factor(factor_56_built), context);
        Ok(())
    }

    /// Semantic action for production 57:
    ///
    /// factor: "\(" logical_or "\)";
    ///
    fn factor_57(
        &mut self,
        l_paren_0: &ParseTreeStackEntry<'t>,
        _logical_or_1: &ParseTreeStackEntry<'t>,
        r_paren_2: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "factor_57";
        trace!("{}", self.trace_item_stack(context));
        let l_paren_0 = *l_paren_0.token(parse_tree)?;
        let r_paren_2 = *r_paren_2.token(parse_tree)?;
        let logical_or_1 = if let Some(ASTType::LogicalOr(logical_or_1)) = self.pop(context) {
            logical_or_1
        } else {
            return Err(miette!("{}: Expecting ASTType::LogicalOr", context));
        };
        let factor_57_built = Factor57Builder::default()
            .l_paren_0(l_paren_0)
            .logical_or_1(Box::new(logical_or_1))
            .r_paren_2(r_paren_2)
            .build()
            .into_diagnostic()?;
        let factor_57_built = Factor::Factor57(factor_57_built);
        // Calling user action here
        self.user_grammar.factor(&factor_57_built)?;
        self.push(ASTType::Factor(factor_57_built), context);
        Ok(())
    }

    /// Semantic action for production 58:
    ///
    /// number: "0|[1-9][0-9]*";
    ///
    fn number_58(
        &mut self,
        number_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "number_58";
        trace!("{}", self.trace_item_stack(context));
        let number_0 = *number_0.token(parse_tree)?;
        let number_58_built = NumberBuilder::default()
            .number_0(number_0)
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.number(&number_58_built)?;
        self.push(ASTType::Number(number_58_built), context);
        Ok(())
    }

    /// Semantic action for production 59:
    ///
    /// idref: id;
    ///
    fn idref_59(
        &mut self,
        _id_0: &ParseTreeStackEntry<'t>,
        _parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "idref_59";
        trace!("{}", self.trace_item_stack(context));
        let id_0 = if let Some(ASTType::Id(id_0)) = self.pop(context) {
            id_0
        } else {
            return Err(miette!("{}: Expecting ASTType::Id", context));
        };
        let idref_59_built = IdrefBuilder::default()
            .id_0(Box::new(id_0))
            .build()
            .into_diagnostic()?;
        // Calling user action here
        self.user_grammar.idref(&idref_59_built)?;
        self.push(ASTType::Idref(idref_59_built), context);
        Ok(())
    }

    /// Semantic action for production 60:
    ///
    /// id: "[a-zA-Z_][a-zA-Z0-9_]*";
    ///
    fn id_60(
        &mut self,
        id_0: &ParseTreeStackEntry<'t>,
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        let context = "id_60";
        trace!("{}", self.trace_item_stack(context));
        let id_0 = *id_0.token(parse_tree)?;
        let id_60_built = IdBuilder::default().id_0(id_0).build().into_diagnostic()?;
        // Calling user action here
        self.user_grammar.id(&id_60_built)?;
        self.push(ASTType::Id(id_60_built), context);
        Ok(())
    }
}

impl<'t> UserActionsTrait<'t> for CalcGrammarAuto<'t, '_> {
    ///
    /// Initialize the user with additional information.
    /// This function is called by the parser before parsing starts.
    /// Is is used to transport necessary data from parser to user.
    ///
    fn init(&mut self, file_name: &Path) {
        self.file_name = file_name.to_owned();
        self.user_grammar.init(file_name);
    }

    ///
    /// This function is implemented automatically for the user's item CalcGrammar.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeStackEntry<'t>],
        parse_tree: &Tree<ParseTreeType<'t>>,
    ) -> Result<()> {
        match prod_num {
            0 => self.calc_0(&children[0], parse_tree),
            1 => self.calc_list_1(&children[0], &children[1], &children[2], parse_tree),
            2 => self.calc_list_2(parse_tree),
            3 => self.equality_op_3(&children[0], parse_tree),
            4 => self.assign_op_4(&children[0], parse_tree),
            5 => self.logical_or_op_5(&children[0], parse_tree),
            6 => self.logical_and_op_6(&children[0], parse_tree),
            7 => self.bitwise_or_op_7(&children[0], parse_tree),
            8 => self.bitwise_and_op_8(&children[0], parse_tree),
            9 => self.bitwise_shift_op_9(&children[0], parse_tree),
            10 => self.relational_op_10(&children[0], parse_tree),
            11 => self.plus_11(&children[0], parse_tree),
            12 => self.minus_12(&children[0], parse_tree),
            13 => self.pow_op_13(&children[0], parse_tree),
            14 => self.mult_op_14(&children[0], parse_tree),
            15 => self.instruction_15(&children[0], parse_tree),
            16 => self.instruction_16(&children[0], parse_tree),
            17 => self.assign_item_17(&children[0], &children[1], parse_tree),
            18 => self.assignment_18(&children[0], &children[1], &children[2], parse_tree),
            19 => self.assignment_list_19(&children[0], &children[1], parse_tree),
            20 => self.assignment_list_20(parse_tree),
            21 => self.logical_or_21(&children[0], &children[1], parse_tree),
            22 => self.logical_or_list_22(&children[0], &children[1], &children[2], parse_tree),
            23 => self.logical_or_list_23(parse_tree),
            24 => self.logical_and_24(&children[0], &children[1], parse_tree),
            25 => self.logical_and_list_25(&children[0], &children[1], &children[2], parse_tree),
            26 => self.logical_and_list_26(parse_tree),
            27 => self.bitwise_or_27(&children[0], &children[1], parse_tree),
            28 => self.bitwise_or_list_28(&children[0], &children[1], &children[2], parse_tree),
            29 => self.bitwise_or_list_29(parse_tree),
            30 => self.bitwise_and_30(&children[0], &children[1], parse_tree),
            31 => self.bitwise_and_list_31(&children[0], &children[1], &children[2], parse_tree),
            32 => self.bitwise_and_list_32(parse_tree),
            33 => self.equality_33(&children[0], &children[1], parse_tree),
            34 => self.equality_list_34(&children[0], &children[1], &children[2], parse_tree),
            35 => self.equality_list_35(parse_tree),
            36 => self.relational_36(&children[0], &children[1], parse_tree),
            37 => self.relational_list_37(&children[0], &children[1], &children[2], parse_tree),
            38 => self.relational_list_38(parse_tree),
            39 => self.bitwise_shift_39(&children[0], &children[1], parse_tree),
            40 => self.bitwise_shift_list_40(&children[0], &children[1], &children[2], parse_tree),
            41 => self.bitwise_shift_list_41(parse_tree),
            42 => self.add_op_42(&children[0], parse_tree),
            43 => self.add_op_43(&children[0], parse_tree),
            44 => self.summ_44(&children[0], &children[1], parse_tree),
            45 => self.summ_list_45(&children[0], &children[1], &children[2], parse_tree),
            46 => self.summ_list_46(parse_tree),
            47 => self.mult_47(&children[0], &children[1], parse_tree),
            48 => self.mult_list_48(&children[0], &children[1], &children[2], parse_tree),
            49 => self.mult_list_49(parse_tree),
            50 => self.power_50(&children[0], &children[1], parse_tree),
            51 => self.power_list_51(&children[0], &children[1], &children[2], parse_tree),
            52 => self.power_list_52(parse_tree),
            53 => self.negate_53(&children[0], parse_tree),
            54 => self.factor_54(&children[0], parse_tree),
            55 => self.factor_55(&children[0], parse_tree),
            56 => self.factor_56(&children[0], &children[1], parse_tree),
            57 => self.factor_57(&children[0], &children[1], &children[2], parse_tree),
            58 => self.number_58(&children[0], parse_tree),
            59 => self.idref_59(&children[0], parse_tree),
            60 => self.id_60(&children[0], parse_tree),
            _ => Err(miette!("Unhandled production number: {}", prod_num)),
        }
    }
}
