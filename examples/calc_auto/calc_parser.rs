// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use id_tree::Tree;
use miette::Result;
use parol_runtime::lexer::{TokenStream, Tokenizer};
#[allow(unused_imports)]
use parol_runtime::parser::{
    DFATransition, LLKParser, LookaheadDFA, ParseTreeType, ParseType, Production,
};
use std::cell::RefCell;
use std::path::Path;

use crate::calc_grammar::CalcGrammar;
use crate::calc_grammar_trait::CalcGrammarAuto;

use parol_runtime::lexer::tokenizer::{
    ERROR_TOKEN, NEW_LINE_TOKEN, UNMATCHABLE_TOKEN, WHITESPACE_TOKEN,
};

pub const TERMINALS: &[&str; 23] = &[
    /*  0 */ UNMATCHABLE_TOKEN,
    /*  1 */ UNMATCHABLE_TOKEN,
    /*  2 */ UNMATCHABLE_TOKEN,
    /*  3 */ UNMATCHABLE_TOKEN,
    /*  4 */ UNMATCHABLE_TOKEN,
    /*  5 */ r###";"###,
    /*  6 */ r###"==|!="###,
    /*  7 */ r###"(\+|-|\*|/|%|<<|>>|&|\^|\|)?="###,
    /*  8 */ r###"\|\|"###,
    /*  9 */ r###"&&"###,
    /* 10 */ r###"\|"###,
    /* 11 */ r###"&"###,
    /* 12 */ r###"<<|>>"###,
    /* 13 */ r###"<=|<|>=|>"###,
    /* 14 */ r###"\+"###,
    /* 15 */ r###"-"###,
    /* 16 */ r###"\*\*"###,
    /* 17 */ r###"\*|/|%"###,
    /* 18 */ r###"\("###,
    /* 19 */ r###"\)"###,
    /* 20 */ r###"0|[1-9][0-9]*"###,
    /* 21 */ r###"[a-zA-Z_][a-zA-Z0-9_]*"###,
    /* 22 */ ERROR_TOKEN,
];

pub const TERMINAL_NAMES: &[&str; 23] = &[
    /*  0 */ "EndOfInput",
    /*  1 */ "Newline",
    /*  2 */ "Whitespace",
    /*  3 */ "LineComment",
    /*  4 */ "BlockComment",
    /*  5 */ "Semicolon",
    /*  6 */ "EqualityOp",
    /*  7 */ "AssignOp",
    /*  8 */ "LogicalOrOp",
    /*  9 */ "LogicalAndOp",
    /* 10 */ "BitwiseOrOp",
    /* 11 */ "BitwiseAndOp",
    /* 12 */ "BitwiseShiftOp",
    /* 13 */ "RelationalOp",
    /* 14 */ "Plus",
    /* 15 */ "Minus",
    /* 16 */ "PowOp",
    /* 17 */ "MultOp",
    /* 18 */ "LParen",
    /* 19 */ "RParen",
    /* 20 */ "Number",
    /* 21 */ "Id",
    /* 22 */ "Error",
];

/* SCANNER_0: "INITIAL" */
const SCANNER_0: (&[&str; 5], &[usize; 17]) = (
    &[
        /*  0 */ UNMATCHABLE_TOKEN,
        /*  1 */ NEW_LINE_TOKEN,
        /*  2 */ WHITESPACE_TOKEN,
        /*  3 */ r###"(//.*(\r\n|\r|\n|$))"###,
        /*  4 */ r###"((?ms)/\*.*?\*/)"###,
    ],
    &[
        5,  /* Semicolon */
        6,  /* EqualityOp */
        7,  /* AssignOp */
        8,  /* LogicalOrOp */
        9,  /* LogicalAndOp */
        10, /* BitwiseOrOp */
        11, /* BitwiseAndOp */
        12, /* BitwiseShiftOp */
        13, /* RelationalOp */
        14, /* Plus */
        15, /* Minus */
        16, /* PowOp */
        17, /* MultOp */
        18, /* LParen */
        19, /* RParen */
        20, /* Number */
        21, /* Id */
    ],
);

const MAX_K: usize = 2;

pub const NON_TERMINALS: &[&str; 44] = &[
    /*  0 */ "add_op",
    /*  1 */ "assign_item",
    /*  2 */ "assign_op",
    /*  3 */ "assignment",
    /*  4 */ "assignmentList",
    /*  5 */ "bitwise_and",
    /*  6 */ "bitwise_andList",
    /*  7 */ "bitwise_and_op",
    /*  8 */ "bitwise_or",
    /*  9 */ "bitwise_orList",
    /* 10 */ "bitwise_or_op",
    /* 11 */ "bitwise_shift",
    /* 12 */ "bitwise_shiftList",
    /* 13 */ "bitwise_shift_op",
    /* 14 */ "calc",
    /* 15 */ "calcList",
    /* 16 */ "equality",
    /* 17 */ "equalityList",
    /* 18 */ "equality_op",
    /* 19 */ "factor",
    /* 20 */ "id",
    /* 21 */ "idref",
    /* 22 */ "instruction",
    /* 23 */ "logical_and",
    /* 24 */ "logical_andList",
    /* 25 */ "logical_and_op",
    /* 26 */ "logical_or",
    /* 27 */ "logical_orList",
    /* 28 */ "logical_or_op",
    /* 29 */ "minus",
    /* 30 */ "mult",
    /* 31 */ "multList",
    /* 32 */ "mult_op",
    /* 33 */ "negate",
    /* 34 */ "number",
    /* 35 */ "plus",
    /* 36 */ "pow_op",
    /* 37 */ "power",
    /* 38 */ "powerList",
    /* 39 */ "relational",
    /* 40 */ "relationalList",
    /* 41 */ "relational_op",
    /* 42 */ "summ",
    /* 43 */ "summList",
];

pub const LOOKAHEAD_AUTOMATA: &[LookaheadDFA; 44] = &[
    /* 0 - "add_op" */
    LookaheadDFA {
        states: &[None, Some(42), Some(43)],
        transitions: &[DFATransition(0, 14, 1), DFATransition(0, 15, 2)],
        k: 1,
    },
    /* 1 - "assign_item" */
    LookaheadDFA {
        states: &[Some(17)],
        transitions: &[],
        k: 0,
    },
    /* 2 - "assign_op" */
    LookaheadDFA {
        states: &[Some(4)],
        transitions: &[],
        k: 0,
    },
    /* 3 - "assignment" */
    LookaheadDFA {
        states: &[Some(18)],
        transitions: &[],
        k: 0,
    },
    /* 4 - "assignmentList" */
    LookaheadDFA {
        states: &[None, None, Some(19), None, None, None, Some(20)],
        transitions: &[
            DFATransition(0, 15, 3),
            DFATransition(0, 18, 4),
            DFATransition(0, 20, 5),
            DFATransition(0, 21, 1),
            DFATransition(1, 5, 6),
            DFATransition(1, 6, 6),
            DFATransition(1, 7, 2),
            DFATransition(1, 8, 6),
            DFATransition(1, 9, 6),
            DFATransition(1, 10, 6),
            DFATransition(1, 11, 6),
            DFATransition(1, 12, 6),
            DFATransition(1, 13, 6),
            DFATransition(1, 14, 6),
            DFATransition(1, 15, 6),
            DFATransition(1, 16, 6),
            DFATransition(1, 17, 6),
            DFATransition(3, 15, 6),
            DFATransition(3, 18, 6),
            DFATransition(3, 20, 6),
            DFATransition(3, 21, 6),
            DFATransition(4, 15, 6),
            DFATransition(4, 18, 6),
            DFATransition(4, 20, 6),
            DFATransition(4, 21, 6),
            DFATransition(5, 5, 6),
            DFATransition(5, 6, 6),
            DFATransition(5, 8, 6),
            DFATransition(5, 9, 6),
            DFATransition(5, 10, 6),
            DFATransition(5, 11, 6),
            DFATransition(5, 12, 6),
            DFATransition(5, 13, 6),
            DFATransition(5, 14, 6),
            DFATransition(5, 15, 6),
            DFATransition(5, 16, 6),
            DFATransition(5, 17, 6),
        ],
        k: 2,
    },
    /* 5 - "bitwise_and" */
    LookaheadDFA {
        states: &[Some(30)],
        transitions: &[],
        k: 0,
    },
    /* 6 - "bitwise_andList" */
    LookaheadDFA {
        states: &[None, Some(31), Some(32)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 1),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 7 - "bitwise_and_op" */
    LookaheadDFA {
        states: &[Some(8)],
        transitions: &[],
        k: 0,
    },
    /* 8 - "bitwise_or" */
    LookaheadDFA {
        states: &[Some(27)],
        transitions: &[],
        k: 0,
    },
    /* 9 - "bitwise_orList" */
    LookaheadDFA {
        states: &[None, Some(28), Some(29)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 1),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 10 - "bitwise_or_op" */
    LookaheadDFA {
        states: &[Some(7)],
        transitions: &[],
        k: 0,
    },
    /* 11 - "bitwise_shift" */
    LookaheadDFA {
        states: &[Some(39)],
        transitions: &[],
        k: 0,
    },
    /* 12 - "bitwise_shiftList" */
    LookaheadDFA {
        states: &[None, Some(40), Some(41)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 6, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 1),
            DFATransition(0, 13, 2),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 13 - "bitwise_shift_op" */
    LookaheadDFA {
        states: &[Some(9)],
        transitions: &[],
        k: 0,
    },
    /* 14 - "calc" */
    LookaheadDFA {
        states: &[Some(0)],
        transitions: &[],
        k: 0,
    },
    /* 15 - "calcList" */
    LookaheadDFA {
        states: &[None, Some(1), Some(2)],
        transitions: &[
            DFATransition(0, 0, 2),
            DFATransition(0, 15, 1),
            DFATransition(0, 18, 1),
            DFATransition(0, 20, 1),
            DFATransition(0, 21, 1),
        ],
        k: 1,
    },
    /* 16 - "equality" */
    LookaheadDFA {
        states: &[Some(33)],
        transitions: &[],
        k: 0,
    },
    /* 17 - "equalityList" */
    LookaheadDFA {
        states: &[None, Some(34), Some(35)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 6, 1),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 18 - "equality_op" */
    LookaheadDFA {
        states: &[Some(3)],
        transitions: &[],
        k: 0,
    },
    /* 19 - "factor" */
    LookaheadDFA {
        states: &[None, Some(54), Some(55), Some(56), Some(57)],
        transitions: &[
            DFATransition(0, 15, 3),
            DFATransition(0, 18, 4),
            DFATransition(0, 20, 1),
            DFATransition(0, 21, 2),
        ],
        k: 1,
    },
    /* 20 - "id" */
    LookaheadDFA {
        states: &[Some(60)],
        transitions: &[],
        k: 0,
    },
    /* 21 - "idref" */
    LookaheadDFA {
        states: &[Some(59)],
        transitions: &[],
        k: 0,
    },
    /* 22 - "instruction" */
    LookaheadDFA {
        states: &[None, None, Some(15), None, None, None, Some(16)],
        transitions: &[
            DFATransition(0, 15, 3),
            DFATransition(0, 18, 4),
            DFATransition(0, 20, 5),
            DFATransition(0, 21, 1),
            DFATransition(1, 5, 6),
            DFATransition(1, 6, 6),
            DFATransition(1, 7, 2),
            DFATransition(1, 8, 6),
            DFATransition(1, 9, 6),
            DFATransition(1, 10, 6),
            DFATransition(1, 11, 6),
            DFATransition(1, 12, 6),
            DFATransition(1, 13, 6),
            DFATransition(1, 14, 6),
            DFATransition(1, 15, 6),
            DFATransition(1, 16, 6),
            DFATransition(1, 17, 6),
            DFATransition(3, 15, 6),
            DFATransition(3, 18, 6),
            DFATransition(3, 20, 6),
            DFATransition(3, 21, 6),
            DFATransition(4, 15, 6),
            DFATransition(4, 18, 6),
            DFATransition(4, 20, 6),
            DFATransition(4, 21, 6),
            DFATransition(5, 5, 6),
            DFATransition(5, 6, 6),
            DFATransition(5, 8, 6),
            DFATransition(5, 9, 6),
            DFATransition(5, 10, 6),
            DFATransition(5, 11, 6),
            DFATransition(5, 12, 6),
            DFATransition(5, 13, 6),
            DFATransition(5, 14, 6),
            DFATransition(5, 15, 6),
            DFATransition(5, 16, 6),
            DFATransition(5, 17, 6),
        ],
        k: 2,
    },
    /* 23 - "logical_and" */
    LookaheadDFA {
        states: &[Some(24)],
        transitions: &[],
        k: 0,
    },
    /* 24 - "logical_andList" */
    LookaheadDFA {
        states: &[None, Some(25), Some(26)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 1),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 25 - "logical_and_op" */
    LookaheadDFA {
        states: &[Some(6)],
        transitions: &[],
        k: 0,
    },
    /* 26 - "logical_or" */
    LookaheadDFA {
        states: &[Some(21)],
        transitions: &[],
        k: 0,
    },
    /* 27 - "logical_orList" */
    LookaheadDFA {
        states: &[None, Some(22), Some(23)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 8, 1),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 28 - "logical_or_op" */
    LookaheadDFA {
        states: &[Some(5)],
        transitions: &[],
        k: 0,
    },
    /* 29 - "minus" */
    LookaheadDFA {
        states: &[Some(12)],
        transitions: &[],
        k: 0,
    },
    /* 30 - "mult" */
    LookaheadDFA {
        states: &[Some(47)],
        transitions: &[],
        k: 0,
    },
    /* 31 - "multList" */
    LookaheadDFA {
        states: &[None, Some(48), Some(49)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 6, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 17, 1),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 32 - "mult_op" */
    LookaheadDFA {
        states: &[Some(14)],
        transitions: &[],
        k: 0,
    },
    /* 33 - "negate" */
    LookaheadDFA {
        states: &[Some(53)],
        transitions: &[],
        k: 0,
    },
    /* 34 - "number" */
    LookaheadDFA {
        states: &[Some(58)],
        transitions: &[],
        k: 0,
    },
    /* 35 - "plus" */
    LookaheadDFA {
        states: &[Some(11)],
        transitions: &[],
        k: 0,
    },
    /* 36 - "pow_op" */
    LookaheadDFA {
        states: &[Some(13)],
        transitions: &[],
        k: 0,
    },
    /* 37 - "power" */
    LookaheadDFA {
        states: &[Some(50)],
        transitions: &[],
        k: 0,
    },
    /* 38 - "powerList" */
    LookaheadDFA {
        states: &[None, Some(51), Some(52)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 6, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 2),
            DFATransition(0, 15, 2),
            DFATransition(0, 16, 1),
            DFATransition(0, 17, 2),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 39 - "relational" */
    LookaheadDFA {
        states: &[Some(36)],
        transitions: &[],
        k: 0,
    },
    /* 40 - "relationalList" */
    LookaheadDFA {
        states: &[None, Some(37), Some(38)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 6, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 13, 1),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
    /* 41 - "relational_op" */
    LookaheadDFA {
        states: &[Some(10)],
        transitions: &[],
        k: 0,
    },
    /* 42 - "summ" */
    LookaheadDFA {
        states: &[Some(44)],
        transitions: &[],
        k: 0,
    },
    /* 43 - "summList" */
    LookaheadDFA {
        states: &[None, Some(45), Some(46)],
        transitions: &[
            DFATransition(0, 5, 2),
            DFATransition(0, 6, 2),
            DFATransition(0, 8, 2),
            DFATransition(0, 9, 2),
            DFATransition(0, 10, 2),
            DFATransition(0, 11, 2),
            DFATransition(0, 12, 2),
            DFATransition(0, 13, 2),
            DFATransition(0, 14, 1),
            DFATransition(0, 15, 1),
            DFATransition(0, 19, 2),
        ],
        k: 1,
    },
];

pub const PRODUCTIONS: &[Production; 61] = &[
    // 0 - calc: calcList /* Vec */;
    Production {
        lhs: 14,
        production: &[ParseType::N(15)],
    },
    // 1 - calcList: instruction ";" /* Clipped */ calcList;
    Production {
        lhs: 15,
        production: &[ParseType::N(15), ParseType::T(5), ParseType::N(22)],
    },
    // 2 - calcList: ;
    Production {
        lhs: 15,
        production: &[],
    },
    // 3 - equality_op: "==|!=";
    Production {
        lhs: 18,
        production: &[ParseType::T(6)],
    },
    // 4 - assign_op: "(\+|-|\*|/|%|<<|>>|&|\^|\|)?=";
    Production {
        lhs: 2,
        production: &[ParseType::T(7)],
    },
    // 5 - logical_or_op: "\|\|";
    Production {
        lhs: 28,
        production: &[ParseType::T(8)],
    },
    // 6 - logical_and_op: "&&";
    Production {
        lhs: 25,
        production: &[ParseType::T(9)],
    },
    // 7 - bitwise_or_op: "\|";
    Production {
        lhs: 10,
        production: &[ParseType::T(10)],
    },
    // 8 - bitwise_and_op: "&";
    Production {
        lhs: 7,
        production: &[ParseType::T(11)],
    },
    // 9 - bitwise_shift_op: "<<|>>";
    Production {
        lhs: 13,
        production: &[ParseType::T(12)],
    },
    // 10 - relational_op: "<=|<|>=|>";
    Production {
        lhs: 41,
        production: &[ParseType::T(13)],
    },
    // 11 - plus: "\+";
    Production {
        lhs: 35,
        production: &[ParseType::T(14)],
    },
    // 12 - minus: "-";
    Production {
        lhs: 29,
        production: &[ParseType::T(15)],
    },
    // 13 - pow_op: "\*\*";
    Production {
        lhs: 36,
        production: &[ParseType::T(16)],
    },
    // 14 - mult_op: "\*|/|%";
    Production {
        lhs: 32,
        production: &[ParseType::T(17)],
    },
    // 15 - instruction: assignment;
    Production {
        lhs: 22,
        production: &[ParseType::N(3)],
    },
    // 16 - instruction: logical_or;
    Production {
        lhs: 22,
        production: &[ParseType::N(26)],
    },
    // 17 - assign_item: id assign_op;
    Production {
        lhs: 1,
        production: &[ParseType::N(2), ParseType::N(20)],
    },
    // 18 - assignment: assign_item assignmentList /* Vec */ logical_or;
    Production {
        lhs: 3,
        production: &[ParseType::N(26), ParseType::N(4), ParseType::N(1)],
    },
    // 19 - assignmentList: assign_item assignmentList;
    Production {
        lhs: 4,
        production: &[ParseType::N(4), ParseType::N(1)],
    },
    // 20 - assignmentList: ;
    Production {
        lhs: 4,
        production: &[],
    },
    // 21 - logical_or: logical_and logical_orList /* Vec */;
    Production {
        lhs: 26,
        production: &[ParseType::N(27), ParseType::N(23)],
    },
    // 22 - logical_orList: logical_or_op logical_and logical_orList;
    Production {
        lhs: 27,
        production: &[ParseType::N(27), ParseType::N(23), ParseType::N(28)],
    },
    // 23 - logical_orList: ;
    Production {
        lhs: 27,
        production: &[],
    },
    // 24 - logical_and: bitwise_or logical_andList /* Vec */;
    Production {
        lhs: 23,
        production: &[ParseType::N(24), ParseType::N(8)],
    },
    // 25 - logical_andList: logical_and_op bitwise_or logical_andList;
    Production {
        lhs: 24,
        production: &[ParseType::N(24), ParseType::N(8), ParseType::N(25)],
    },
    // 26 - logical_andList: ;
    Production {
        lhs: 24,
        production: &[],
    },
    // 27 - bitwise_or: bitwise_and bitwise_orList /* Vec */;
    Production {
        lhs: 8,
        production: &[ParseType::N(9), ParseType::N(5)],
    },
    // 28 - bitwise_orList: bitwise_or_op bitwise_and bitwise_orList;
    Production {
        lhs: 9,
        production: &[ParseType::N(9), ParseType::N(5), ParseType::N(10)],
    },
    // 29 - bitwise_orList: ;
    Production {
        lhs: 9,
        production: &[],
    },
    // 30 - bitwise_and: equality bitwise_andList /* Vec */;
    Production {
        lhs: 5,
        production: &[ParseType::N(6), ParseType::N(16)],
    },
    // 31 - bitwise_andList: bitwise_and_op equality bitwise_andList;
    Production {
        lhs: 6,
        production: &[ParseType::N(6), ParseType::N(16), ParseType::N(7)],
    },
    // 32 - bitwise_andList: ;
    Production {
        lhs: 6,
        production: &[],
    },
    // 33 - equality: relational equalityList /* Vec */;
    Production {
        lhs: 16,
        production: &[ParseType::N(17), ParseType::N(39)],
    },
    // 34 - equalityList: equality_op relational equalityList;
    Production {
        lhs: 17,
        production: &[ParseType::N(17), ParseType::N(39), ParseType::N(18)],
    },
    // 35 - equalityList: ;
    Production {
        lhs: 17,
        production: &[],
    },
    // 36 - relational: bitwise_shift relationalList /* Vec */;
    Production {
        lhs: 39,
        production: &[ParseType::N(40), ParseType::N(11)],
    },
    // 37 - relationalList: relational_op bitwise_shift relationalList;
    Production {
        lhs: 40,
        production: &[ParseType::N(40), ParseType::N(11), ParseType::N(41)],
    },
    // 38 - relationalList: ;
    Production {
        lhs: 40,
        production: &[],
    },
    // 39 - bitwise_shift: summ bitwise_shiftList /* Vec */;
    Production {
        lhs: 11,
        production: &[ParseType::N(12), ParseType::N(42)],
    },
    // 40 - bitwise_shiftList: bitwise_shift_op summ bitwise_shiftList;
    Production {
        lhs: 12,
        production: &[ParseType::N(12), ParseType::N(42), ParseType::N(13)],
    },
    // 41 - bitwise_shiftList: ;
    Production {
        lhs: 12,
        production: &[],
    },
    // 42 - add_op: plus;
    Production {
        lhs: 0,
        production: &[ParseType::N(35)],
    },
    // 43 - add_op: minus;
    Production {
        lhs: 0,
        production: &[ParseType::N(29)],
    },
    // 44 - summ: mult summList /* Vec */;
    Production {
        lhs: 42,
        production: &[ParseType::N(43), ParseType::N(30)],
    },
    // 45 - summList: add_op mult summList;
    Production {
        lhs: 43,
        production: &[ParseType::N(43), ParseType::N(30), ParseType::N(0)],
    },
    // 46 - summList: ;
    Production {
        lhs: 43,
        production: &[],
    },
    // 47 - mult: power multList /* Vec */;
    Production {
        lhs: 30,
        production: &[ParseType::N(31), ParseType::N(37)],
    },
    // 48 - multList: mult_op power multList;
    Production {
        lhs: 31,
        production: &[ParseType::N(31), ParseType::N(37), ParseType::N(32)],
    },
    // 49 - multList: ;
    Production {
        lhs: 31,
        production: &[],
    },
    // 50 - power: factor powerList /* Vec */;
    Production {
        lhs: 37,
        production: &[ParseType::N(38), ParseType::N(19)],
    },
    // 51 - powerList: pow_op factor powerList;
    Production {
        lhs: 38,
        production: &[ParseType::N(38), ParseType::N(19), ParseType::N(36)],
    },
    // 52 - powerList: ;
    Production {
        lhs: 38,
        production: &[],
    },
    // 53 - negate: minus;
    Production {
        lhs: 33,
        production: &[ParseType::N(29)],
    },
    // 54 - factor: number;
    Production {
        lhs: 19,
        production: &[ParseType::N(34)],
    },
    // 55 - factor: idref;
    Production {
        lhs: 19,
        production: &[ParseType::N(21)],
    },
    // 56 - factor: negate factor;
    Production {
        lhs: 19,
        production: &[ParseType::N(19), ParseType::N(33)],
    },
    // 57 - factor: "\(" /* Clipped */ logical_or "\)" /* Clipped */;
    Production {
        lhs: 19,
        production: &[ParseType::T(19), ParseType::N(26), ParseType::T(18)],
    },
    // 58 - number: "0|[1-9][0-9]*";
    Production {
        lhs: 34,
        production: &[ParseType::T(20)],
    },
    // 59 - idref: id;
    Production {
        lhs: 21,
        production: &[ParseType::N(20)],
    },
    // 60 - id: "[a-zA-Z_][a-zA-Z0-9_]*";
    Production {
        lhs: 20,
        production: &[ParseType::T(21)],
    },
];

lazy_static! {
    static ref TOKENIZERS: Vec<(&'static str, Tokenizer)> = vec![(
        "INITIAL",
        Tokenizer::build(TERMINALS, SCANNER_0.0, SCANNER_0.1).unwrap()
    ),];
}

pub fn parse<'t, T>(
    input: &'t str,
    file_name: T,
    user_actions: &mut CalcGrammar<'t>,
) -> Result<Tree<ParseTreeType<'t>>>
where
    T: AsRef<Path>,
{
    let mut llk_parser = LLKParser::new(
        14,
        LOOKAHEAD_AUTOMATA,
        PRODUCTIONS,
        TERMINAL_NAMES,
        NON_TERMINALS,
    );
    let token_stream =
        RefCell::new(TokenStream::new(input, file_name, &TOKENIZERS, MAX_K).unwrap());
    // Initialize wrapper
    let mut user_actions = CalcGrammarAuto::new(user_actions);
    let result = llk_parser.parse(token_stream, &mut user_actions);
    match result {
        Ok(()) => Ok(llk_parser.parse_tree),
        Err(e) => Err(e),
    }
}
