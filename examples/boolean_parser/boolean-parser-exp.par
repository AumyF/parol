%start Expressions
%title "Boolean Parser Example"
%comment "Inspired by Tom Humphrey's project https://github.com/Tom01098/BooleanParser"
%line_comment "//"
%block_comment "\(\*" "\*\)"

%%

/*  0 */ Expressions: Expression ExpressionsList /* Vec */ ExpressionsSuffix;
/*  1 */ ExpressionsSuffix: Semicolon;
/*  2 */ ExpressionsSuffix: ;
/*  3 */ ExpressionsList: Semicolon Expression ExpressionsList; // Vec<T>::Push
/*  4 */ ExpressionsList: ; // Vec<T>::New
/*  5 */ Expression: Term TailExpression;
/*  6 */ TailExpression: TailExpressionList /* Vec */;
/*  7 */ TailExpressionList: BinaryOperator Term TailExpressionList; // Vec<T>::Push
/*  8 */ TailExpressionList: ; // Vec<T>::New
/*  9 */ Term: TermOpt Factor;
/* 10 */ TermOpt: UnaryOperator;
/* 11 */ TermOpt: ;
/* 12 */ Boolean: True;
/* 13 */ Boolean: False;
/* 14 */ UnaryOperator: Not;
/* 15 */ BinaryOperator: AndOp;
/* 16 */ BinaryOperator: OrOp;
/* 17 */ BinaryOperator: XorOp;
/* 18 */ BinaryOperator: NorOp;
/* 19 */ BinaryOperator: NandOp;
/* 20 */ BinaryOperator: XnorOp;
/* 21 */ AndOp: "(?i)AND";
/* 22 */ OrOp: "(?i)OR";
/* 23 */ XorOp: "(?i)XOR";
/* 24 */ NorOp: "(?i)NOR";
/* 25 */ NandOp: "(?i)NAND";
/* 26 */ XnorOp: "(?i)XNOR";
/* 27 */ True: "(?i)TRUE";
/* 28 */ False: "(?i)FALSE";
/* 29 */ Not: "(?i)NOT";
/* 30 */ Parenthesized: LeftParenthesis Expression RightParenthesis;
/* 31 */ Semicolon: ";";
/* 32 */ LeftParenthesis: "\(";
/* 33 */ RightParenthesis: "\)";
/* 34 */ Factor: Boolean;
/* 35 */ Factor: Parenthesized;
