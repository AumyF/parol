%start module
%title "Oberon-0 Grammar"
%block_comment "\(\*" "\*\)"

%%

/*  0 */ selector: selectorlist;
/*  1 */ selectorlist: "\." ident selectorlist;
/*  2 */ selectorlist: "\[" expression "]" selectorlist;
/*  3 */ selectorlist: ;
/*  4 */ factor: ident selector;
/*  5 */ factor: integer;
/*  6 */ factor: "\(" expression "\)";
/*  7 */ factor: "~" factor;
/*  8 */ factor: UnaryOp factor;
/*  9 */ term: factor MulExpression;
/* 10 */ MulExpression: MulOperator factor MulExpression;
/* 11 */ MulExpression: ;
/* 12 */ SimpleExpression: term AddExpression;
/* 13 */ AddExpression: AddOperator term AddExpression;
/* 14 */ AddExpression: ;
/* 15 */ AssignOp: ":=";
/* 16 */ RelationOp: AssignOp;
/* 17 */ RelationOp: RelationalOps;
/* 18 */ RelationalOps: ">=|<=|\#|<|>";
/* 19 */ AssignOp: "=";
/* 20 */ expression: SimpleExpression RelationOp SimpleExpression;
/* 21 */ expression: SimpleExpression;
/* 22 */ assignment: ident selector AssignOp expression;
/* 23 */ ActualParameters: "\(" "\)";
/* 24 */ ActualParameters: "\(" expression expressionlistrest "\)";
/* 25 */ expressionlistrest: "," expression expressionlistrest;
/* 26 */ expressionlistrest: ;
/* 27 */ ProcedureCall: ident ActualParameters;
/* 28 */ ProcedureCall: ident;
/* 29 */ IfStatement: "IF" expression "THEN" StatementSequence elseiflist "ELSE" StatementSequence "END";
/* 30 */ IfStatement: "IF" expression "THEN" StatementSequence elseiflist "END";
/* 31 */ elseiflist: "ELSIF" expression "THEN" StatementSequence elseiflist;
/* 32 */ elseiflist: ;
/* 33 */ WhileStatement: "WHILE" expression "DO" StatementSequence "END";
/* 34 */ RepeatStatement: "REPEAT" StatementSequence "UNTIL" expression;
/* 35 */ statement: assignment;
/* 36 */ statement: ProcedureCall;
/* 37 */ statement: IfStatement;
/* 38 */ statement: WhileStatement;
/* 39 */ statement: RepeatStatement;
/* 40 */ statement: ;
/* 41 */ StatementSequence: statement StatementSequenceRest;
/* 42 */ StatementSequenceRest: ";" statement StatementSequenceRest;
/* 43 */ StatementSequenceRest: ;
/* 44 */ IdentList: ident IdentListRest;
/* 45 */ IdentListRest: "," ident IdentListRest;
/* 46 */ IdentListRest: ;
/* 47 */ ArrayType: "ARRAY" expression "OF" type;
/* 48 */ FieldList: IdentList ":" type;
/* 49 */ FieldList: ;
/* 50 */ RecordType: "RECORD" FieldList FieldListRest "END";
/* 51 */ FieldListRest: ";" FieldList FieldListRest;
/* 52 */ FieldListRest: ;
/* 53 */ type: ident;
/* 54 */ type: ArrayType;
/* 55 */ type: RecordType;
/* 56 */ FPSection: "VAR" IdentList ":" type;
/* 57 */ FPSection: IdentList ":" type;
/* 58 */ FormalParameters: "\(" "\)";
/* 59 */ FormalParameters: "\(" FPSection FPSectionRest "\)";
/* 60 */ FPSectionRest: ";" FPSection FPSectionRest;
/* 61 */ FPSectionRest: ;
/* 62 */ ProcedureHeading: "PROCEDURE" ident FormalParameters;
/* 63 */ ProcedureHeading: "PROCEDURE" ident;
/* 64 */ ProcedureBody: declarations "BEGIN" StatementSequence "RETURN" expression "END" ident;
/* 65 */ ProcedureBody: declarations "RETURN" expression "END" ident;
/* 66 */ ProcedureBody: declarations "BEGIN" StatementSequence "END" ident;
/* 67 */ ProcedureBody: declarations "END" ident;
/* 68 */ ProcedureDeclaration: ProcedureHeading ";" ProcedureBody;
/* 69 */ declarations: "CONST" ConstDecls "TYPE" TypeDecls "VAR" VarDecls ProcedureDeclarationList;
/* 70 */ declarations: "CONST" ConstDecls "TYPE" TypeDecls ProcedureDeclarationList;
/* 71 */ declarations: "CONST" ConstDecls "VAR" VarDecls ProcedureDeclarationList;
/* 72 */ declarations: "CONST" ConstDecls ProcedureDeclarationList;
/* 73 */ declarations: "TYPE" TypeDecls "VAR" VarDecls ProcedureDeclarationList;
/* 74 */ declarations: "TYPE" TypeDecls ProcedureDeclarationList;
/* 75 */ declarations: "VAR" VarDecls ProcedureDeclarationList;
/* 76 */ declarations: ProcedureDeclarationList;
/* 77 */ ProcedureDeclarationList: ProcedureDeclaration ";" ProcedureDeclarationList;
/* 78 */ ProcedureDeclarationList: ;
/* 79 */ ConstDecls: ident AssignOp expression ";" ConstDecls;
/* 80 */ ConstDecls: ;
/* 81 */ TypeDecls: ident AssignOp type ";" TypeDecls;
/* 82 */ TypeDecls: ;
/* 83 */ VarDecls: IdentList ":" type ";" VarDecls;
/* 84 */ VarDecls: ;
/* 85 */ module: "MODULE" ident ";" declarations "BEGIN" StatementSequence "END" ident "\.";
/* 86 */ module: "MODULE" ident ";" declarations "END" ident "\.";
/* 87 */ MulOperator: "\*|/|DIV|MOD|&";
/* 88 */ AddOperator: "\+|-|OR";
/* 89 */ UnaryOp: "\+|-";
/* 90 */ ident: "[a-zA-Z][a-zA-Z0-9]*";
/* 91 */ integer: "[0-9]+";

