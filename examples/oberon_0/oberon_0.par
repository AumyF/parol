%start module
%title "Oberon-0 Grammar"
%block_comment "\(\*" "\*\)"

%%

selector: selectorlist;
selectorlist: "\." ident selectorlist;
selectorlist: "\[" expression "]" selectorlist;
selectorlist: ;
factor: ident selector;
factor: integer;
factor: "\(" expression "\)";
factor: "~" factor;
factor: UnaryOp factor;
term: factor MulExpression;
MulExpression: MulOperator factor MulExpression;
MulExpression: ;
SimpleExpression: term AddExpression;
AddExpression: AddOperator term AddExpression;
AddExpression: ;
AssignOp: ":=";
RelationOp: AssignOp;
RelationOp: RelationalOps;
RelationalOps: ">=|<=|\#|<|>";
AssignOp: "=";
expression: SimpleExpression RelationOp SimpleExpression;
expression: SimpleExpression;
assignment: ident selector AssignOp expression;
ActualParameters: "\(" "\)";
ActualParameters: "\(" expression expressionlistrest "\)";
expressionlistrest: "," expression expressionlistrest;
expressionlistrest: ;
ProcedureCall: ident ActualParameters;
ProcedureCall: ident;
IfStatement: IfPrefix "ELSE" StatementSequence "END";
IfStatement: IfPrefix "END";
IfPrefix: "IF" expression "THEN" StatementSequence elseiflist;
elseiflist: "ELSIF" expression "THEN" StatementSequence elseiflist;
elseiflist: ;
WhileStatement: "WHILE" expression "DO" StatementSequence "END";
RepeatStatement: "REPEAT" StatementSequence "UNTIL" expression;
statement: assignment;
statement: ProcedureCall;
statement: IfStatement;
statement: WhileStatement;
statement: RepeatStatement;
statement: ;
StatementSequence: statement StatementSequenceRest;
StatementSequenceRest: ";" statement StatementSequenceRest;
StatementSequenceRest: ;
IdentList: ident IdentListRest;
IdentListRest: "," ident IdentListRest;
IdentListRest: ;
ArrayType: "ARRAY" expression "OF" type;
FieldList: IdentList ":" type;
FieldList: ;
RecordType: "RECORD" FieldList FieldListRest "END";
FieldListRest: ";" FieldList FieldListRest;
FieldListRest: ;
type: ident;
type: ArrayType;
type: RecordType;
FPSection: "VAR" IdentList ":" type;
FPSection: IdentList ":" type;
FormalParameters: "\(" "\)";
FormalParameters: "\(" FPSection FPSectionRest "\)";
FPSectionRest: ";" FPSection FPSectionRest;
FPSectionRest: ;
ProcedureHeading: "PROCEDURE" ident FormalParameters;
ProcedureHeading: "PROCEDURE" ident;
ProcedureBody: declarations "BEGIN" StatementSequence "RETURN" expression "END" ident;
ProcedureBody: declarations "RETURN" expression "END" ident;
ProcedureBody: declarations "BEGIN" StatementSequence "END" ident;
ProcedureBody: declarations "END" ident;
ProcedureDeclaration: ProcedureHeading ";" ProcedureBody;
declarations: "CONST" ConstDecls "TYPE" TypeDecls "VAR" VarDecls ProcedureDeclarationList;
declarations: "CONST" ConstDecls "TYPE" TypeDecls ProcedureDeclarationList;
declarations: "CONST" ConstDecls "VAR" VarDecls ProcedureDeclarationList;
declarations: "CONST" ConstDecls ProcedureDeclarationList;
declarations: "TYPE" TypeDecls "VAR" VarDecls ProcedureDeclarationList;
declarations: "TYPE" TypeDecls ProcedureDeclarationList;
declarations: "VAR" VarDecls ProcedureDeclarationList;
declarations: ProcedureDeclarationList;
ProcedureDeclarationList: ProcedureDeclaration ";" ProcedureDeclarationList;
ProcedureDeclarationList: ;
ConstDecls: ident AssignOp expression ";" ConstDecls;
ConstDecls: ;
TypeDecls: ident AssignOp type ";" TypeDecls;
TypeDecls: ;
VarDecls: IdentList ":" type ";" VarDecls;
VarDecls: ;
module: "MODULE" ident ";" declarations "BEGIN" StatementSequence "END" ident "\.";
module: "MODULE" ident ";" declarations "END" ident "\.";
MulOperator: "\*|/|DIV|MOD|&";
AddOperator: "\+|-|OR";
UnaryOp: "\+|-";
ident: "[a-zA-Z][a-zA-Z0-9]*";
integer: "[0-9]+";

