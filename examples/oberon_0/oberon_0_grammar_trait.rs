// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use id_tree::Tree;

use crate::oberon_0_grammar::Oberon0Grammar;
use miette::{miette, Result};
use parol_runtime::parser::{ParseTreeStackEntry, ParseTreeType, UserActionsTrait};
use std::path::Path;

///
/// The `Oberon0GrammarTrait` trait is automatically generated for the
/// given grammar.
/// All functions have default implementations.
///
pub trait Oberon0GrammarTrait {
    ///
    /// Implement this method if you need the provided information
    ///
    fn init(&mut self, _file_name: &Path) {}

    /// Semantic action for production 0:
    ///
    /// selector: selectorlist;
    ///
    fn selector(
        &mut self,
        _selectorlist: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// selectorlist: "\." ident selectorlist;
    ///
    fn selectorlist_0(
        &mut self,
        _dot: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _selectorlist: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// selectorlist: "\[" expression "]" selectorlist;
    ///
    fn selectorlist_1(
        &mut self,
        _l_bracket: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _r_bracket: &ParseTreeStackEntry,
        _selectorlist: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// selectorlist: ;
    ///
    fn selectorlist_2(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// factor: ident selector;
    ///
    fn factor_0(
        &mut self,
        _ident: &ParseTreeStackEntry,
        _selector: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 5:
    ///
    /// factor: integer;
    ///
    fn factor_1(
        &mut self,
        _integer: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 6:
    ///
    /// factor: "\(" expression "\)";
    ///
    fn factor_2(
        &mut self,
        _l_paren: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _r_paren: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 7:
    ///
    /// factor: "~" factor;
    ///
    fn factor_3(
        &mut self,
        _tilde: &ParseTreeStackEntry,
        _factor: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 8:
    ///
    /// factor: UnaryOp factor;
    ///
    fn factor_4(
        &mut self,
        _unary_op: &ParseTreeStackEntry,
        _factor: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 9:
    ///
    /// term: factor MulExpression;
    ///
    fn term(
        &mut self,
        _factor: &ParseTreeStackEntry,
        _mul_expression: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 10:
    ///
    /// MulExpression: MulOperator factor MulExpression;
    ///
    fn mul_expression_0(
        &mut self,
        _mul_operator: &ParseTreeStackEntry,
        _factor: &ParseTreeStackEntry,
        _mul_expression: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 11:
    ///
    /// MulExpression: ;
    ///
    fn mul_expression_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 12:
    ///
    /// SimpleExpression: term AddExpression;
    ///
    fn simple_expression(
        &mut self,
        _term: &ParseTreeStackEntry,
        _add_expression: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 13:
    ///
    /// AddExpression: AddOperator term AddExpression;
    ///
    fn add_expression_0(
        &mut self,
        _add_operator: &ParseTreeStackEntry,
        _term: &ParseTreeStackEntry,
        _add_expression: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 14:
    ///
    /// AddExpression: ;
    ///
    fn add_expression_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 15:
    ///
    /// AssignOp: ":=";
    ///
    fn assign_op_0(
        &mut self,
        _colon_equ: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 16:
    ///
    /// RelationOp: AssignOp;
    ///
    fn relation_op_0(
        &mut self,
        _assign_op: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 17:
    ///
    /// RelationOp: RelationalOps;
    ///
    fn relation_op_1(
        &mut self,
        _relational_ops: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 18:
    ///
    /// RelationalOps: ">=|<=|\#|<|>";
    ///
    fn relational_ops(
        &mut self,
        _relational_ops: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 19:
    ///
    /// AssignOp: "=";
    ///
    fn assign_op_1(
        &mut self,
        _equ: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 20:
    ///
    /// expression: SimpleExpression expressionSuffix;
    ///
    fn expression(
        &mut self,
        _simple_expression: &ParseTreeStackEntry,
        _expression_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 21:
    ///
    /// expressionSuffix: RelationOp SimpleExpression;
    ///
    fn expression_suffix_0(
        &mut self,
        _relation_op: &ParseTreeStackEntry,
        _simple_expression: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 22:
    ///
    /// expressionSuffix: ;
    ///
    fn expression_suffix_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 23:
    ///
    /// assignment: ident selector AssignOp expression;
    ///
    fn assignment(
        &mut self,
        _ident: &ParseTreeStackEntry,
        _selector: &ParseTreeStackEntry,
        _assign_op: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 24:
    ///
    /// ActualParameters: "\(" ActualParametersSuffix;
    ///
    fn actual_parameters(
        &mut self,
        _l_paren: &ParseTreeStackEntry,
        _actual_parameters_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 25:
    ///
    /// ActualParametersSuffix: "\)";
    ///
    fn actual_parameters_suffix_0(
        &mut self,
        _r_paren: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 26:
    ///
    /// ActualParametersSuffix: expression expressionlistrest "\)";
    ///
    fn actual_parameters_suffix_1(
        &mut self,
        _expression: &ParseTreeStackEntry,
        _expressionlistrest: &ParseTreeStackEntry,
        _r_paren: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 27:
    ///
    /// expressionlistrest: "," expression expressionlistrest;
    ///
    fn expressionlistrest_0(
        &mut self,
        _comma: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _expressionlistrest: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 28:
    ///
    /// expressionlistrest: ;
    ///
    fn expressionlistrest_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 29:
    ///
    /// ProcedureCall: ident ProcedureCallSuffix;
    ///
    fn procedure_call(
        &mut self,
        _ident: &ParseTreeStackEntry,
        _procedure_call_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 30:
    ///
    /// ProcedureCallSuffix: ActualParameters;
    ///
    fn procedure_call_suffix_0(
        &mut self,
        _actual_parameters: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 31:
    ///
    /// ProcedureCallSuffix: ;
    ///
    fn procedure_call_suffix_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 32:
    ///
    /// IfStatement: IfPrefix IfStatementSuffix;
    ///
    fn if_statement(
        &mut self,
        _if_prefix: &ParseTreeStackEntry,
        _if_statement_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 33:
    ///
    /// IfStatementSuffix: "ELSE" StatementSequence "END";
    ///
    fn if_statement_suffix_0(
        &mut self,
        _e_l_s_e: &ParseTreeStackEntry,
        _statement_sequence: &ParseTreeStackEntry,
        _e_n_d: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 34:
    ///
    /// IfStatementSuffix: "END";
    ///
    fn if_statement_suffix_1(
        &mut self,
        _e_n_d: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 35:
    ///
    /// IfPrefix: "IF" expression "THEN" StatementSequence elseiflist;
    ///
    fn if_prefix(
        &mut self,
        _i_f: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _t_h_e_n: &ParseTreeStackEntry,
        _statement_sequence: &ParseTreeStackEntry,
        _elseiflist: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 36:
    ///
    /// elseiflist: "ELSIF" expression "THEN" StatementSequence elseiflist;
    ///
    fn elseiflist_0(
        &mut self,
        _e_l_s_i_f: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _t_h_e_n: &ParseTreeStackEntry,
        _statement_sequence: &ParseTreeStackEntry,
        _elseiflist: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 37:
    ///
    /// elseiflist: ;
    ///
    fn elseiflist_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 38:
    ///
    /// WhileStatement: "WHILE" expression "DO" StatementSequence "END";
    ///
    fn while_statement(
        &mut self,
        _w_h_i_l_e: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _d_o: &ParseTreeStackEntry,
        _statement_sequence: &ParseTreeStackEntry,
        _e_n_d: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 39:
    ///
    /// RepeatStatement: "REPEAT" StatementSequence "UNTIL" expression;
    ///
    fn repeat_statement(
        &mut self,
        _r_e_p_e_a_t: &ParseTreeStackEntry,
        _statement_sequence: &ParseTreeStackEntry,
        _u_n_t_i_l: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 40:
    ///
    /// statement: assignment;
    ///
    fn statement_0(
        &mut self,
        _assignment: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 41:
    ///
    /// statement: ProcedureCall;
    ///
    fn statement_1(
        &mut self,
        _procedure_call: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 42:
    ///
    /// statement: IfStatement;
    ///
    fn statement_2(
        &mut self,
        _if_statement: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 43:
    ///
    /// statement: WhileStatement;
    ///
    fn statement_3(
        &mut self,
        _while_statement: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 44:
    ///
    /// statement: RepeatStatement;
    ///
    fn statement_4(
        &mut self,
        _repeat_statement: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 45:
    ///
    /// statement: ;
    ///
    fn statement_5(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 46:
    ///
    /// StatementSequence: statement StatementSequenceRest;
    ///
    fn statement_sequence(
        &mut self,
        _statement: &ParseTreeStackEntry,
        _statement_sequence_rest: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 47:
    ///
    /// StatementSequenceRest: ";" statement StatementSequenceRest;
    ///
    fn statement_sequence_rest_0(
        &mut self,
        _semicolon: &ParseTreeStackEntry,
        _statement: &ParseTreeStackEntry,
        _statement_sequence_rest: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 48:
    ///
    /// StatementSequenceRest: ;
    ///
    fn statement_sequence_rest_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 49:
    ///
    /// IdentList: ident IdentListRest;
    ///
    fn ident_list(
        &mut self,
        _ident: &ParseTreeStackEntry,
        _ident_list_rest: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 50:
    ///
    /// IdentListRest: "," ident IdentListRest;
    ///
    fn ident_list_rest_0(
        &mut self,
        _comma: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _ident_list_rest: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 51:
    ///
    /// IdentListRest: ;
    ///
    fn ident_list_rest_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 52:
    ///
    /// ArrayType: "ARRAY" expression "OF" type;
    ///
    fn array_type(
        &mut self,
        _a_r_r_a_y: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _o_f: &ParseTreeStackEntry,
        _type: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 53:
    ///
    /// FieldList: IdentList ":" type;
    ///
    fn field_list_0(
        &mut self,
        _ident_list: &ParseTreeStackEntry,
        _colon: &ParseTreeStackEntry,
        _type: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 54:
    ///
    /// FieldList: ;
    ///
    fn field_list_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 55:
    ///
    /// RecordType: "RECORD" FieldList FieldListRest "END";
    ///
    fn record_type(
        &mut self,
        _r_e_c_o_r_d: &ParseTreeStackEntry,
        _field_list: &ParseTreeStackEntry,
        _field_list_rest: &ParseTreeStackEntry,
        _e_n_d: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 56:
    ///
    /// FieldListRest: ";" FieldList FieldListRest;
    ///
    fn field_list_rest_0(
        &mut self,
        _semicolon: &ParseTreeStackEntry,
        _field_list: &ParseTreeStackEntry,
        _field_list_rest: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 57:
    ///
    /// FieldListRest: ;
    ///
    fn field_list_rest_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 58:
    ///
    /// type: ident;
    ///
    fn type_0(
        &mut self,
        _ident: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 59:
    ///
    /// type: ArrayType;
    ///
    fn type_1(
        &mut self,
        _array_type: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 60:
    ///
    /// type: RecordType;
    ///
    fn type_2(
        &mut self,
        _record_type: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 61:
    ///
    /// FPSection: "VAR" IdentList ":" type;
    ///
    fn f_p_section_0(
        &mut self,
        _v_a_r: &ParseTreeStackEntry,
        _ident_list: &ParseTreeStackEntry,
        _colon: &ParseTreeStackEntry,
        _type: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 62:
    ///
    /// FPSection: IdentList ":" type;
    ///
    fn f_p_section_1(
        &mut self,
        _ident_list: &ParseTreeStackEntry,
        _colon: &ParseTreeStackEntry,
        _type: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 63:
    ///
    /// FormalParameters: "\(" FormalParametersSuffix;
    ///
    fn formal_parameters(
        &mut self,
        _l_paren: &ParseTreeStackEntry,
        _formal_parameters_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 64:
    ///
    /// FormalParametersSuffix: "\)";
    ///
    fn formal_parameters_suffix_0(
        &mut self,
        _r_paren: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 65:
    ///
    /// FormalParametersSuffix: FPSection FPSectionRest "\)";
    ///
    fn formal_parameters_suffix_1(
        &mut self,
        _f_p_section: &ParseTreeStackEntry,
        _f_p_section_rest: &ParseTreeStackEntry,
        _r_paren: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 66:
    ///
    /// FPSectionRest: ";" FPSection FPSectionRest;
    ///
    fn f_p_section_rest_0(
        &mut self,
        _semicolon: &ParseTreeStackEntry,
        _f_p_section: &ParseTreeStackEntry,
        _f_p_section_rest: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 67:
    ///
    /// FPSectionRest: ;
    ///
    fn f_p_section_rest_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 68:
    ///
    /// ProcedureHeading: "PROCEDURE" ident ProcedureHeadingSuffix;
    ///
    fn procedure_heading(
        &mut self,
        _p_r_o_c_e_d_u_r_e: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _procedure_heading_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 69:
    ///
    /// ProcedureHeadingSuffix: FormalParameters;
    ///
    fn procedure_heading_suffix_0(
        &mut self,
        _formal_parameters: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 70:
    ///
    /// ProcedureHeadingSuffix: ;
    ///
    fn procedure_heading_suffix_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 71:
    ///
    /// ProcedureBody: declarations ProcedureBodySuffix0;
    ///
    fn procedure_body(
        &mut self,
        _declarations: &ParseTreeStackEntry,
        _procedure_body_suffix0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 72:
    ///
    /// ProcedureBodySuffix0: "BEGIN" StatementSequence ProcedureBodySuffix;
    ///
    fn procedure_body_suffix0_0(
        &mut self,
        _b_e_g_i_n: &ParseTreeStackEntry,
        _statement_sequence: &ParseTreeStackEntry,
        _procedure_body_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 73:
    ///
    /// ProcedureBodySuffix0: "RETURN" expression "END" ident;
    ///
    fn procedure_body_suffix0_1(
        &mut self,
        _r_e_t_u_r_n: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _e_n_d: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 74:
    ///
    /// ProcedureBodySuffix0: "END" ident;
    ///
    fn procedure_body_suffix0_2(
        &mut self,
        _e_n_d: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 75:
    ///
    /// ProcedureBodySuffix: "RETURN" expression "END" ident;
    ///
    fn procedure_body_suffix_0(
        &mut self,
        _r_e_t_u_r_n: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _e_n_d: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 76:
    ///
    /// ProcedureBodySuffix: "END" ident;
    ///
    fn procedure_body_suffix_1(
        &mut self,
        _e_n_d: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 77:
    ///
    /// ProcedureDeclaration: ProcedureHeading ";" ProcedureBody;
    ///
    fn procedure_declaration(
        &mut self,
        _procedure_heading: &ParseTreeStackEntry,
        _semicolon: &ParseTreeStackEntry,
        _procedure_body: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 78:
    ///
    /// declarations: "TYPE" TypeDecls declarationsSuffix1;
    ///
    fn declarations_0(
        &mut self,
        _t_y_p_e: &ParseTreeStackEntry,
        _type_decls: &ParseTreeStackEntry,
        _declarations_suffix1: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 79:
    ///
    /// declarations: "CONST" ConstDecls declarationsSuffix0;
    ///
    fn declarations_1(
        &mut self,
        _c_o_n_s_t: &ParseTreeStackEntry,
        _const_decls: &ParseTreeStackEntry,
        _declarations_suffix0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 80:
    ///
    /// declarationsSuffix1: "VAR" VarDecls ProcedureDeclarationList;
    ///
    fn declarations_suffix1_0(
        &mut self,
        _v_a_r: &ParseTreeStackEntry,
        _var_decls: &ParseTreeStackEntry,
        _procedure_declaration_list: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 81:
    ///
    /// declarationsSuffix1: ProcedureDeclarationList;
    ///
    fn declarations_suffix1_1(
        &mut self,
        _procedure_declaration_list: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 82:
    ///
    /// declarations: "VAR" VarDecls ProcedureDeclarationList;
    ///
    fn declarations_2(
        &mut self,
        _v_a_r: &ParseTreeStackEntry,
        _var_decls: &ParseTreeStackEntry,
        _procedure_declaration_list: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 83:
    ///
    /// declarations: ProcedureDeclarationList;
    ///
    fn declarations_3(
        &mut self,
        _procedure_declaration_list: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 84:
    ///
    /// declarationsSuffix0: "TYPE" TypeDecls declarationsSuffix;
    ///
    fn declarations_suffix0_0(
        &mut self,
        _t_y_p_e: &ParseTreeStackEntry,
        _type_decls: &ParseTreeStackEntry,
        _declarations_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 85:
    ///
    /// declarationsSuffix0: "VAR" VarDecls ProcedureDeclarationList;
    ///
    fn declarations_suffix0_1(
        &mut self,
        _v_a_r: &ParseTreeStackEntry,
        _var_decls: &ParseTreeStackEntry,
        _procedure_declaration_list: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 86:
    ///
    /// declarationsSuffix0: ProcedureDeclarationList;
    ///
    fn declarations_suffix0_2(
        &mut self,
        _procedure_declaration_list: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 87:
    ///
    /// declarationsSuffix: "VAR" VarDecls ProcedureDeclarationList;
    ///
    fn declarations_suffix_0(
        &mut self,
        _v_a_r: &ParseTreeStackEntry,
        _var_decls: &ParseTreeStackEntry,
        _procedure_declaration_list: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 88:
    ///
    /// declarationsSuffix: ProcedureDeclarationList;
    ///
    fn declarations_suffix_1(
        &mut self,
        _procedure_declaration_list: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 89:
    ///
    /// ProcedureDeclarationList: ProcedureDeclaration ";" ProcedureDeclarationList;
    ///
    fn procedure_declaration_list_0(
        &mut self,
        _procedure_declaration: &ParseTreeStackEntry,
        _semicolon: &ParseTreeStackEntry,
        _procedure_declaration_list: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 90:
    ///
    /// ProcedureDeclarationList: ;
    ///
    fn procedure_declaration_list_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 91:
    ///
    /// ConstDecls: ident AssignOp expression ";" ConstDecls;
    ///
    fn const_decls_0(
        &mut self,
        _ident: &ParseTreeStackEntry,
        _assign_op: &ParseTreeStackEntry,
        _expression: &ParseTreeStackEntry,
        _semicolon: &ParseTreeStackEntry,
        _const_decls: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 92:
    ///
    /// ConstDecls: ;
    ///
    fn const_decls_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 93:
    ///
    /// TypeDecls: ident AssignOp type ";" TypeDecls;
    ///
    fn type_decls_0(
        &mut self,
        _ident: &ParseTreeStackEntry,
        _assign_op: &ParseTreeStackEntry,
        _type: &ParseTreeStackEntry,
        _semicolon: &ParseTreeStackEntry,
        _type_decls: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 94:
    ///
    /// TypeDecls: ;
    ///
    fn type_decls_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 95:
    ///
    /// VarDecls: IdentList ":" type ";" VarDecls;
    ///
    fn var_decls_0(
        &mut self,
        _ident_list: &ParseTreeStackEntry,
        _colon: &ParseTreeStackEntry,
        _type: &ParseTreeStackEntry,
        _semicolon: &ParseTreeStackEntry,
        _var_decls: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 96:
    ///
    /// VarDecls: ;
    ///
    fn var_decls_1(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 97:
    ///
    /// module: "MODULE" ident ";" declarations moduleSuffix;
    ///
    fn module(
        &mut self,
        _m_o_d_u_l_e: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _semicolon: &ParseTreeStackEntry,
        _declarations: &ParseTreeStackEntry,
        _module_suffix: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 98:
    ///
    /// moduleSuffix: "BEGIN" StatementSequence "END" ident "\.";
    ///
    fn module_suffix_0(
        &mut self,
        _b_e_g_i_n: &ParseTreeStackEntry,
        _statement_sequence: &ParseTreeStackEntry,
        _e_n_d: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _dot: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 99:
    ///
    /// moduleSuffix: "END" ident "\.";
    ///
    fn module_suffix_1(
        &mut self,
        _e_n_d: &ParseTreeStackEntry,
        _ident: &ParseTreeStackEntry,
        _dot: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 100:
    ///
    /// MulOperator: "\*|/|DIV|MOD|&";
    ///
    fn mul_operator(
        &mut self,
        _mul_operator: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 101:
    ///
    /// AddOperator: "\+|-|OR";
    ///
    fn add_operator(
        &mut self,
        _add_operator: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 102:
    ///
    /// UnaryOp: "\+|-";
    ///
    fn unary_op(
        &mut self,
        _unary_op: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 103:
    ///
    /// ident: "[a-zA-Z][a-zA-Z0-9]*";
    ///
    fn ident(
        &mut self,
        _ident: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 104:
    ///
    /// integer: "[0-9]+";
    ///
    fn integer(
        &mut self,
        _integer: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }
}

impl UserActionsTrait<'_> for Oberon0Grammar {
    ///
    /// Initialize the user with additional information.
    /// This function is called by the parser before parsing starts.
    /// It is used to transport necessary data from parser to user.
    ///
    fn init(&mut self, _file_name: &Path) {}

    ///
    /// This function is implemented automatically for the user's item Oberon0Grammar.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeStackEntry],
        parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        match prod_num {
            0 => self.selector(&children[0], parse_tree),
            1 => self.selectorlist_0(&children[0], &children[1], &children[2], parse_tree),
            2 => self.selectorlist_1(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                parse_tree,
            ),
            3 => self.selectorlist_2(parse_tree),
            4 => self.factor_0(&children[0], &children[1], parse_tree),
            5 => self.factor_1(&children[0], parse_tree),
            6 => self.factor_2(&children[0], &children[1], &children[2], parse_tree),
            7 => self.factor_3(&children[0], &children[1], parse_tree),
            8 => self.factor_4(&children[0], &children[1], parse_tree),
            9 => self.term(&children[0], &children[1], parse_tree),
            10 => self.mul_expression_0(&children[0], &children[1], &children[2], parse_tree),
            11 => self.mul_expression_1(parse_tree),
            12 => self.simple_expression(&children[0], &children[1], parse_tree),
            13 => self.add_expression_0(&children[0], &children[1], &children[2], parse_tree),
            14 => self.add_expression_1(parse_tree),
            15 => self.assign_op_0(&children[0], parse_tree),
            16 => self.relation_op_0(&children[0], parse_tree),
            17 => self.relation_op_1(&children[0], parse_tree),
            18 => self.relational_ops(&children[0], parse_tree),
            19 => self.assign_op_1(&children[0], parse_tree),
            20 => self.expression(&children[0], &children[1], parse_tree),
            21 => self.expression_suffix_0(&children[0], &children[1], parse_tree),
            22 => self.expression_suffix_1(parse_tree),
            23 => self.assignment(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                parse_tree,
            ),
            24 => self.actual_parameters(&children[0], &children[1], parse_tree),
            25 => self.actual_parameters_suffix_0(&children[0], parse_tree),
            26 => self.actual_parameters_suffix_1(
                &children[0],
                &children[1],
                &children[2],
                parse_tree,
            ),
            27 => self.expressionlistrest_0(&children[0], &children[1], &children[2], parse_tree),
            28 => self.expressionlistrest_1(parse_tree),
            29 => self.procedure_call(&children[0], &children[1], parse_tree),
            30 => self.procedure_call_suffix_0(&children[0], parse_tree),
            31 => self.procedure_call_suffix_1(parse_tree),
            32 => self.if_statement(&children[0], &children[1], parse_tree),
            33 => self.if_statement_suffix_0(&children[0], &children[1], &children[2], parse_tree),
            34 => self.if_statement_suffix_1(&children[0], parse_tree),
            35 => self.if_prefix(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                &children[4],
                parse_tree,
            ),
            36 => self.elseiflist_0(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                &children[4],
                parse_tree,
            ),
            37 => self.elseiflist_1(parse_tree),
            38 => self.while_statement(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                &children[4],
                parse_tree,
            ),
            39 => self.repeat_statement(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                parse_tree,
            ),
            40 => self.statement_0(&children[0], parse_tree),
            41 => self.statement_1(&children[0], parse_tree),
            42 => self.statement_2(&children[0], parse_tree),
            43 => self.statement_3(&children[0], parse_tree),
            44 => self.statement_4(&children[0], parse_tree),
            45 => self.statement_5(parse_tree),
            46 => self.statement_sequence(&children[0], &children[1], parse_tree),
            47 => {
                self.statement_sequence_rest_0(&children[0], &children[1], &children[2], parse_tree)
            }
            48 => self.statement_sequence_rest_1(parse_tree),
            49 => self.ident_list(&children[0], &children[1], parse_tree),
            50 => self.ident_list_rest_0(&children[0], &children[1], &children[2], parse_tree),
            51 => self.ident_list_rest_1(parse_tree),
            52 => self.array_type(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                parse_tree,
            ),
            53 => self.field_list_0(&children[0], &children[1], &children[2], parse_tree),
            54 => self.field_list_1(parse_tree),
            55 => self.record_type(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                parse_tree,
            ),
            56 => self.field_list_rest_0(&children[0], &children[1], &children[2], parse_tree),
            57 => self.field_list_rest_1(parse_tree),
            58 => self.type_0(&children[0], parse_tree),
            59 => self.type_1(&children[0], parse_tree),
            60 => self.type_2(&children[0], parse_tree),
            61 => self.f_p_section_0(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                parse_tree,
            ),
            62 => self.f_p_section_1(&children[0], &children[1], &children[2], parse_tree),
            63 => self.formal_parameters(&children[0], &children[1], parse_tree),
            64 => self.formal_parameters_suffix_0(&children[0], parse_tree),
            65 => self.formal_parameters_suffix_1(
                &children[0],
                &children[1],
                &children[2],
                parse_tree,
            ),
            66 => self.f_p_section_rest_0(&children[0], &children[1], &children[2], parse_tree),
            67 => self.f_p_section_rest_1(parse_tree),
            68 => self.procedure_heading(&children[0], &children[1], &children[2], parse_tree),
            69 => self.procedure_heading_suffix_0(&children[0], parse_tree),
            70 => self.procedure_heading_suffix_1(parse_tree),
            71 => self.procedure_body(&children[0], &children[1], parse_tree),
            72 => {
                self.procedure_body_suffix0_0(&children[0], &children[1], &children[2], parse_tree)
            }
            73 => self.procedure_body_suffix0_1(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                parse_tree,
            ),
            74 => self.procedure_body_suffix0_2(&children[0], &children[1], parse_tree),
            75 => self.procedure_body_suffix_0(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                parse_tree,
            ),
            76 => self.procedure_body_suffix_1(&children[0], &children[1], parse_tree),
            77 => self.procedure_declaration(&children[0], &children[1], &children[2], parse_tree),
            78 => self.declarations_0(&children[0], &children[1], &children[2], parse_tree),
            79 => self.declarations_1(&children[0], &children[1], &children[2], parse_tree),
            80 => self.declarations_suffix1_0(&children[0], &children[1], &children[2], parse_tree),
            81 => self.declarations_suffix1_1(&children[0], parse_tree),
            82 => self.declarations_2(&children[0], &children[1], &children[2], parse_tree),
            83 => self.declarations_3(&children[0], parse_tree),
            84 => self.declarations_suffix0_0(&children[0], &children[1], &children[2], parse_tree),
            85 => self.declarations_suffix0_1(&children[0], &children[1], &children[2], parse_tree),
            86 => self.declarations_suffix0_2(&children[0], parse_tree),
            87 => self.declarations_suffix_0(&children[0], &children[1], &children[2], parse_tree),
            88 => self.declarations_suffix_1(&children[0], parse_tree),
            89 => self.procedure_declaration_list_0(
                &children[0],
                &children[1],
                &children[2],
                parse_tree,
            ),
            90 => self.procedure_declaration_list_1(parse_tree),
            91 => self.const_decls_0(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                &children[4],
                parse_tree,
            ),
            92 => self.const_decls_1(parse_tree),
            93 => self.type_decls_0(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                &children[4],
                parse_tree,
            ),
            94 => self.type_decls_1(parse_tree),
            95 => self.var_decls_0(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                &children[4],
                parse_tree,
            ),
            96 => self.var_decls_1(parse_tree),
            97 => self.module(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                &children[4],
                parse_tree,
            ),
            98 => self.module_suffix_0(
                &children[0],
                &children[1],
                &children[2],
                &children[3],
                &children[4],
                parse_tree,
            ),
            99 => self.module_suffix_1(&children[0], &children[1], &children[2], parse_tree),
            100 => self.mul_operator(&children[0], parse_tree),
            101 => self.add_operator(&children[0], parse_tree),
            102 => self.unary_op(&children[0], parse_tree),
            103 => self.ident(&children[0], parse_tree),
            104 => self.integer(&children[0], parse_tree),
            _ => Err(miette!("Unhandled production number: {}", prod_num)),
        }
    }
}
