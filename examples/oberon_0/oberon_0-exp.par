%start module
%title "Oberon-0 Grammar"
%block_comment "\(\*" "\*\)"

%%

/*   0 */ selector: selectorlist;
/*   1 */ selectorlist: "\." ident selectorlist;
/*   2 */ selectorlist: "\[" expression "]" selectorlist;
/*   3 */ selectorlist: ;
/*   4 */ factor: ident selector;
/*   5 */ factor: integer;
/*   6 */ factor: "\(" expression "\)";
/*   7 */ factor: "~" factor;
/*   8 */ factor: UnaryOp factor;
/*   9 */ term: factor MulExpression;
/*  10 */ MulExpression: MulOperator factor MulExpression;
/*  11 */ MulExpression: ;
/*  12 */ SimpleExpression: term AddExpression;
/*  13 */ AddExpression: AddOperator term AddExpression;
/*  14 */ AddExpression: ;
/*  15 */ AssignOp: ":=";
/*  16 */ RelationOp: AssignOp;
/*  17 */ RelationOp: RelationalOps;
/*  18 */ RelationalOps: ">=|<=|\#|<|>";
/*  19 */ AssignOp: "=";
/*  20 */ expression: SimpleExpression expressionSuffix;
/*  21 */ expressionSuffix: RelationOp SimpleExpression;
/*  22 */ expressionSuffix: ;
/*  23 */ assignment: ident selector AssignOp expression;
/*  24 */ ActualParameters: "\(" ActualParametersSuffix;
/*  25 */ ActualParametersSuffix: "\)";
/*  26 */ ActualParametersSuffix: expression expressionlistrest "\)";
/*  27 */ expressionlistrest: "," expression expressionlistrest;
/*  28 */ expressionlistrest: ;
/*  29 */ ProcedureCall: ident ProcedureCallSuffix;
/*  30 */ ProcedureCallSuffix: ActualParameters;
/*  31 */ ProcedureCallSuffix: ;
/*  32 */ IfStatement: "IF" expression "THEN" StatementSequence elseiflist IfStatementSuffix;
/*  33 */ IfStatementSuffix: "ELSE" StatementSequence "END";
/*  34 */ IfStatementSuffix: "END";
/*  35 */ elseiflist: "ELSIF" expression "THEN" StatementSequence elseiflist;
/*  36 */ elseiflist: ;
/*  37 */ WhileStatement: "WHILE" expression "DO" StatementSequence "END";
/*  38 */ RepeatStatement: "REPEAT" StatementSequence "UNTIL" expression;
/*  39 */ statement: assignment;
/*  40 */ statement: ProcedureCall;
/*  41 */ statement: IfStatement;
/*  42 */ statement: WhileStatement;
/*  43 */ statement: RepeatStatement;
/*  44 */ statement: ;
/*  45 */ StatementSequence: statement StatementSequenceRest;
/*  46 */ StatementSequenceRest: ";" statement StatementSequenceRest;
/*  47 */ StatementSequenceRest: ;
/*  48 */ IdentList: ident IdentListRest;
/*  49 */ IdentListRest: "," ident IdentListRest;
/*  50 */ IdentListRest: ;
/*  51 */ ArrayType: "ARRAY" expression "OF" type;
/*  52 */ FieldList: IdentList ":" type;
/*  53 */ FieldList: ;
/*  54 */ RecordType: "RECORD" FieldList FieldListRest "END";
/*  55 */ FieldListRest: ";" FieldList FieldListRest;
/*  56 */ FieldListRest: ;
/*  57 */ type: ident;
/*  58 */ type: ArrayType;
/*  59 */ type: RecordType;
/*  60 */ FPSection: "VAR" IdentList ":" type;
/*  61 */ FPSection: IdentList ":" type;
/*  62 */ FormalParameters: "\(" FormalParametersSuffix;
/*  63 */ FormalParametersSuffix: "\)";
/*  64 */ FormalParametersSuffix: FPSection FPSectionRest "\)";
/*  65 */ FPSectionRest: ";" FPSection FPSectionRest;
/*  66 */ FPSectionRest: ;
/*  67 */ ProcedureHeading: "PROCEDURE" ident ProcedureHeadingSuffix;
/*  68 */ ProcedureHeadingSuffix: FormalParameters;
/*  69 */ ProcedureHeadingSuffix: ;
/*  70 */ ProcedureBody: declarations ProcedureBodySuffix1;
/*  71 */ ProcedureBodySuffix1: "BEGIN" StatementSequence ProcedureBodySuffix;
/*  72 */ ProcedureBodySuffix1: "RETURN" expression "END" ident;
/*  73 */ ProcedureBodySuffix1: "END" ident;
/*  74 */ ProcedureBodySuffix: "RETURN" expression "END" ident;
/*  75 */ ProcedureBodySuffix: "END" ident;
/*  76 */ ProcedureDeclaration: ProcedureHeading ";" ProcedureBody;
/*  77 */ declarations: "TYPE" TypeDecls declarationsSuffix2;
/*  78 */ declarations: "CONST" ConstDecls declarationsSuffix1;
/*  79 */ declarationsSuffix2: "VAR" VarDecls ProcedureDeclarationList;
/*  80 */ declarationsSuffix2: ProcedureDeclarationList;
/*  81 */ declarations: "VAR" VarDecls ProcedureDeclarationList;
/*  82 */ declarations: ProcedureDeclarationList;
/*  83 */ declarationsSuffix1: "TYPE" TypeDecls declarationsSuffix;
/*  84 */ declarationsSuffix1: "VAR" VarDecls ProcedureDeclarationList;
/*  85 */ declarationsSuffix1: ProcedureDeclarationList;
/*  86 */ declarationsSuffix: "VAR" VarDecls ProcedureDeclarationList;
/*  87 */ declarationsSuffix: ProcedureDeclarationList;
/*  88 */ ProcedureDeclarationList: ProcedureDeclaration ";" ProcedureDeclarationList;
/*  89 */ ProcedureDeclarationList: ;
/*  90 */ ConstDecls: ident AssignOp expression ";" ConstDecls;
/*  91 */ ConstDecls: ;
/*  92 */ TypeDecls: ident AssignOp type ";" TypeDecls;
/*  93 */ TypeDecls: ;
/*  94 */ VarDecls: IdentList ":" type ";" VarDecls;
/*  95 */ VarDecls: ;
/*  96 */ module: "MODULE" ident ";" declarations moduleSuffix;
/*  97 */ moduleSuffix: "BEGIN" StatementSequence "END" ident "\.";
/*  98 */ moduleSuffix: "END" ident "\.";
/*  99 */ MulOperator: "\*|/|DIV|MOD|&";
/* 100 */ AddOperator: "\+|-|OR";
/* 101 */ UnaryOp: "\+|-";
/* 102 */ ident: "[a-zA-Z][a-zA-Z0-9]*";
/* 103 */ integer: "[0-9]+";
