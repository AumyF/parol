%start Module
%title "Oberon-0 Grammar"
%block_comment "\(\*" "\*\)"

%%

/*   0 */ Selector: SelectorList;
/*   1 */ SelectorList: "\." Ident SelectorList;
/*   2 */ SelectorList: "\[" Expression "]" SelectorList;
/*   3 */ SelectorList: ;
/*   4 */ Factor: Ident Selector;
/*   5 */ Factor: Integer;
/*   6 */ Factor: "\(" Expression "\)";
/*   7 */ Factor: "~" Factor;
/*   8 */ Factor: UnaryOp Factor;
/*   9 */ Term: Factor MulExpression;
/*  10 */ MulExpression: MulOperator Factor MulExpression;
/*  11 */ MulExpression: ;
/*  12 */ SimpleExpression: Term AddExpression;
/*  13 */ AddExpression: AddOperator Term AddExpression;
/*  14 */ AddExpression: ;
/*  15 */ AssignOp: ":=";
/*  16 */ RelationOp: AssignOp;
/*  17 */ RelationOp: RelationalOps;
/*  18 */ RelationalOps: ">=|<=|\#|<|>";
/*  19 */ AssignOp: "=";
/*  20 */ Expression: SimpleExpression ExpressionSuffix;
/*  21 */ ExpressionSuffix: RelationOp SimpleExpression;
/*  22 */ ExpressionSuffix: ;
/*  23 */ Assignment: Ident Selector AssignOp Expression;
/*  24 */ ActualParameters: "\(" ActualParametersSuffix;
/*  25 */ ActualParametersSuffix: "\)";
/*  26 */ ActualParametersSuffix: Expression ExpressionListRest "\)";
/*  27 */ ExpressionListRest: "," Expression ExpressionListRest;
/*  28 */ ExpressionListRest: ;
/*  29 */ ProcedureCall: Ident ProcedureCallSuffix;
/*  30 */ ProcedureCallSuffix: ActualParameters;
/*  31 */ ProcedureCallSuffix: ;
/*  32 */ IfStatement: IfPrefix IfStatementSuffix;
/*  33 */ IfStatementSuffix: "ELSE" StatementSequence "END";
/*  34 */ IfStatementSuffix: "END";
/*  35 */ IfPrefix: "IF" Expression "THEN" StatementSequence ElseIfList;
/*  36 */ ElseIfList: "ELSIF" Expression "THEN" StatementSequence ElseIfList;
/*  37 */ ElseIfList: ;
/*  38 */ WhileStatement: "WHILE" Expression "DO" StatementSequence "END";
/*  39 */ RepeatStatement: "REPEAT" StatementSequence "UNTIL" Expression;
/*  40 */ Statement: Assignment;
/*  41 */ Statement: ProcedureCall;
/*  42 */ Statement: IfStatement;
/*  43 */ Statement: WhileStatement;
/*  44 */ Statement: RepeatStatement;
/*  45 */ Statement: ;
/*  46 */ StatementSequence: Statement StatementSequenceRest;
/*  47 */ StatementSequenceRest: ";" Statement StatementSequenceRest;
/*  48 */ StatementSequenceRest: ;
/*  49 */ IdentList: Ident IdentListRest;
/*  50 */ IdentListRest: "," Ident IdentListRest;
/*  51 */ IdentListRest: ;
/*  52 */ ArrayType: "ARRAY" Expression "OF" Type;
/*  53 */ FieldList: IdentList ":" Type;
/*  54 */ FieldList: ;
/*  55 */ RecordType: "RECORD" FieldList FieldListRest "END";
/*  56 */ FieldListRest: ";" FieldList FieldListRest;
/*  57 */ FieldListRest: ;
/*  58 */ Type: Ident;
/*  59 */ Type: ArrayType;
/*  60 */ Type: RecordType;
/*  61 */ FPSection: "VAR" IdentList ":" Type;
/*  62 */ FPSection: IdentList ":" Type;
/*  63 */ FormalParameters: "\(" FormalParametersSuffix;
/*  64 */ FormalParametersSuffix: "\)";
/*  65 */ FormalParametersSuffix: FPSection FPSectionRest "\)";
/*  66 */ FPSectionRest: ";" FPSection FPSectionRest;
/*  67 */ FPSectionRest: ;
/*  68 */ ProcedureHeading: "PROCEDURE" Ident ProcedureHeadingSuffix;
/*  69 */ ProcedureHeadingSuffix: FormalParameters;
/*  70 */ ProcedureHeadingSuffix: ;
/*  71 */ ProcedureBody: Declarations ProcedureBodySuffix0;
/*  72 */ ProcedureBodySuffix0: "BEGIN" StatementSequence ProcedureBodySuffix;
/*  73 */ ProcedureBodySuffix0: "RETURN" Expression "END" Ident;
/*  74 */ ProcedureBodySuffix0: "END" Ident;
/*  75 */ ProcedureBodySuffix: "RETURN" Expression "END" Ident;
/*  76 */ ProcedureBodySuffix: "END" Ident;
/*  77 */ ProcedureDeclaration: ProcedureHeading ";" ProcedureBody;
/*  78 */ Declarations: "TYPE" TypeDecls DeclarationsSuffix1;
/*  79 */ Declarations: "CONST" ConstDecls DeclarationsSuffix0;
/*  80 */ DeclarationsSuffix1: "VAR" VarDecls ProcedureDeclarationList;
/*  81 */ DeclarationsSuffix1: ProcedureDeclarationList;
/*  82 */ Declarations: "VAR" VarDecls ProcedureDeclarationList;
/*  83 */ Declarations: ProcedureDeclarationList;
/*  84 */ DeclarationsSuffix0: "TYPE" TypeDecls DeclarationsSuffix;
/*  85 */ DeclarationsSuffix0: "VAR" VarDecls ProcedureDeclarationList;
/*  86 */ DeclarationsSuffix0: ProcedureDeclarationList;
/*  87 */ DeclarationsSuffix: "VAR" VarDecls ProcedureDeclarationList;
/*  88 */ DeclarationsSuffix: ProcedureDeclarationList;
/*  89 */ ProcedureDeclarationList: ProcedureDeclaration ";" ProcedureDeclarationList;
/*  90 */ ProcedureDeclarationList: ;
/*  91 */ ConstDecls: Ident AssignOp Expression ";" ConstDecls;
/*  92 */ ConstDecls: ;
/*  93 */ TypeDecls: Ident AssignOp Type ";" TypeDecls;
/*  94 */ TypeDecls: ;
/*  95 */ VarDecls: IdentList ":" Type ";" VarDecls;
/*  96 */ VarDecls: ;
/*  97 */ Module: "MODULE" Ident ";" Declarations ModuleSuffix;
/*  98 */ ModuleSuffix: "BEGIN" StatementSequence "END" Ident "\.";
/*  99 */ ModuleSuffix: "END" Ident "\.";
/* 100 */ MulOperator: "\*|/|DIV|MOD|&";
/* 101 */ AddOperator: "\+|-|OR";
/* 102 */ UnaryOp: "\+|-";
/* 103 */ Ident: "[a-zA-Z][a-zA-Z0-9]*";
/* 104 */ Integer: "[0-9]+";
