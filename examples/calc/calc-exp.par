%start calc
%title "Example grammar of an expression evaluator"
%comment "To demonstrate use of lists, operator precedence, operator associativity"
%line_comment "//"
%block_comment "/\*" "\*/"

%%

/*  0 */ calc: calc_lst1;
/*  1 */ calc_lst1: calc_lst1_itm1 calc_lst1;
/*  2 */ calc_lst1_itm1: instruction ";";
/*  3 */ calc_lst1: ;
/*  4 */ instruction: assignment;
/*  5 */ instruction: logical_or;
/*  6 */ equality_op: "==|!=";
/*  7 */ assign_op: "(\+|-|\*|/|%|<<|>>|&|^|\|)?=";
/*  8 */ assign_item: id assign_op;
/*  9 */ assignment: assign_item assignment_lst1 logical_or;
/* 10 */ assignment_lst1: assignment_lst1_itm1 assignment_lst1;
/* 11 */ assignment_lst1_itm1: assign_item;
/* 12 */ assignment_lst1: ;
/* 13 */ logical_or: logical_and logical_or_lst1;
/* 14 */ logical_or_lst1: logical_or_lst1_itm1 logical_or_lst1;
/* 15 */ logical_or_lst1_itm1: logical_or_item;
/* 16 */ logical_or_lst1: ;
/* 17 */ logical_or_op: "\|\|";
/* 18 */ logical_or_item: logical_or_op logical_and;
/* 19 */ logical_and: bitwise_or logical_and_lst1;
/* 20 */ logical_and_lst1: logical_and_lst1_itm1 logical_and_lst1;
/* 21 */ logical_and_lst1_itm1: logical_and_item;
/* 22 */ logical_and_lst1: ;
/* 23 */ logical_and_op: "&&";
/* 24 */ logical_and_item: logical_and_op bitwise_or;
/* 25 */ bitwise_or: bitwise_and bitwise_or_lst1;
/* 26 */ bitwise_or_lst1: bitwise_or_lst1_itm1 bitwise_or_lst1;
/* 27 */ bitwise_or_lst1_itm1: bitwise_or_item;
/* 28 */ bitwise_or_lst1: ;
/* 29 */ bitwise_or_op: "\|";
/* 30 */ bitwise_or_item: bitwise_or_op bitwise_and;
/* 31 */ bitwise_and: equality bitwise_and_lst1;
/* 32 */ bitwise_and_lst1: bitwise_and_lst1_itm1 bitwise_and_lst1;
/* 33 */ bitwise_and_lst1_itm1: bitwise_and_item;
/* 34 */ bitwise_and_lst1: ;
/* 35 */ bitwise_and_op: "&";
/* 36 */ bitwise_and_item: bitwise_and_op equality;
/* 37 */ equality: relational equality_lst1;
/* 38 */ equality_lst1: equality_lst1_itm1 equality_lst1;
/* 39 */ equality_lst1_itm1: equality_item;
/* 40 */ equality_lst1: ;
/* 41 */ equality_item: equality_op relational;
/* 42 */ bitwise_shift_op: "<<|>>";
/* 43 */ relational: bitwise_shift relational_lst1;
/* 44 */ relational_lst1: relational_lst1_itm1 relational_lst1;
/* 45 */ relational_lst1_itm1: relational_item;
/* 46 */ relational_lst1: ;
/* 47 */ relational_op: "<=|<|>=|>";
/* 48 */ relational_item: relational_op bitwise_shift;
/* 49 */ bitwise_shift: summ bitwise_shift_lst1;
/* 50 */ bitwise_shift_lst1: bitwise_shift_lst1_itm1 bitwise_shift_lst1;
/* 51 */ bitwise_shift_lst1_itm1: bitwise_shift_item;
/* 52 */ bitwise_shift_lst1: ;
/* 53 */ bitwise_shift_item: bitwise_shift_op summ;
/* 54 */ summ: mult summ_lst1;
/* 55 */ summ_lst1: summ_lst1_itm1 summ_lst1;
/* 56 */ summ_lst1_itm1: summ_item;
/* 57 */ summ_lst1: ;
/* 58 */ plus: "\+";
/* 59 */ minus: "-";
/* 60 */ add_op: plus;
/* 61 */ add_op: minus;
/* 62 */ summ_item: add_op mult;
/* 63 */ pow_op: "\*\*";
/* 64 */ mult: power mult_lst1;
/* 65 */ mult_lst1: mult_lst1_itm1 mult_lst1;
/* 66 */ mult_lst1_itm1: mult_item;
/* 67 */ mult_lst1: ;
/* 68 */ mult_op: "\*|/|%";
/* 69 */ mult_item: mult_op power;
/* 70 */ power: factor power_lst1;
/* 71 */ power_lst1: power_lst1_itm1 power_lst1;
/* 72 */ power_lst1_itm1: pow_op factor;
/* 73 */ power_lst1: ;
/* 74 */ negate: minus;
/* 75 */ factor: number;
/* 76 */ factor: idref;
/* 77 */ factor: negate factor;
/* 78 */ factor: "\(" logical_or "\)";
/* 79 */ number: "\d+";
/* 80 */ idref: id;
/* 81 */ id: "[a-zA-Z_]\w*";
