%start Calc
%title "Example grammar of an expression evaluator"
%comment "To demonstrate use of lists, operator precedence, operator associativity"
%line_comment "//"
%block_comment "/\*" "\*/"

%%

/*  0 */ Calc: CalcLst1;
/*  1 */ CalcLst1: CalcLst1Itm1 CalcLst1;
/*  2 */ CalcLst1Itm1: Instruction ";";
/*  3 */ CalcLst1: ;
/*  4 */ Instruction: Assignment;
/*  5 */ Instruction: LogicalOr;
/*  6 */ EqualityOp: "==|!=";
/*  7 */ AssignOp: "(\+|-|\*|/|%|<<|>>|&|\^|\|)?=";
/*  8 */ AssignItem: Id AssignOp;
/*  9 */ Assignment: AssignItem AssignmentLst1 LogicalOr;
/* 10 */ AssignmentLst1: AssignmentLst1Itm1 AssignmentLst1;
/* 11 */ AssignmentLst1Itm1: AssignItem;
/* 12 */ AssignmentLst1: ;
/* 13 */ LogicalOr: LogicalAnd LogicalOrLst1;
/* 14 */ LogicalOrLst1: LogicalOrLst1Itm1 LogicalOrLst1;
/* 15 */ LogicalOrLst1Itm1: LogicalOrItem;
/* 16 */ LogicalOrLst1: ;
/* 17 */ LogicalOrOp: "\|\|";
/* 18 */ LogicalOrItem: LogicalOrOp LogicalAnd;
/* 19 */ LogicalAnd: BitwiseOr LogicalAndLst1;
/* 20 */ LogicalAndLst1: LogicalAndLst1Itm1 LogicalAndLst1;
/* 21 */ LogicalAndLst1Itm1: LogicalAndItem;
/* 22 */ LogicalAndLst1: ;
/* 23 */ LogicalAndOp: "&&";
/* 24 */ LogicalAndItem: LogicalAndOp BitwiseOr;
/* 25 */ BitwiseOr: BitwiseAnd BitwiseOrLst1;
/* 26 */ BitwiseOrLst1: BitwiseOrLst1Itm1 BitwiseOrLst1;
/* 27 */ BitwiseOrLst1Itm1: BitwiseOrItem;
/* 28 */ BitwiseOrLst1: ;
/* 29 */ BitwiseOrOp: "\|";
/* 30 */ BitwiseOrItem: BitwiseOrOp BitwiseAnd;
/* 31 */ BitwiseAnd: Equality BitwiseAndLst1;
/* 32 */ BitwiseAndLst1: BitwiseAndLst1Itm1 BitwiseAndLst1;
/* 33 */ BitwiseAndLst1Itm1: BitwiseAndItem;
/* 34 */ BitwiseAndLst1: ;
/* 35 */ BitwiseAndOp: "&";
/* 36 */ BitwiseAndItem: BitwiseAndOp Equality;
/* 37 */ Equality: Relational EqualityLst1;
/* 38 */ EqualityLst1: EqualityLst1Itm1 EqualityLst1;
/* 39 */ EqualityLst1Itm1: EqualityItem;
/* 40 */ EqualityLst1: ;
/* 41 */ EqualityItem: EqualityOp Relational;
/* 42 */ BitwiseShiftOp: "<<|>>";
/* 43 */ Relational: BitwiseShift RelationalLst1;
/* 44 */ RelationalLst1: RelationalLst1Itm1 RelationalLst1;
/* 45 */ RelationalLst1Itm1: RelationalItem;
/* 46 */ RelationalLst1: ;
/* 47 */ RelationalOp: "<=|<|>=|>";
/* 48 */ RelationalItem: RelationalOp BitwiseShift;
/* 49 */ BitwiseShift: Summ BitwiseShiftLst1;
/* 50 */ BitwiseShiftLst1: BitwiseShiftLst1Itm1 BitwiseShiftLst1;
/* 51 */ BitwiseShiftLst1Itm1: BitwiseShiftItem;
/* 52 */ BitwiseShiftLst1: ;
/* 53 */ BitwiseShiftItem: BitwiseShiftOp Summ;
/* 54 */ Summ: Mult SummLst1;
/* 55 */ SummLst1: SummLst1Itm1 SummLst1;
/* 56 */ SummLst1Itm1: SummItem;
/* 57 */ SummLst1: ;
/* 58 */ Plus: "\+";
/* 59 */ Minus: "-";
/* 60 */ AddOp: Plus;
/* 61 */ AddOp: Minus;
/* 62 */ SummItem: AddOp Mult;
/* 63 */ PowOp: "\*\*";
/* 64 */ Mult: Power MultLst1;
/* 65 */ MultLst1: MultLst1Itm1 MultLst1;
/* 66 */ MultLst1Itm1: MultItem;
/* 67 */ MultLst1: ;
/* 68 */ MultOp: "\*|/|%";
/* 69 */ MultItem: MultOp Power;
/* 70 */ Power: Factor PowerLst1;
/* 71 */ PowerLst1: PowerLst1Itm1 PowerLst1;
/* 72 */ PowerLst1Itm1: PowOp Factor;
/* 73 */ PowerLst1: ;
/* 74 */ Negate: Minus;
/* 75 */ Factor: Number;
/* 76 */ Factor: IdRef;
/* 77 */ Factor: Negate Factor;
/* 78 */ Factor: "\(" LogicalOr "\)";
/* 79 */ Number: "0|[1-9][0-9]*";
/* 80 */ IdRef: Id;
/* 81 */ Id: "[a-zA-Z_][a-zA-Z0-9_]*";
