%start Calc
%title "Example grammar of an expression evaluator"
%comment "To demonstrate use of lists, operator precedence, operator associativity"
%line_comment "//"
%block_comment  "/\*" "\*/"

%%

// -------------------------------------------------------------------------------------------------
// START SYMBOL
Calc: CalcLst1;
CalcLst1: CalcLst1Itm1 CalcLst1;
CalcLst1Itm1: Instruction ";";
CalcLst1: ;

// -------------------------------------------------------------------------------------------------
// INSTRUCTION
Instruction: Assignment;
Instruction: LogicalOr;

// !!! Moved up to ensure token precedence of equality_op over assign_op in lexer !!!
EqualityOp: "==|!=";

// -------------------------------------------------------------------------------------------------
// ASSIGNMENT
AssignOp: "(\+|-|\*|/|%|<<|>>|&|\^|\|)?=";
AssignItem: Id AssignOp;
Assignment: AssignItem AssignmentLst1 LogicalOr;
AssignmentLst1: AssignmentLst1Itm1 AssignmentLst1;
AssignmentLst1Itm1: AssignItem;
AssignmentLst1: ;

// -------------------------------------------------------------------------------------------------
// LOGICAL OR
LogicalOr: LogicalAnd LogicalOrLst1;
LogicalOrLst1: LogicalOrLst1Itm1 LogicalOrLst1;
LogicalOrLst1Itm1: LogicalOrItem;
LogicalOrLst1: ;
LogicalOrOp: "\|\|";
LogicalOrItem: LogicalOrOp LogicalAnd;

// -------------------------------------------------------------------------------------------------
// LOGICAL AND
LogicalAnd: BitwiseOr LogicalAndLst1;
LogicalAndLst1: LogicalAndLst1Itm1 LogicalAndLst1;
LogicalAndLst1Itm1: LogicalAndItem;
LogicalAndLst1: ;
LogicalAndOp: "&&";
LogicalAndItem: LogicalAndOp BitwiseOr;

// -------------------------------------------------------------------------------------------------
// BITWISE OR
BitwiseOr: BitwiseAnd BitwiseOrLst1;
BitwiseOrLst1: BitwiseOrLst1Itm1 BitwiseOrLst1;
BitwiseOrLst1Itm1: BitwiseOrItem;
BitwiseOrLst1: ;
BitwiseOrOp: "\|";
BitwiseOrItem: BitwiseOrOp BitwiseAnd;

// -------------------------------------------------------------------------------------------------
// BITWISE AND
BitwiseAnd: Equality BitwiseAndLst1;
BitwiseAndLst1: BitwiseAndLst1Itm1 BitwiseAndLst1;
BitwiseAndLst1Itm1: BitwiseAndItem;
BitwiseAndLst1: ;
BitwiseAndOp: "&";
BitwiseAndItem: BitwiseAndOp Equality;

// -------------------------------------------------------------------------------------------------
// EQUALITY AND INEQUALITY
Equality: Relational EqualityLst1;
EqualityLst1: EqualityLst1Itm1 EqualityLst1;
EqualityLst1Itm1: EqualityItem;
EqualityLst1: ;
EqualityItem: EqualityOp Relational;
// !!! Moved up to ensure token precedence of bitwise_shift_op over relational_op in lexer !!!
BitwiseShiftOp: "<<|>>";

// -------------------------------------------------------------------------------------------------
// RELATIONAL
Relational: BitwiseShift RelationalLst1;
RelationalLst1: RelationalLst1Itm1 RelationalLst1;
RelationalLst1Itm1: RelationalItem;
RelationalLst1: ;
RelationalOp: "<=|<|>=|>";
RelationalItem: RelationalOp BitwiseShift;

// -------------------------------------------------------------------------------------------------
// BITWISE SHIFT
BitwiseShift: Summ BitwiseShiftLst1;
BitwiseShiftLst1: BitwiseShiftLst1Itm1 BitwiseShiftLst1;
BitwiseShiftLst1Itm1: BitwiseShiftItem;
BitwiseShiftLst1: ;
BitwiseShiftItem: BitwiseShiftOp Summ;

// -------------------------------------------------------------------------------------------------
// ADDITION AND SUBTRACTION
Summ: Mult SummLst1;
SummLst1: SummLst1Itm1 SummLst1;
SummLst1Itm1: SummItem;
SummLst1: ;
Plus: "\+";
Minus: "-";
AddOp: Plus;
AddOp: Minus;
SummItem: AddOp Mult;

// !!! Moved up to ensure token precedence of pow_op over mult_op in lexer !!!
PowOp: "\*\*";

// -------------------------------------------------------------------------------------------------
// MULTIPLICATION, DIVISION AND REMAINDER
Mult: Power MultLst1;

MultLst1: MultLst1Itm1 MultLst1;
MultLst1Itm1: MultItem;
MultLst1: ;
MultOp: "\*|/|%";
MultItem: MultOp Power;

// -------------------------------------------------------------------------------------------------
// POWER
Power: Factor PowerLst1;
PowerLst1: PowerLst1Itm1 PowerLst1;
PowerLst1Itm1: PowOp Factor;
PowerLst1: ;

// -------------------------------------------------------------------------------------------------
// NEGATION
Negate: Minus;

// -------------------------------------------------------------------------------------------------
// FACTOR
Factor: Number;
Factor: IdRef;
Factor: Negate Factor;
Factor: "\(" LogicalOr "\)";
Number: "0|[1-9][0-9]*";
IdRef: Id;
Id: "[a-zA-Z_][a-zA-Z0-9_]*";
