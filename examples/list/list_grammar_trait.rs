// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use crate::list_grammar::ListGrammar;
use id_tree::Tree;
use parol_runtime::parser::errors::*;
use parol_runtime::parser::{ParseTreeStackEntry, ParseTreeType, UserActionsTrait};

///
/// The `ListGrammarTrait` trait is automatically generated for the
/// given grammar.
/// All functions have default implementations.
///
pub trait ListGrammarTrait {
    /// Semantic action for production 0:
    ///
    /// list: ;
    ///
    fn list_0(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// list: num list_rest;
    ///
    fn list_1(
        &mut self,
        _num_0: &ParseTreeStackEntry,
        _list_rest_1: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// list_rest: list_item list_rest;
    ///
    fn list_rest_2(
        &mut self,
        _list_item_0: &ParseTreeStackEntry,
        _list_rest_1: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// list_item: "," num;
    ///
    fn list_item_3(
        &mut self,
        _comma_0: &ParseTreeStackEntry,
        _num_1: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// list_rest: ;
    ///
    fn list_rest_4(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 5:
    ///
    /// list_rest: ",";
    ///
    fn list_rest_5(
        &mut self,
        _comma_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 6:
    ///
    /// num: "\d+";
    ///
    fn num_6(
        &mut self,
        _num_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }
}

impl UserActionsTrait for ListGrammar {
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeStackEntry],
        parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        match prod_num {
            0 => self.list_0(parse_tree),

            1 => self.list_1(&children[0], &children[1], parse_tree),

            2 => self.list_rest_2(&children[0], &children[1], parse_tree),

            3 => self.list_item_3(&children[0], &children[1], parse_tree),

            4 => self.list_rest_4(parse_tree),

            5 => self.list_rest_5(&children[0], parse_tree),

            6 => self.num_6(&children[0], parse_tree),

            _ => panic!("Unhandled production number: {}", prod_num),
        }
    }
}
