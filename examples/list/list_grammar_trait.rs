// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

use crate::list_grammar::ListGrammar;
use id_tree::Tree;
use miette::{miette, Result};
use parol_runtime::parser::{ParseTreeStackEntry, ParseTreeType, UserActionsTrait};

///
/// The `ListGrammarTrait` trait is automatically generated for the
/// given grammar.
/// All functions have default implementations.
///
pub trait ListGrammarTrait {
    ///
    /// Implement this method if you need the provided information
    ///
    fn init(&mut self, _file_name: &std::path::Path) {}

    /// Semantic action for production 0:
    ///
    /// List: Num ListRest ListSuffix;
    ///
    fn list_0(
        &mut self,
        _num_0: &ParseTreeStackEntry,
        _list_rest_1: &ParseTreeStackEntry,
        _list_suffix_2: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// ListSuffix: ",";
    ///
    fn list_suffix_1(
        &mut self,
        _comma_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// ListSuffix: ;
    ///
    fn list_suffix_2(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// List: ;
    ///
    fn list_3(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// ListRest: "," Num ListRest;
    ///
    fn list_rest_4(
        &mut self,
        _comma_0: &ParseTreeStackEntry,
        _num_1: &ParseTreeStackEntry,
        _list_rest_2: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 5:
    ///
    /// ListRest: ;
    ///
    fn list_rest_5(&mut self, _parse_tree: &Tree<ParseTreeType>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for production 6:
    ///
    /// Num: "[0-9]+";
    ///
    fn num_6(
        &mut self,
        _num_0: &ParseTreeStackEntry,
        _parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        Ok(())
    }
}

impl UserActionsTrait for ListGrammar {
    ///
    /// Initialize the user with additional information.
    /// This function is called by the parser before parsing starts.
    /// Is is used to transport necessary data from parser to user.
    ///
    fn init(&mut self, file_name: &std::path::Path) {
        ListGrammarTrait::init(self, file_name);
    }

    ///
    /// This function is implemented automatically for the user's item ListGrammar.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeStackEntry],
        parse_tree: &Tree<ParseTreeType>,
    ) -> Result<()> {
        match prod_num {
            0 => self.list_0(&children[0], &children[1], &children[2], parse_tree),

            1 => self.list_suffix_1(&children[0], parse_tree),

            2 => self.list_suffix_2(parse_tree),

            3 => self.list_3(parse_tree),

            4 => self.list_rest_4(&children[0], &children[1], &children[2], parse_tree),

            5 => self.list_rest_5(parse_tree),

            6 => self.num_6(&children[0], parse_tree),

            _ => Err(miette!("Unhandled production number: {}", prod_num)),
        }
    }
}
