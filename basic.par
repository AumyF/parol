%start Basic
%title "Basic grammar"
%comment "Empty grammar generated by `parol`"
%auto_newline_off

%scanner Cmnt { %auto_newline_off }

%%

Basic   : [EndOfLine] Line { EndOfLine Line } [EndOfLine]
        ;
Line    : LineNumber Statement { ":" Statement }
        ;
Statement
        : "REM" %push(Cmnt) [Comment] %pop()
        | "GOTO" LineNumber
        | Assignment
        ;
Assignment
        : Variable AssignOrEqualityOp Expression
        ;
EndOfLine
        : "(\r?\n|\r)+"
        ;
Literal : Number
        ;
LineNumber
        : Integer
        ;
Number  : Float
        | Integer
        ;
Integer : "([0-9] *)+"
        ;
Float   : Integer "\." [Integer] [Exponent]
        | "\." [Integer] [Exponent]
        | [Integer] Exponent
        ;
Exponent: "E *[-+]? *([0-9] *)+"
        ;
Variable: "[A-Z][0-9A-Z]*"
        ;

// -------------------------------------------------------------------------------------------------
// OPERATOR SYMBOLS
AssignOrEqualityOp
        : "="
        ;
LogicalOrOp
        : "N?OR"
        ;
LogicalAndOp
        : "AND"
        ;
LogicalNotOp
        : "NOT"
        ;
RelationalOp
        : "<\s*>|<\s*=|<|>\s*=|>"
        ;
Plus    : "\+"
        ;
Minus   : "-"
        ;
MulOp  : "\*|/"
        ;


// -------------------------------------------------------------------------------------------------
// PARENTHESIS
LParen  : "\("
        ;
RParen  : "\)"
        ;

// -------------------------------------------------------------------------------------------------
// COMMENT
Comment : "[^\r\n]+"
        ;

// -------------------------------------------------------------------------------------------------
// EXPRESSIONS

Expression
        : LogicalOr
        ;
LogicalOr
        : LogicalAnd { LogicalOrOp LogicalAnd }
        ;
LogicalAnd
        : LogicalNot { LogicalAndOp LogicalNot }
        ;
LogicalNot
        : [LogicalNotOp] Relational
        ;
Relational
        : Summation { (AssignOrEqualityOp | RelationalOp) Summation }
        ;
Summation
        : Multiplication { (Plus | Minus) Multiplication }
        ;
Multiplication
        : Factor { MulOp Factor }
        ;
Factor  : Literal
        | Variable
        | Minus Factor
        | LParen Expression RParen
        ;
