%start ParolLs
%title "Parol grammar"
%comment "Parol's own grammar enhanced with comment processing"
%user_type OwnedToken = crate::parol_ls_grammar::OwnedToken

%%

/*  0 */ ParolLs: Prolog GrammarDefinition ParolLsOpt /* Option */;
/*  1 */ ParolLsOpt /* `Option<T>::Some` */: Comment;
/*  2 */ ParolLsOpt /* `Option<T>::None` */: ;
/*  3 */ Prolog: StartDeclaration PrologList /* Vec */ PrologList0 /* Vec */;
/*  4 */ PrologList0 /* `Vec<T>::Push` */: ScannerState PrologList0;
/*  5 */ PrologList0 /* `Vec<T>::New` */: ;
/*  6 */ PrologList /* `Vec<T>::Push` */: Declaration PrologList;
/*  7 */ PrologList /* `Vec<T>::New` */: ;
/*  8 */ StartDeclaration: Comments "%start" : OwnedToken Identifier Comments;
/*  9 */ Declaration: "%title" : OwnedToken String Comments;
/* 10 */ Declaration: "%comment" : OwnedToken String Comments;
/* 11 */ Declaration: "%user_type" : OwnedToken Identifier "=" : OwnedToken UserTypeName Comments;
/* 12 */ Declaration: ScannerDirectives;
/* 13 */ ScannerDirectives: "%line_comment" : OwnedToken TokenLiteral Comments;
/* 14 */ ScannerDirectives: "%block_comment" : OwnedToken TokenLiteral TokenLiteral Comments;
/* 15 */ ScannerDirectives: "%auto_newline_off" : OwnedToken Comments;
/* 16 */ ScannerDirectives: "%auto_ws_off" : OwnedToken Comments;
/* 17 */ GrammarDefinition: "%%" : OwnedToken Production GrammarDefinitionList /* Vec */;
/* 18 */ GrammarDefinitionList /* `Vec<T>::Push` */: Production GrammarDefinitionList;
/* 19 */ GrammarDefinitionList /* `Vec<T>::New` */: ;
/* 20 */ DoubleColon: "::" : OwnedToken;
/* 21 */ ProductionLHS: Comments Identifier Comments ":" : OwnedToken;
/* 22 */ Production: ProductionLHS TopLevelAlternations ";" : OwnedToken;
/* 23 */ TopLevelAlternations: Alternations;
/* 24 */ Alternations: Alternation AlternationsList /* Vec */;
/* 25 */ AlternationsList /* `Vec<T>::Push` */: "\|" : OwnedToken Comments Alternation AlternationsList;
/* 26 */ AlternationsList /* `Vec<T>::New` */: ;
/* 27 */ Alternation: AlternationList /* Vec */;
/* 28 */ AlternationList /* `Vec<T>::Push` */: Factor Comments AlternationList;
/* 29 */ AlternationList /* `Vec<T>::New` */: ;
/* 30 */ Factor: Group;
/* 31 */ Factor: Repeat;
/* 32 */ Factor: Optional;
/* 33 */ Factor: Symbol;
/* 34 */ Symbol: NonTerminal;
/* 35 */ Symbol: SimpleToken;
/* 36 */ Symbol: TokenWithStates;
/* 37 */ Symbol: ScannerSwitch;
/* 38 */ TokenLiteral: String;
/* 39 */ TokenLiteral: LiteralString;
/* 40 */ TokenLiteral: Regex;
/* 41 */ SimpleToken: TokenLiteral SimpleTokenOpt /* Option */;
/* 42 */ SimpleTokenOpt /* `Option<T>::Some` */: ASTControl;
/* 43 */ SimpleTokenOpt /* `Option<T>::None` */: ;
/* 44 */ TokenWithStates: "<" : OwnedToken StateList ">" : OwnedToken TokenLiteral TokenWithStatesOpt /* Option */;
/* 45 */ TokenWithStatesOpt /* `Option<T>::Some` */: ASTControl;
/* 46 */ TokenWithStatesOpt /* `Option<T>::None` */: ;
/* 47 */ Group: "\(" : OwnedToken Alternations "\)" : OwnedToken;
/* 48 */ Optional: "\[" : OwnedToken Alternations "\]" : OwnedToken;
/* 49 */ Repeat: "\{" : OwnedToken Alternations "\}" : OwnedToken;
/* 50 */ NonTerminal: Identifier NonTerminalOpt /* Option */;
/* 51 */ NonTerminalOpt /* `Option<T>::Some` */: ASTControl;
/* 52 */ NonTerminalOpt /* `Option<T>::None` */: ;
/* 53 */ Identifier: "[a-zA-Z_][a-zA-Z0-9_]*" : OwnedToken;
/* 54 */ String: "\u{22}(\\.|[^\\])*?\u{22}" : OwnedToken;
/* 55 */ LiteralString: "'(\\'|[^'])*?'" : OwnedToken;
/* 56 */ ScannerState: "%scanner" : OwnedToken Identifier "\{" : OwnedToken ScannerStateList /* Vec */ "\}" : OwnedToken;
/* 57 */ ScannerStateList /* `Vec<T>::Push` */: ScannerDirectives ScannerStateList;
/* 58 */ ScannerStateList /* `Vec<T>::New` */: ;
/* 59 */ StateList: Identifier StateListList /* Vec */;
/* 60 */ StateListList /* `Vec<T>::Push` */: "," : OwnedToken Identifier StateListList;
/* 61 */ StateListList /* `Vec<T>::New` */: ;
/* 62 */ ScannerSwitch: "%sc" : OwnedToken "\(" : OwnedToken ScannerSwitchOpt /* Option */ "\)" : OwnedToken;
/* 63 */ ScannerSwitch: "%push" : OwnedToken "\(" : OwnedToken Identifier "\)" : OwnedToken;
/* 64 */ ScannerSwitch: "%pop" : OwnedToken "\(" : OwnedToken "\)" : OwnedToken;
/* 65 */ ScannerSwitchOpt /* `Option<T>::Some` */: Identifier;
/* 66 */ ScannerSwitchOpt /* `Option<T>::None` */: ;
/* 67 */ ASTControl: CutOperator;
/* 68 */ ASTControl: UserTypeDeclaration;
/* 69 */ CutOperator: "\^" : OwnedToken;
/* 70 */ UserTypeDeclaration: ":" : OwnedToken UserTypeName;
/* 71 */ UserTypeName: Identifier UserTypeNameList /* Vec */;
/* 72 */ UserTypeNameList /* `Vec<T>::Push` */: DoubleColon Identifier UserTypeNameList;
/* 73 */ UserTypeNameList /* `Vec<T>::New` */: ;
/* 74 */ Comment: LineComment;
/* 75 */ Comment: BlockComment;
/* 76 */ Comments: CommentsList /* Vec */;
/* 77 */ CommentsList /* `Vec<T>::Push` */: Comment CommentsList;
/* 78 */ CommentsList /* `Vec<T>::New` */: ;
/* 79 */ LineComment: "//.*(:?\r\n|\r|\n|$)" : OwnedToken;
/* 80 */ BlockComment: "(?ms)/\u{2a}.*?\u{2a}/" : OwnedToken;
/* 81 */ Regex: "/(\\/|[^/]|)*?/" : OwnedToken;
